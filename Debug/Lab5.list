
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  0800b018  0800b018  0001b018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4fc  0800b4fc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4fc  0800b4fc  0001b4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b504  0800b504  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b504  0800b504  0001b504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b508  0800b508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014090  200001e4  0800b6f0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014274  0800b6f0  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2ce  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a8  00000000  00000000  0003d4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00041690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  00043088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025504  00000000  00000000  000448f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000208cb  00000000  00000000  00069df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc52a  00000000  00000000  0008a6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166be9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db4  00000000  00000000  00166c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b000 	.word	0x0800b000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b000 	.word	0x0800b000

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_I2S_TxCpltCallback+0x20>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 8000ebe:	f000 fe4d 	bl	8001b5c <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40003c00 	.word	0x40003c00

08000ed0 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_I2S_ErrorCallback+0x20>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 8000ef2:	f7ff ffed 	bl	8000ed0 <AUDIO_OUT_Error_CallBack>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40003c00 	.word	0x40003c00

08000f04 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
int __io_putchar(int ch)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  // How to print in the console in Lab2...
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch , 1, 0xFFFF);
 8000f0c:	1d39      	adds	r1, r7, #4
 8000f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f12:	2201      	movs	r2, #1
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <__io_putchar+0x20>)
 8000f16:	f004 f8d2 	bl	80050be <HAL_UART_Transmit>
  return ch;
 8000f1a:	687b      	ldr	r3, [r7, #4]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000354 	.word	0x20000354

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint64_t CardSize = 0;
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fe4d 	bl	8001bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f835 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f979 	bl	8001238 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f000 f957 	bl	80011f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000f4a:	f000 f8f5 	bl	8001138 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000f4e:	f000 f897 	bl	8001080 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f52:	f000 f8c3 	bl	80010dc <MX_I2S3_Init>
  MX_USART2_UART_Init();
 8000f56:	f000 f925 	bl	80011a4 <MX_USART2_UART_Init>
	FATFS_RdWrTest();

	xTaskCreate(Task3, "task3", 500, NULL, 1, NULL);*/
	/* How to use semaphore_binary in Lab3... */

       mutex_v = xSemaphoreCreateMutex();                  //創建一個互斥旗標 mutex_v
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f004 ffb6 	bl	8005ecc <xQueueCreateMutex>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <main+0x70>)
 8000f64:	6013      	str	r3, [r2, #0]
	xTaskCreate(Task1, "task1", 1000, NULL, 1, NULL);
 8000f66:	2300      	movs	r3, #0
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f74:	4909      	ldr	r1, [pc, #36]	; (8000f9c <main+0x74>)
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <main+0x78>)
 8000f78:	f005 fd76 	bl	8006a68 <xTaskCreate>
	xTaskCreate(Task2, "task2", 1000, NULL, 1, NULL);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8a:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <main+0x7c>)
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <main+0x80>)
 8000f8e:	f005 fd6b 	bl	8006a68 <xTaskCreate>

	vTaskStartScheduler();
 8000f92:	f005 fedb 	bl	8006d4c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000f96:	e7fe      	b.n	8000f96 <main+0x6e>
 8000f98:	2000039c 	.word	0x2000039c
 8000f9c:	0800b054 	.word	0x0800b054
 8000fa0:	08001385 	.word	0x08001385
 8000fa4:	0800b05c 	.word	0x0800b05c
 8000fa8:	080013c1 	.word	0x080013c1

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f007 fa9c 	bl	80084f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <SystemClock_Config+0xcc>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <SystemClock_Config+0xcc>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <SystemClock_Config+0xcc>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <SystemClock_Config+0xd0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a21      	ldr	r2, [pc, #132]	; (800107c <SystemClock_Config+0xd0>)
 8000ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <SystemClock_Config+0xd0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800101c:	2308      	movs	r3, #8
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001020:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001024:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102a:	2304      	movs	r3, #4
 800102c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	4618      	mov	r0, r3
 8001034:	f002 f996 	bl	8003364 <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800103e:	f000 fa3f 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001046:	2302      	movs	r3, #2
 8001048:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800104e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001052:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001058:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2105      	movs	r1, #5
 8001060:	4618      	mov	r0, r3
 8001062:	f002 fbf7 	bl	8003854 <HAL_RCC_ClockConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800106c:	f000 fa28 	bl	80014c0 <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	; 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40007000 	.word	0x40007000

08001080 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001086:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_I2C1_Init+0x54>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_I2C1_Init+0x50>)
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <MX_I2C1_Init+0x58>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_I2C1_Init+0x50>)
 800109e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_I2C1_Init+0x50>)
 80010be:	f001 fb81 	bl	80027c4 <HAL_I2C_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c8:	f000 f9fa 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40005400 	.word	0x40005400
 80010d8:	000186a0 	.word	0x000186a0

080010dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_I2S3_Init+0x54>)
 80010e2:	4a14      	ldr	r2, [pc, #80]	; (8001134 <MX_I2S3_Init+0x58>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2S3_Init+0x54>)
 80010e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_I2S3_Init+0x54>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2S3_Init+0x54>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MX_I2S3_Init+0x54>)
 80010fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001100:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_I2S3_Init+0x54>)
 8001104:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001108:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2S3_Init+0x54>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2S3_Init+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2S3_Init+0x54>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2S3_Init+0x54>)
 800111e:	f001 fc95 	bl	8002a4c <HAL_I2S_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001128:	f000 f9ca 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000254 	.word	0x20000254
 8001134:	40003c00 	.word	0x40003c00

08001138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_SPI1_Init+0x64>)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_SPI1_Init+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_SPI1_Init+0x64>)
 8001144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_SPI1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_SPI1_Init+0x64>)
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_SPI1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_SPI1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_SPI1_Init+0x64>)
 8001184:	220a      	movs	r2, #10
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_SPI1_Init+0x64>)
 800118a:	f002 fef5 	bl	8003f78 <HAL_SPI_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001194:	f000 f994 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200002fc 	.word	0x200002fc
 80011a0:	40013000 	.word	0x40013000

080011a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <MX_USART2_UART_Init+0x50>)
 80011ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_USART2_UART_Init+0x4c>)
 80011dc:	f003 ff22 	bl	8005024 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e6:	f000 f96b 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000354 	.word	0x20000354
 80011f4:	40004400 	.word	0x40004400

080011f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <MX_DMA_Init+0x3c>)
 8001208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_DMA_Init+0x3c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2010      	movs	r0, #16
 8001220:	f000 fdd4 	bl	8001dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001224:	2010      	movs	r0, #16
 8001226:	f000 fded 	bl	8001e04 <HAL_NVIC_EnableIRQ>

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b49      	ldr	r3, [pc, #292]	; (8001378 <MX_GPIO_Init+0x140>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a48      	ldr	r2, [pc, #288]	; (8001378 <MX_GPIO_Init+0x140>)
 8001258:	f043 0310 	orr.w	r3, r3, #16
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b46      	ldr	r3, [pc, #280]	; (8001378 <MX_GPIO_Init+0x140>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <MX_GPIO_Init+0x140>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a41      	ldr	r2, [pc, #260]	; (8001378 <MX_GPIO_Init+0x140>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <MX_GPIO_Init+0x140>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <MX_GPIO_Init+0x140>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a3a      	ldr	r2, [pc, #232]	; (8001378 <MX_GPIO_Init+0x140>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <MX_GPIO_Init+0x140>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_GPIO_Init+0x140>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a33      	ldr	r2, [pc, #204]	; (8001378 <MX_GPIO_Init+0x140>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_GPIO_Init+0x140>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MX_GPIO_Init+0x140>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a2c      	ldr	r2, [pc, #176]	; (8001378 <MX_GPIO_Init+0x140>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <MX_GPIO_Init+0x140>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_GPIO_Init+0x140>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <MX_GPIO_Init+0x140>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <MX_GPIO_Init+0x140>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2110      	movs	r1, #16
 80012fa:	4820      	ldr	r0, [pc, #128]	; (800137c <MX_GPIO_Init+0x144>)
 80012fc:	f001 fa16 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001306:	481e      	ldr	r0, [pc, #120]	; (8001380 <MX_GPIO_Init+0x148>)
 8001308:	f001 fa10 	bl	800272c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130c:	2310      	movs	r3, #16
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4816      	ldr	r0, [pc, #88]	; (800137c <MX_GPIO_Init+0x144>)
 8001324:	f001 f866 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001328:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <MX_GPIO_Init+0x148>)
 8001342:	f001 f857 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_GPIO_Init+0x144>)
 800135c:	f001 f84a 	bl	80023f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	210f      	movs	r1, #15
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fd31 	bl	8001dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800136a:	2006      	movs	r0, #6
 800136c:	f000 fd4a 	bl	8001e04 <HAL_NVIC_EnableIRQ>

}
 8001370:	bf00      	nop
 8001372:	3730      	adds	r7, #48	; 0x30
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40021000 	.word	0x40021000
 8001380:	40020c00 	.word	0x40020c00

08001384 <Task1>:

/* USER CODE BEGIN 4 */
void Task1(void *pvParameters) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	while(1)
	     {
	           xSemaphoreTake(mutex_v, portMAX_DELAY);       //獲取互斥旗標 Mutex_v
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <Task1+0x34>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	4618      	mov	r0, r3
 8001396:	f005 f8d5 	bl	8006544 <xQueueSemaphoreTake>
	           printf("file open OK in task1\r\n");
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <Task1+0x38>)
 800139c:	f007 fd8c 	bl	8008eb8 <puts>
	           xSemaphoreGive(mutex_v);                      //返回互斥旗標 Mutex_v
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <Task1+0x34>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	2300      	movs	r3, #0
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	f004 fda7 	bl	8005efc <xQueueGenericSend>
	           vTaskDelay(pdMS_TO_TICKS(1000));              //延遲 1 秒
 80013ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013b2:	f005 fc97 	bl	8006ce4 <vTaskDelay>
	           xSemaphoreTake(mutex_v, portMAX_DELAY);       //獲取互斥旗標 Mutex_v
 80013b6:	e7e9      	b.n	800138c <Task1+0x8>
 80013b8:	2000039c 	.word	0x2000039c
 80013bc:	0800b064 	.word	0x0800b064

080013c0 <Task2>:
	     }
}

void Task2(void *pvParameters) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

	while(1)
	     {
	           xSemaphoreTake(mutex_v, portMAX_DELAY);       //獲取互斥旗標 Mutex_v
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <Task2+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	4618      	mov	r0, r3
 80013d2:	f005 f8b7 	bl	8006544 <xQueueSemaphoreTake>
	           printf("file open OK in task2\r\n");
 80013d6:	4808      	ldr	r0, [pc, #32]	; (80013f8 <Task2+0x38>)
 80013d8:	f007 fd6e 	bl	8008eb8 <puts>
	           xSemaphoreGive(mutex_v);                      //返回互斥旗標 Mutex_v
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <Task2+0x34>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	f004 fd89 	bl	8005efc <xQueueGenericSend>
	           vTaskDelay(pdMS_TO_TICKS(1000));               //延遲 0.5 秒
 80013ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ee:	f005 fc79 	bl	8006ce4 <vTaskDelay>
	           xSemaphoreTake(mutex_v, portMAX_DELAY);       //獲取互斥旗標 Mutex_v
 80013f2:	e7e9      	b.n	80013c8 <Task2+0x8>
 80013f4:	2000039c 	.word	0x2000039c
 80013f8:	0800b07c 	.word	0x0800b07c

080013fc <HAL_GPIO_EXTI_Callback>:
	}

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken;
	if (GPIO_Pin == GPIO_PIN_0) {
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d137      	bne.n	800147c <HAL_GPIO_EXTI_Callback+0x80>
		xHigherPriorityTaskWoken = pdFALSE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
		if (flag == pdTRUE) {
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_GPIO_EXTI_Callback+0x88>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_GPIO_EXTI_Callback+0x2c>
			xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_GPIO_EXTI_Callback+0x8c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f004 ff12 	bl	800624c <xQueueGiveFromISR>
		} else {
			//do nothing
		}

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142c:	4817      	ldr	r0, [pc, #92]	; (800148c <HAL_GPIO_EXTI_Callback+0x90>)
 800142e:	f001 f996 	bl	800275e <HAL_GPIO_TogglePin>
		uint8_t data_1 = 0x5f | 0x80;
 8001432:	23df      	movs	r3, #223	; 0xdf
 8001434:	72fb      	strb	r3, [r7, #11]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2108      	movs	r1, #8
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <HAL_GPIO_EXTI_Callback+0x94>)
 800143c:	f001 f976 	bl	800272c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, &data_1, 1, 10);
 8001440:	f107 010b 	add.w	r1, r7, #11
 8001444:	230a      	movs	r3, #10
 8001446:	2201      	movs	r2, #1
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <HAL_GPIO_EXTI_Callback+0x98>)
 800144a:	f002 fe1e 	bl	800408a <HAL_SPI_Transmit>
		////	HAL_Delay(10);
		HAL_SPI_Receive(&hspi1, &data_1, 1, 10);
 800144e:	f107 010b 	add.w	r1, r7, #11
 8001452:	230a      	movs	r3, #10
 8001454:	2201      	movs	r2, #1
 8001456:	480f      	ldr	r0, [pc, #60]	; (8001494 <HAL_GPIO_EXTI_Callback+0x98>)
 8001458:	f002 ff53 	bl	8004302 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2108      	movs	r1, #8
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <HAL_GPIO_EXTI_Callback+0x94>)
 8001462:	f001 f963 	bl	800272c <HAL_GPIO_WritePin>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d007      	beq.n	800147c <HAL_GPIO_EXTI_Callback+0x80>
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_GPIO_EXTI_Callback+0x9c>)
 800146e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	f3bf 8f6f 	isb	sy
	}

}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000000 	.word	0x20000000
 8001488:	20000398 	.word	0x20000398
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	200002fc 	.word	0x200002fc
 8001498:	e000ed04 	.word	0xe000ed04

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ae:	f000 fbb5 	bl	8001c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40001400 	.word	0x40001400

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_I2C_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800155a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156c:	2304      	movs	r3, #4
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <HAL_I2C_MspInit+0x8c>)
 8001578:	f000 ff3c 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 8001586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158a:	6413      	str	r3, [r2, #64]	; 0x40
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_I2C_MspInit+0x88>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400

080015ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_I2S_MspInit+0x164>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	f040 8095 	bne.w	8001708 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80015e2:	f240 130f 	movw	r3, #271	; 0x10f
 80015e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80015e8:	2306      	movs	r3, #6
 80015ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4618      	mov	r0, r3
 80015f2:	f002 fb81 	bl	8003cf8 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80015fc:	f7ff ff60 	bl	80014c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <HAL_I2S_MspInit+0x168>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	4a42      	ldr	r2, [pc, #264]	; (8001714 <HAL_I2S_MspInit+0x168>)
 800160a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160e:	6413      	str	r3, [r2, #64]	; 0x40
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <HAL_I2S_MspInit+0x168>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <HAL_I2S_MspInit+0x168>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <HAL_I2S_MspInit+0x168>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6313      	str	r3, [r2, #48]	; 0x30
 800162c:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_I2S_MspInit+0x168>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_I2S_MspInit+0x168>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_I2S_MspInit+0x168>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_I2S_MspInit+0x168>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001654:	2310      	movs	r3, #16
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001664:	2306      	movs	r3, #6
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	482a      	ldr	r0, [pc, #168]	; (8001718 <HAL_I2S_MspInit+0x16c>)
 8001670:	f000 fec0 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001674:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001686:	2306      	movs	r3, #6
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4822      	ldr	r0, [pc, #136]	; (800171c <HAL_I2S_MspInit+0x170>)
 8001692:	f000 feaf 	bl	80023f4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_I2S_MspInit+0x174>)
 8001698:	4a22      	ldr	r2, [pc, #136]	; (8001724 <HAL_I2S_MspInit+0x178>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800169c:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_I2S_MspInit+0x174>)
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016dc:	2203      	movs	r2, #3
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <HAL_I2S_MspInit+0x174>)
 80016ee:	f000 fb97 	bl	8001e20 <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 80016f8:	f7ff fee2 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_I2S_MspInit+0x174>)
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_I2S_MspInit+0x174>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3738      	adds	r7, #56	; 0x38
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40003c00 	.word	0x40003c00
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020800 	.word	0x40020800
 8001720:	2000029c 	.word	0x2000029c
 8001724:	40026088 	.word	0x40026088

08001728 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_SPI_MspInit+0x84>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d12b      	bne.n	80017a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_SPI_MspInit+0x88>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_SPI_MspInit+0x88>)
 8001754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_SPI_MspInit+0x88>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_SPI_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_SPI_MspInit+0x88>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_SPI_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001782:	23e0      	movs	r3, #224	; 0xe0
 8001784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001792:	2305      	movs	r3, #5
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_SPI_MspInit+0x8c>)
 800179e:	f000 fe29 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40013000 	.word	0x40013000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	; (800183c <HAL_UART_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12b      	bne.n	8001832 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a17      	ldr	r2, [pc, #92]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_UART_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	; (8001840 <HAL_UART_MspInit+0x88>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_UART_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001812:	230c      	movs	r3, #12
 8001814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001822:	2307      	movs	r3, #7
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <HAL_UART_MspInit+0x8c>)
 800182e:	f000 fde1 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40004400 	.word	0x40004400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_InitTick+0xe4>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a32      	ldr	r2, [pc, #200]	; (800192c <HAL_InitTick+0xe4>)
 8001862:	f043 0320 	orr.w	r3, r3, #32
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_InitTick+0xe4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 0320 	and.w	r3, r3, #32
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fa08 	bl	8003c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800188e:	f002 f9d9 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8001892:	6378      	str	r0, [r7, #52]	; 0x34
 8001894:	e004      	b.n	80018a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001896:	f002 f9d5 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800189a:	4603      	mov	r3, r0
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_InitTick+0xe8>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	3b01      	subs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_InitTick+0xec>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_InitTick+0xf0>)
 80018b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_InitTick+0xec>)
 80018b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ba:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_InitTick+0xec>)
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_InitTick+0xec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_InitTick+0xec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_InitTick+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_InitTick+0xec>)
 80018d6:	f003 f8f7 	bl	8004ac8 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11b      	bne.n	8001920 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <HAL_InitTick+0xec>)
 80018ea:	f003 f947 	bl	8004b7c <HAL_TIM_Base_Start_IT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018fc:	2037      	movs	r0, #55	; 0x37
 80018fe:	f000 fa81 	bl	8001e04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d808      	bhi.n	800191a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2037      	movs	r0, #55	; 0x37
 800190e:	f000 fa5d 	bl	8001dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_InitTick+0xf4>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e002      	b.n	8001920 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001924:	4618      	mov	r0, r3
 8001926:	3738      	adds	r7, #56	; 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	431bde83 	.word	0x431bde83
 8001934:	200003a0 	.word	0x200003a0
 8001938:	40001400 	.word	0x40001400
 800193c:	20000008 	.word	0x20000008

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 ff0f 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <DMA1_Stream5_IRQHandler+0x10>)
 8001982:	f000 fafb 	bl	8001f7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000029c 	.word	0x2000029c

08001990 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM7_IRQHandler+0x10>)
 8001996:	f003 f961 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200003a0 	.word	0x200003a0

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
	return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019be:	f006 fd63 	bl	8008488 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
	return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
	}

return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fa61 	bl	8000f04 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
	}
	return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
	return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
	return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f006 fcc8 	bl	8008488 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	200003e8 	.word	0x200003e8
 8001b2c:	20014278 	.word	0x20014278

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <SystemInit+0x28>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <SystemInit+0x28>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SystemInit+0x28>)
 8001b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d104      	bne.n	8001b72 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
  }
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	200013f4 	.word	0x200013f4
 8001b80:	200003ec 	.word	0x200003ec

08001b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b8a:	e003      	b.n	8001b94 <LoopCopyDataInit>

08001b8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b92:	3104      	adds	r1, #4

08001b94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b9c:	d3f6      	bcc.n	8001b8c <CopyDataInit>
  ldr  r2, =_sbss
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba0:	e002      	b.n	8001ba8 <LoopFillZerobss>

08001ba2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ba2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ba4:	f842 3b04 	str.w	r3, [r2], #4

08001ba8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001baa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bac:	d3f9      	bcc.n	8001ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bae:	f7ff ffbf 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f006 fc6f 	bl	8008494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb6:	f7ff f9b7 	bl	8000f28 <main>
  bx  lr    
 8001bba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001bc0:	0800b50c 	.word	0x0800b50c
  ldr  r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bc8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001bcc:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001bd0:	20014274 	.word	0x20014274

08001bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC_IRQHandler>
	...

08001bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_Init+0x40>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_Init+0x40>)
 8001bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_Init+0x40>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_Init+0x40>)
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 f8d8 	bl	8001db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c06:	200f      	movs	r0, #15
 8001c08:	f7ff fe1e 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0c:	f7ff fc5e 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	2000000c 	.word	0x2000000c
 8001c40:	200013f8 	.word	0x200013f8

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	200013f8 	.word	0x200013f8

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff4c 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dde:	f7ff ff61 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	6978      	ldr	r0, [r7, #20]
 8001dea:	f7ff ffb1 	bl	8001d50 <NVIC_EncodePriority>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff80 	bl	8001cfc <__NVIC_SetPriority>
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff54 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ff0a 	bl	8001c44 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e099      	b.n	8001f70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e5c:	e00f      	b.n	8001e7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e5e:	f7ff fef1 	bl	8001c44 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d908      	bls.n	8001e7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2203      	movs	r2, #3
 8001e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e078      	b.n	8001f70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e8      	bne.n	8001e5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <HAL_DMA_Init+0x158>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d107      	bne.n	8001ee8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f023 0307 	bic.w	r3, r3, #7
 8001efe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d117      	bne.n	8001f42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00e      	beq.n	8001f42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f9e9 	bl	80022fc <DMA_CheckFifoParam>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e016      	b.n	8001f70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f9a0 	bl	8002290 <DMA_CalcBaseAndBitshift>
 8001f50:	4603      	mov	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	223f      	movs	r2, #63	; 0x3f
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	f010803f 	.word	0xf010803f

08001f7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f88:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <HAL_DMA_IRQHandler+0x248>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a8e      	ldr	r2, [pc, #568]	; (80021c8 <HAL_DMA_IRQHandler+0x24c>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	0a9b      	lsrs	r3, r3, #10
 8001f94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0204 	bic.w	r2, r2, #4
 8001fce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2201      	movs	r2, #1
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d012      	beq.n	800201e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	2201      	movs	r2, #1
 800200c:	409a      	lsls	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2204      	movs	r2, #4
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d012      	beq.n	8002054 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00b      	beq.n	8002054 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002040:	2204      	movs	r2, #4
 8002042:	409a      	lsls	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2210      	movs	r2, #16
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d043      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d03c      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2210      	movs	r2, #16
 8002078:	409a      	lsls	r2, r3
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d018      	beq.n	80020be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d024      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
 80020aa:	e01f      	b.n	80020ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01b      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e016      	b.n	80020ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0208 	bic.w	r2, r2, #8
 80020da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f0:	2220      	movs	r2, #32
 80020f2:	409a      	lsls	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 808f 	beq.w	800221c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8087 	beq.w	800221c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002112:	2220      	movs	r2, #32
 8002114:	409a      	lsls	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b05      	cmp	r3, #5
 8002124:	d136      	bne.n	8002194 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0216 	bic.w	r2, r2, #22
 8002134:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002144:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_DMA_IRQHandler+0x1da>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	223f      	movs	r2, #63	; 0x3f
 800216c:	409a      	lsls	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	2b00      	cmp	r3, #0
 8002188:	d07e      	beq.n	8002288 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
        }
        return;
 8002192:	e079      	b.n	8002288 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01d      	beq.n	80021de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10d      	bne.n	80021cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d031      	beq.n	800221c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
 80021c0:	e02c      	b.n	800221c <HAL_DMA_IRQHandler+0x2a0>
 80021c2:	bf00      	nop
 80021c4:	20000004 	.word	0x20000004
 80021c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d023      	beq.n	800221c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	e01e      	b.n	800221c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10f      	bne.n	800220c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0210 	bic.w	r2, r2, #16
 80021fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	2b00      	cmp	r3, #0
 8002222:	d032      	beq.n	800228a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d022      	beq.n	8002276 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2205      	movs	r2, #5
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3301      	adds	r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	d307      	bcc.n	8002264 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f2      	bne.n	8002248 <HAL_DMA_IRQHandler+0x2cc>
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002264:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e000      	b.n	800228a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002288:	bf00      	nop
    }
  }
}
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	3b10      	subs	r3, #16
 80022a0:	4a14      	ldr	r2, [pc, #80]	; (80022f4 <DMA_CalcBaseAndBitshift+0x64>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022aa:	4a13      	ldr	r2, [pc, #76]	; (80022f8 <DMA_CalcBaseAndBitshift+0x68>)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d909      	bls.n	80022d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	1d1a      	adds	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58
 80022d0:	e007      	b.n	80022e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	aaaaaaab 	.word	0xaaaaaaab
 80022f8:	0800b118 	.word	0x0800b118

080022fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11f      	bne.n	8002356 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d856      	bhi.n	80023ca <DMA_CheckFifoParam+0xce>
 800231c:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <DMA_CheckFifoParam+0x28>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	08002335 	.word	0x08002335
 8002328:	08002347 	.word	0x08002347
 800232c:	08002335 	.word	0x08002335
 8002330:	080023cb 	.word	0x080023cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d046      	beq.n	80023ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002344:	e043      	b.n	80023ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800234e:	d140      	bne.n	80023d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e03d      	b.n	80023d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235e:	d121      	bne.n	80023a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d837      	bhi.n	80023d6 <DMA_CheckFifoParam+0xda>
 8002366:	a201      	add	r2, pc, #4	; (adr r2, 800236c <DMA_CheckFifoParam+0x70>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	0800237d 	.word	0x0800237d
 8002370:	08002383 	.word	0x08002383
 8002374:	0800237d 	.word	0x0800237d
 8002378:	08002395 	.word	0x08002395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e030      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d025      	beq.n	80023da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002392:	e022      	b.n	80023da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800239c:	d11f      	bne.n	80023de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023a2:	e01c      	b.n	80023de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d903      	bls.n	80023b2 <DMA_CheckFifoParam+0xb6>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d003      	beq.n	80023b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b0:	e018      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
      break;
 80023b6:	e015      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e00b      	b.n	80023e2 <DMA_CheckFifoParam+0xe6>
      break;
 80023ca:	bf00      	nop
 80023cc:	e00a      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e008      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023d2:	bf00      	nop
 80023d4:	e006      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e004      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e002      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
    }
  } 
  
  return status; 
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	e16b      	b.n	80026e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	4013      	ands	r3, r2
 8002422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	429a      	cmp	r2, r3
 800242a:	f040 815a 	bne.w	80026e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d005      	beq.n	8002446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	2b02      	cmp	r3, #2
 8002444:	d130      	bne.n	80024a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800247c:	2201      	movs	r2, #1
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 0201 	and.w	r2, r3, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d017      	beq.n	80024e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d123      	bne.n	8002538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	08da      	lsrs	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3208      	adds	r2, #8
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	220f      	movs	r2, #15
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80b4 	beq.w	80026e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b60      	ldr	r3, [pc, #384]	; (8002700 <HAL_GPIO_Init+0x30c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a5f      	ldr	r2, [pc, #380]	; (8002700 <HAL_GPIO_Init+0x30c>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b5d      	ldr	r3, [pc, #372]	; (8002700 <HAL_GPIO_Init+0x30c>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002596:	4a5b      	ldr	r2, [pc, #364]	; (8002704 <HAL_GPIO_Init+0x310>)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	3302      	adds	r3, #2
 800259e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	220f      	movs	r2, #15
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_GPIO_Init+0x314>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x226>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a51      	ldr	r2, [pc, #324]	; (800270c <HAL_GPIO_Init+0x318>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x222>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x31c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x21e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_GPIO_Init+0x320>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4e      	ldr	r2, [pc, #312]	; (8002718 <HAL_GPIO_Init+0x324>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_GPIO_Init+0x328>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_GPIO_Init+0x32c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x20e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4b      	ldr	r2, [pc, #300]	; (8002724 <HAL_GPIO_Init+0x330>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x20a>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e00e      	b.n	800261c <HAL_GPIO_Init+0x228>
 80025fe:	2308      	movs	r3, #8
 8002600:	e00c      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002602:	2306      	movs	r3, #6
 8002604:	e00a      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002606:	2305      	movs	r3, #5
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x228>
 800260a:	2304      	movs	r3, #4
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x228>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x228>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x228>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4935      	ldr	r1, [pc, #212]	; (8002704 <HAL_GPIO_Init+0x310>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_GPIO_Init+0x334>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265e:	4a32      	ldr	r2, [pc, #200]	; (8002728 <HAL_GPIO_Init+0x334>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_GPIO_Init+0x334>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_GPIO_Init+0x334>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_GPIO_Init+0x334>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_GPIO_Init+0x334>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <HAL_GPIO_Init+0x334>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_GPIO_Init+0x334>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f ae90 	bls.w	8002410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40013800 	.word	0x40013800
 8002708:	40020000 	.word	0x40020000
 800270c:	40020400 	.word	0x40020400
 8002710:	40020800 	.word	0x40020800
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40021400 	.word	0x40021400
 8002720:	40021800 	.word	0x40021800
 8002724:	40021c00 	.word	0x40021c00
 8002728:	40013c00 	.word	0x40013c00

0800272c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
 8002738:	4613      	mov	r3, r2
 800273a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800273c:	787b      	ldrb	r3, [r7, #1]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	041a      	lsls	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	619a      	str	r2, [r3, #24]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275e:	b480      	push	{r7}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002770:	887a      	ldrh	r2, [r7, #2]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	041a      	lsls	r2, r3, #16
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43d9      	mvns	r1, r3
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	400b      	ands	r3, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fe22 	bl	80013fc <HAL_GPIO_EXTI_Callback>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e12b      	b.n	8002a2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fe96 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2224      	movs	r2, #36	; 0x24
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002826:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002828:	f001 fa0c 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800282c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4a81      	ldr	r2, [pc, #516]	; (8002a38 <HAL_I2C_Init+0x274>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d807      	bhi.n	8002848 <HAL_I2C_Init+0x84>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <HAL_I2C_Init+0x278>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e006      	b.n	8002856 <HAL_I2C_Init+0x92>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a7d      	ldr	r2, [pc, #500]	; (8002a40 <HAL_I2C_Init+0x27c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	bf94      	ite	ls
 8002850:	2301      	movls	r3, #1
 8002852:	2300      	movhi	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e0e7      	b.n	8002a2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4a78      	ldr	r2, [pc, #480]	; (8002a44 <HAL_I2C_Init+0x280>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a6a      	ldr	r2, [pc, #424]	; (8002a38 <HAL_I2C_Init+0x274>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d802      	bhi.n	8002898 <HAL_I2C_Init+0xd4>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3301      	adds	r3, #1
 8002896:	e009      	b.n	80028ac <HAL_I2C_Init+0xe8>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	4a69      	ldr	r2, [pc, #420]	; (8002a48 <HAL_I2C_Init+0x284>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	099b      	lsrs	r3, r3, #6
 80028aa:	3301      	adds	r3, #1
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	495c      	ldr	r1, [pc, #368]	; (8002a38 <HAL_I2C_Init+0x274>)
 80028c8:	428b      	cmp	r3, r1
 80028ca:	d819      	bhi.n	8002900 <HAL_I2C_Init+0x13c>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e59      	subs	r1, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028da:	1c59      	adds	r1, r3, #1
 80028dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028e0:	400b      	ands	r3, r1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_I2C_Init+0x138>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e59      	subs	r1, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	e051      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e04f      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d111      	bne.n	800292c <HAL_I2C_Init+0x168>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf0c      	ite	eq
 8002924:	2301      	moveq	r3, #1
 8002926:	2300      	movne	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e012      	b.n	8002952 <HAL_I2C_Init+0x18e>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x196>
 8002956:	2301      	movs	r3, #1
 8002958:	e022      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10e      	bne.n	8002980 <HAL_I2C_Init+0x1bc>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e58      	subs	r0, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	440b      	add	r3, r1
 8002970:	fbb0 f3f3 	udiv	r3, r0, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800297e:	e00f      	b.n	80029a0 <HAL_I2C_Init+0x1dc>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e58      	subs	r0, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	0099      	lsls	r1, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	fbb0 f3f3 	udiv	r3, r0, r3
 8002996:	3301      	adds	r3, #1
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	6809      	ldr	r1, [r1, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6911      	ldr	r1, [r2, #16]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68d2      	ldr	r2, [r2, #12]
 80029da:	4311      	orrs	r1, r2
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	000186a0 	.word	0x000186a0
 8002a3c:	001e847f 	.word	0x001e847f
 8002a40:	003d08ff 	.word	0x003d08ff
 8002a44:	431bde83 	.word	0x431bde83
 8002a48:	10624dd3 	.word	0x10624dd3

08002a4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e128      	b.n	8002cb0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a90      	ldr	r2, [pc, #576]	; (8002cb8 <HAL_I2S_Init+0x26c>)
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe fd97 	bl	80015ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a94:	f023 030f 	bic.w	r3, r3, #15
 8002a98:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d060      	beq.n	8002b6c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e001      	b.n	8002abc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d802      	bhi.n	8002aca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002aca:	2001      	movs	r0, #1
 8002acc:	f001 f9f6 	bl	8003ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8002ad0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ada:	d125      	bne.n	8002b28 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	3305      	adds	r3, #5
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e01f      	b.n	8002b46 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	461a      	mov	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	3305      	adds	r3, #5
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	e00e      	b.n	8002b46 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	461a      	mov	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b42:	3305      	adds	r3, #5
 8002b44:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4a5c      	ldr	r2, [pc, #368]	; (8002cbc <HAL_I2S_Init+0x270>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	08db      	lsrs	r3, r3, #3
 8002b50:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e003      	b.n	8002b74 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d902      	bls.n	8002b80 <HAL_I2S_Init+0x134>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2bff      	cmp	r3, #255	; 0xff
 8002b7e:	d907      	bls.n	8002b90 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e08f      	b.n	8002cb0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	ea42 0103 	orr.w	r1, r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bae:	f023 030f 	bic.w	r3, r3, #15
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6851      	ldr	r1, [r2, #4]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6892      	ldr	r2, [r2, #8]
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	68d2      	ldr	r2, [r2, #12]
 8002bc0:	4311      	orrs	r1, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6992      	ldr	r2, [r2, #24]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d161      	bne.n	8002ca0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a38      	ldr	r2, [pc, #224]	; (8002cc0 <HAL_I2S_Init+0x274>)
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_I2S_Init+0x278>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2S_Init+0x1a4>
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_I2S_Init+0x27c>)
 8002bee:	e001      	b.n	8002bf4 <HAL_I2S_Init+0x1a8>
 8002bf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	4932      	ldr	r1, [pc, #200]	; (8002cc4 <HAL_I2S_Init+0x278>)
 8002bfc:	428a      	cmp	r2, r1
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2S_Init+0x1b8>
 8002c00:	4a31      	ldr	r2, [pc, #196]	; (8002cc8 <HAL_I2S_Init+0x27c>)
 8002c02:	e001      	b.n	8002c08 <HAL_I2S_Init+0x1bc>
 8002c04:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002c08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c0c:	f023 030f 	bic.w	r3, r3, #15
 8002c10:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_I2S_Init+0x278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d101      	bne.n	8002c20 <HAL_I2S_Init+0x1d4>
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <HAL_I2S_Init+0x27c>)
 8002c1e:	e001      	b.n	8002c24 <HAL_I2S_Init+0x1d8>
 8002c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c24:	2202      	movs	r2, #2
 8002c26:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <HAL_I2S_Init+0x278>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_I2S_Init+0x1ea>
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <HAL_I2S_Init+0x27c>)
 8002c34:	e001      	b.n	8002c3a <HAL_I2S_Init+0x1ee>
 8002c36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c46:	d003      	beq.n	8002c50 <HAL_I2S_Init+0x204>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	e001      	b.n	8002c5c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c66:	4313      	orrs	r3, r2
 8002c68:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	897b      	ldrh	r3, [r7, #10]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c88:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <HAL_I2S_Init+0x278>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_I2S_Init+0x24c>
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_I2S_Init+0x27c>)
 8002c96:	e001      	b.n	8002c9c <HAL_I2S_Init+0x250>
 8002c98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9c:	897a      	ldrh	r2, [r7, #10]
 8002c9e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08002d9b 	.word	0x08002d9b
 8002cbc:	cccccccd 	.word	0xcccccccd
 8002cc0:	08002eb1 	.word	0x08002eb1
 8002cc4:	40003800 	.word	0x40003800
 8002cc8:	40003400 	.word	0x40003400

08002ccc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	1c9a      	adds	r2, r3, #2
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d24:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe f8bc 	bl	8000eac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	1c9a      	adds	r2, r3, #2
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10e      	bne.n	8002d92 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff9d 	bl	8002ccc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d13a      	bne.n	8002e2c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d109      	bne.n	8002dd4 <I2S_IRQHandler+0x3a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dca:	2b40      	cmp	r3, #64	; 0x40
 8002dcc:	d102      	bne.n	8002dd4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ffb4 	bl	8002d3c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d126      	bne.n	8002e2c <I2S_IRQHandler+0x92>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d11f      	bne.n	8002e2c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe f85a 	bl	8000ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d136      	bne.n	8002ea6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d109      	bne.n	8002e56 <I2S_IRQHandler+0xbc>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d102      	bne.n	8002e56 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ff45 	bl	8002ce0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d122      	bne.n	8002ea6 <I2S_IRQHandler+0x10c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b20      	cmp	r3, #32
 8002e6c:	d11b      	bne.n	8002ea6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e7c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7fe f81d 	bl	8000ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a92      	ldr	r2, [pc, #584]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d101      	bne.n	8002ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002eca:	4b92      	ldr	r3, [pc, #584]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ecc:	e001      	b.n	8002ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a8b      	ldr	r2, [pc, #556]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d101      	bne.n	8002eec <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ee8:	4b8a      	ldr	r3, [pc, #552]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002eea:	e001      	b.n	8002ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d004      	beq.n	8002f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8099 	bne.w	800303a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d107      	bne.n	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f925 	bl	800316c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9c8 	bl	80032cc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d13a      	bne.n	8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d035      	beq.n	8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6e      	ldr	r2, [pc, #440]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002f5a:	4b6e      	ldr	r3, [pc, #440]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f5c:	e001      	b.n	8002f62 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4969      	ldr	r1, [pc, #420]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f6a:	428b      	cmp	r3, r1
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002f6e:	4b69      	ldr	r3, [pc, #420]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f70:	e001      	b.n	8002f76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002f72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f7a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f043 0202 	orr.w	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd ff92 	bl	8000ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	f040 80c3 	bne.w	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80bd 	beq.w	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fe2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ff0:	e001      	b.n	8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4944      	ldr	r1, [pc, #272]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ffe:	428b      	cmp	r3, r1
 8003000:	d101      	bne.n	8003006 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003002:	4b44      	ldr	r3, [pc, #272]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003004:	e001      	b.n	800300a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800300a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800300e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd ff54 	bl	8000ee0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003038:	e089      	b.n	800314e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d107      	bne.n	8003054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8be 	bl	80031d0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d107      	bne.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f8fd 	bl	8003268 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d12f      	bne.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d02a      	beq.n	80030d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003090:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800309e:	e001      	b.n	80030a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80030a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4919      	ldr	r1, [pc, #100]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d101      	bne.n	80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030b2:	e001      	b.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80030b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd ff04 	bl	8000ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d136      	bne.n	8003150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d031      	beq.n	8003150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030f8:	e001      	b.n	80030fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80030fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4902      	ldr	r1, [pc, #8]	; (8003110 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003106:	428b      	cmp	r3, r1
 8003108:	d106      	bne.n	8003118 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800310a:	4b02      	ldr	r3, [pc, #8]	; (8003114 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800310c:	e006      	b.n	800311c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800310e:	bf00      	nop
 8003110:	40003800 	.word	0x40003800
 8003114:	40003400 	.word	0x40003400
 8003118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800311c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003120:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003130:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd feca 	bl	8000ee0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800314c:	e000      	b.n	8003150 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800314e:	bf00      	nop
}
 8003150:	bf00      	nop
 8003152:	3720      	adds	r7, #32
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	1c99      	adds	r1, r3, #2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6251      	str	r1, [r2, #36]	; 0x24
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d113      	bne.n	80031c6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ffc9 	bl	8003158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	1c99      	adds	r1, r3, #2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6251      	str	r1, [r2, #36]	; 0x24
 80031e2:	8819      	ldrh	r1, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <I2SEx_TxISR_I2SExt+0x90>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <I2SEx_TxISR_I2SExt+0x22>
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <I2SEx_TxISR_I2SExt+0x94>)
 80031f0:	e001      	b.n	80031f6 <I2SEx_TxISR_I2SExt+0x26>
 80031f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f6:	460a      	mov	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d121      	bne.n	8003256 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <I2SEx_TxISR_I2SExt+0x90>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <I2SEx_TxISR_I2SExt+0x50>
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <I2SEx_TxISR_I2SExt+0x94>)
 800321e:	e001      	b.n	8003224 <I2SEx_TxISR_I2SExt+0x54>
 8003220:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	490d      	ldr	r1, [pc, #52]	; (8003260 <I2SEx_TxISR_I2SExt+0x90>)
 800322c:	428b      	cmp	r3, r1
 800322e:	d101      	bne.n	8003234 <I2SEx_TxISR_I2SExt+0x64>
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <I2SEx_TxISR_I2SExt+0x94>)
 8003232:	e001      	b.n	8003238 <I2SEx_TxISR_I2SExt+0x68>
 8003234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003238:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800323c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff81 	bl	8003158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40003800 	.word	0x40003800
 8003264:	40003400 	.word	0x40003400

08003268 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68d8      	ldr	r0, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	1c99      	adds	r1, r3, #2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003280:	b282      	uxth	r2, r0
 8003282:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d113      	bne.n	80032c4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032aa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff ff4a 	bl	8003158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a20      	ldr	r2, [pc, #128]	; (800335c <I2SEx_RxISR_I2SExt+0x90>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <I2SEx_RxISR_I2SExt+0x16>
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <I2SEx_RxISR_I2SExt+0x94>)
 80032e0:	e001      	b.n	80032e6 <I2SEx_RxISR_I2SExt+0x1a>
 80032e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e6:	68d8      	ldr	r0, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	1c99      	adds	r1, r3, #2
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032f2:	b282      	uxth	r2, r0
 80032f4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d121      	bne.n	8003352 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <I2SEx_RxISR_I2SExt+0x90>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <I2SEx_RxISR_I2SExt+0x50>
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <I2SEx_RxISR_I2SExt+0x94>)
 800331a:	e001      	b.n	8003320 <I2SEx_RxISR_I2SExt+0x54>
 800331c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <I2SEx_RxISR_I2SExt+0x90>)
 8003328:	428b      	cmp	r3, r1
 800332a:	d101      	bne.n	8003330 <I2SEx_RxISR_I2SExt+0x64>
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <I2SEx_RxISR_I2SExt+0x94>)
 800332e:	e001      	b.n	8003334 <I2SEx_RxISR_I2SExt+0x68>
 8003330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003338:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff03 	bl	8003158 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40003800 	.word	0x40003800
 8003360:	40003400 	.word	0x40003400

08003364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e267      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d075      	beq.n	800346e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003382:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b04      	cmp	r3, #4
 800338c:	d00c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338e:	4b85      	ldr	r3, [pc, #532]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003396:	2b08      	cmp	r3, #8
 8003398:	d112      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339a:	4b82      	ldr	r3, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a6:	d10b      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	4b7e      	ldr	r3, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d05b      	beq.n	800346c <HAL_RCC_OscConfig+0x108>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d157      	bne.n	800346c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e242      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c8:	d106      	bne.n	80033d8 <HAL_RCC_OscConfig+0x74>
 80033ca:	4b76      	ldr	r3, [pc, #472]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a75      	ldr	r2, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x98>
 80033e2:	4b70      	ldr	r3, [pc, #448]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6f      	ldr	r2, [pc, #444]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6d      	ldr	r3, [pc, #436]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6c      	ldr	r2, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xb0>
 80033fc:	4b69      	ldr	r3, [pc, #420]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a68      	ldr	r2, [pc, #416]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b66      	ldr	r3, [pc, #408]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a65      	ldr	r2, [pc, #404]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe fc12 	bl	8001c44 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fc0e 	bl	8001c44 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e207      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5b      	ldr	r3, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xc0>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fbfe 	bl	8001c44 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe fbfa 	bl	8001c44 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1f3      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0xe8>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800347a:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003492:	4b44      	ldr	r3, [pc, #272]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c7      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_OscConfig+0x244>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fe fbb3 	bl	8001c44 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe fbaf 	bl	8001c44 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a8      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4925      	ldr	r1, [pc, #148]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCC_OscConfig+0x244>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fb92 	bl	8001c44 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003524:	f7fe fb8e 	bl	8001c44 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e187      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d036      	beq.n	80035bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_RCC_OscConfig+0x248>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fb72 	bl	8001c44 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe fb6e 	bl	8001c44 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e167      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_OscConfig+0x240>)
 8003578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x200>
 8003582:	e01b      	b.n	80035bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_OscConfig+0x248>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358a:	f7fe fb5b 	bl	8001c44 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	e00e      	b.n	80035b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003592:	f7fe fb57 	bl	8001c44 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d907      	bls.n	80035b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e150      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	42470000 	.word	0x42470000
 80035ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b0:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ea      	bne.n	8003592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8097 	beq.w	80036f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ce:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	4b7d      	ldr	r3, [pc, #500]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	4a7c      	ldr	r2, [pc, #496]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ea:	4b7a      	ldr	r3, [pc, #488]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <HAL_RCC_OscConfig+0x474>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b74      	ldr	r3, [pc, #464]	; (80037d8 <HAL_RCC_OscConfig+0x474>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x474>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fe fb17 	bl	8001c44 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fe fb13 	bl	8001c44 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e10c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <HAL_RCC_OscConfig+0x474>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d106      	bne.n	800364e <HAL_RCC_OscConfig+0x2ea>
 8003640:	4b64      	ldr	r3, [pc, #400]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a63      	ldr	r2, [pc, #396]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	e01c      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b05      	cmp	r3, #5
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x30c>
 8003656:	4b5f      	ldr	r3, [pc, #380]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a5e      	ldr	r2, [pc, #376]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	4b5c      	ldr	r3, [pc, #368]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a5b      	ldr	r2, [pc, #364]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0x324>
 8003670:	4b58      	ldr	r3, [pc, #352]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	4a57      	ldr	r2, [pc, #348]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	6713      	str	r3, [r2, #112]	; 0x70
 800367c:	4b55      	ldr	r3, [pc, #340]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	4a54      	ldr	r2, [pc, #336]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d015      	beq.n	80036bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003690:	f7fe fad8 	bl	8001c44 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003696:	e00a      	b.n	80036ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003698:	f7fe fad4 	bl	8001c44 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e0cb      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	4b49      	ldr	r3, [pc, #292]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0ee      	beq.n	8003698 <HAL_RCC_OscConfig+0x334>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036bc:	f7fe fac2 	bl	8001c44 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fabe 	bl	8001c44 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0b5      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1ee      	bne.n	80036c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e6:	7dfb      	ldrb	r3, [r7, #23]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d105      	bne.n	80036f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ec:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	4a38      	ldr	r2, [pc, #224]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80a1 	beq.w	8003844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b08      	cmp	r3, #8
 800370c:	d05c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d141      	bne.n	800379a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <HAL_RCC_OscConfig+0x478>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fa92 	bl	8001c44 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fa8e 	bl	8001c44 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e087      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	491b      	ldr	r1, [pc, #108]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x478>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7fe fa67 	bl	8001c44 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377a:	f7fe fa63 	bl	8001c44 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e05c      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x416>
 8003798:	e054      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fa50 	bl	8001c44 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe fa4c 	bl	8001c44 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e045      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x444>
 80037c6:	e03d      	b.n	8003844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e038      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <HAL_RCC_OscConfig+0x4ec>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d028      	beq.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d121      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d11a      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d111      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe f97e 	bl	8001c44 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe f97a 	bl	8001c44 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd ff24 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	0800b100 	.word	0x0800b100
 8003a18:	20000004 	.word	0x20000004
 8003a1c:	20000008 	.word	0x20000008

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a24:	b094      	sub	sp, #80	; 0x50
 8003a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a30:	2300      	movs	r3, #0
 8003a32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a38:	4b79      	ldr	r3, [pc, #484]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d00d      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	f200 80e1 	bhi.w	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x34>
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a52:	e0db      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a54:	4b73      	ldr	r3, [pc, #460]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a58:	e0db      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a5a:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a5e:	e0d8      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a60:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	0159      	lsls	r1, r3, #5
 8003aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa4:	0150      	lsls	r0, r2, #5
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4621      	mov	r1, r4
 8003aac:	1a51      	subs	r1, r2, r1
 8003aae:	6139      	str	r1, [r7, #16]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ac4:	4659      	mov	r1, fp
 8003ac6:	018b      	lsls	r3, r1, #6
 8003ac8:	4651      	mov	r1, sl
 8003aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ace:	4651      	mov	r1, sl
 8003ad0:	018a      	lsls	r2, r1, #6
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ad8:	4659      	mov	r1, fp
 8003ada:	eb63 0901 	sbc.w	r9, r3, r1
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003af2:	4690      	mov	r8, r2
 8003af4:	4699      	mov	r9, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	eb18 0303 	adds.w	r3, r8, r3
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	462b      	mov	r3, r5
 8003b00:	eb49 0303 	adc.w	r3, r9, r3
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b12:	4629      	mov	r1, r5
 8003b14:	024b      	lsls	r3, r1, #9
 8003b16:	4621      	mov	r1, r4
 8003b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	024a      	lsls	r2, r1, #9
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b26:	2200      	movs	r2, #0
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b30:	f7fd f83a 	bl	8000ba8 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b3c:	e058      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3e:	4b38      	ldr	r3, [pc, #224]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	2200      	movs	r2, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	4611      	mov	r1, r2
 8003b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b4e:	623b      	str	r3, [r7, #32]
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
 8003b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	f04f 0000 	mov.w	r0, #0
 8003b60:	f04f 0100 	mov.w	r1, #0
 8003b64:	0159      	lsls	r1, r3, #5
 8003b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b6a:	0150      	lsls	r0, r2, #5
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4641      	mov	r1, r8
 8003b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b90:	ebb2 040a 	subs.w	r4, r2, sl
 8003b94:	eb63 050b 	sbc.w	r5, r3, fp
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	00eb      	lsls	r3, r5, #3
 8003ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba6:	00e2      	lsls	r2, r4, #3
 8003ba8:	4614      	mov	r4, r2
 8003baa:	461d      	mov	r5, r3
 8003bac:	4643      	mov	r3, r8
 8003bae:	18e3      	adds	r3, r4, r3
 8003bb0:	603b      	str	r3, [r7, #0]
 8003bb2:	464b      	mov	r3, r9
 8003bb4:	eb45 0303 	adc.w	r3, r5, r3
 8003bb8:	607b      	str	r3, [r7, #4]
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bc6:	4629      	mov	r1, r5
 8003bc8:	028b      	lsls	r3, r1, #10
 8003bca:	4621      	mov	r1, r4
 8003bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	028a      	lsls	r2, r1, #10
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bda:	2200      	movs	r2, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	61fa      	str	r2, [r7, #28]
 8003be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003be4:	f7fc ffe0 	bl	8000ba8 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4613      	mov	r3, r2
 8003bee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3750      	adds	r7, #80	; 0x50
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	00f42400 	.word	0x00f42400
 8003c28:	007a1200 	.word	0x007a1200

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000004 	.word	0x20000004

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	0800b110 	.word	0x0800b110

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffdc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0b5b      	lsrs	r3, r3, #13
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800b110 	.word	0x0800b110

08003c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <HAL_RCC_GetClockConfig+0x60>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0207 	and.w	r2, r3, #7
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40023c00 	.word	0x40023c00

08003cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d035      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d20:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d26:	f7fd ff8d 	bl	8001c44 <HAL_GetTick>
 8003d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d2e:	f7fd ff89 	bl	8001c44 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0b0      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d40:	4b5b      	ldr	r3, [pc, #364]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	019a      	lsls	r2, r3, #6
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	071b      	lsls	r3, r3, #28
 8003d58:	4955      	ldr	r1, [pc, #340]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d60:	4b52      	ldr	r3, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d66:	f7fd ff6d 	bl	8001c44 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d6e:	f7fd ff69 	bl	8001c44 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e090      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8083 	beq.w	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	4b44      	ldr	r3, [pc, #272]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a43      	ldr	r2, [pc, #268]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003db6:	4b3f      	ldr	r3, [pc, #252]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a3e      	ldr	r2, [pc, #248]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd ff3f 	bl	8001c44 <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd ff3b 	bl	8001c44 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e062      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02f      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d028      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e06:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e10:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e16:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e22:	4b23      	ldr	r3, [pc, #140]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d114      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fd ff09 	bl	8001c44 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e34:	e00a      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e36:	f7fd ff05 	bl	8001c44 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e02a      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4c:	4b18      	ldr	r3, [pc, #96]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ee      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e64:	d10d      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e66:	4b12      	ldr	r3, [pc, #72]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7a:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
 8003e80:	e005      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	4a0a      	ldr	r2, [pc, #40]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e8c:	6093      	str	r3, [r2, #8]
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9a:	4905      	ldr	r1, [pc, #20]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	42470068 	.word	0x42470068
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	42470e40 	.word	0x42470e40

08003ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d13e      	bne.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003eda:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d12f      	bne.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003ef2:	617b      	str	r3, [r7, #20]
          break;
 8003ef4:	e02f      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f02:	d108      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f04:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f0c:	4a18      	ldr	r2, [pc, #96]	; (8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e007      	b.n	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f16:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2c:	099b      	lsrs	r3, r3, #6
 8003f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	fb02 f303 	mul.w	r3, r2, r3
 8003f38:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f40:	0f1b      	lsrs	r3, r3, #28
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
          break;
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
          break;
 8003f54:	bf00      	nop
        }
      }
      break;
 8003f56:	bf00      	nop
    }
  }
  return frequency;
 8003f58:	697b      	ldr	r3, [r7, #20]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	00bb8000 	.word	0x00bb8000
 8003f70:	007a1200 	.word	0x007a1200
 8003f74:	00f42400 	.word	0x00f42400

08003f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07b      	b.n	8004082 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9a:	d009      	beq.n	8003fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	e005      	b.n	8003fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fbac 	bl	8001728 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004034:	ea42 0103 	orr.w	r1, r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0104 	and.w	r1, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0210 	and.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b088      	sub	sp, #32
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_SPI_Transmit+0x22>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e126      	b.n	80042fa <HAL_SPI_Transmit+0x270>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b4:	f7fd fdc6 	bl	8001c44 <HAL_GetTick>
 80040b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040ce:	e10b      	b.n	80042e8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_Transmit+0x52>
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040e0:	e102      	b.n	80042e8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2203      	movs	r2, #3
 80040e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004128:	d10f      	bne.n	800414a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004138:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b40      	cmp	r3, #64	; 0x40
 8004156:	d007      	beq.n	8004168 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004170:	d14b      	bne.n	800420a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_SPI_Transmit+0xf6>
 800417a:	8afb      	ldrh	r3, [r7, #22]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d13e      	bne.n	80041fe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041a4:	e02b      	b.n	80041fe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d112      	bne.n	80041da <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80041d8:	e011      	b.n	80041fe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041da:	f7fd fd33 	bl	8001c44 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d803      	bhi.n	80041f2 <HAL_SPI_Transmit+0x168>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <HAL_SPI_Transmit+0x16e>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041fc:	e074      	b.n	80042e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ce      	bne.n	80041a6 <HAL_SPI_Transmit+0x11c>
 8004208:	e04c      	b.n	80042a4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_Transmit+0x18e>
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d140      	bne.n	800429a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	7812      	ldrb	r2, [r2, #0]
 8004224:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800423e:	e02c      	b.n	800429a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b02      	cmp	r3, #2
 800424c:	d113      	bne.n	8004276 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	330c      	adds	r3, #12
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	86da      	strh	r2, [r3, #54]	; 0x36
 8004274:	e011      	b.n	800429a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004276:	f7fd fce5 	bl	8001c44 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d803      	bhi.n	800428e <HAL_SPI_Transmit+0x204>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d102      	bne.n	8004294 <HAL_SPI_Transmit+0x20a>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d102      	bne.n	800429a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004298:	e026      	b.n	80042e8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1cd      	bne.n	8004240 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fbcb 	bl	8004a44 <SPI_EndRxTxTransaction>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e000      	b.n	80042e8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80042e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b088      	sub	sp, #32
 8004306:	af02      	add	r7, sp, #8
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	603b      	str	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800431e:	d112      	bne.n	8004346 <HAL_SPI_Receive+0x44>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10e      	bne.n	8004346 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2204      	movs	r2, #4
 800432c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004330:	88fa      	ldrh	r2, [r7, #6]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f8f1 	bl	8004524 <HAL_SPI_TransmitReceive>
 8004342:	4603      	mov	r3, r0
 8004344:	e0ea      	b.n	800451c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_SPI_Receive+0x52>
 8004350:	2302      	movs	r3, #2
 8004352:	e0e3      	b.n	800451c <HAL_SPI_Receive+0x21a>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800435c:	f7fd fc72 	bl	8001c44 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d002      	beq.n	8004374 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004372:	e0ca      	b.n	800450a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_SPI_Receive+0x7e>
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004384:	e0c1      	b.n	800450a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2204      	movs	r2, #4
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	88fa      	ldrh	r2, [r7, #6]
 800439e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043cc:	d10f      	bne.n	80043ee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f8:	2b40      	cmp	r3, #64	; 0x40
 80043fa:	d007      	beq.n	800440c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d162      	bne.n	80044da <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004414:	e02e      	b.n	8004474 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d115      	bne.n	8004450 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f103 020c 	add.w	r2, r3, #12
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800444e:	e011      	b.n	8004474 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004450:	f7fd fbf8 	bl	8001c44 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d803      	bhi.n	8004468 <HAL_SPI_Receive+0x166>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d102      	bne.n	800446e <HAL_SPI_Receive+0x16c>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004472:	e04a      	b.n	800450a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004478:	b29b      	uxth	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1cb      	bne.n	8004416 <HAL_SPI_Receive+0x114>
 800447e:	e031      	b.n	80044e4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d113      	bne.n	80044b6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	b292      	uxth	r2, r2
 800449a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044b4:	e011      	b.n	80044da <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b6:	f7fd fbc5 	bl	8001c44 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d803      	bhi.n	80044ce <HAL_SPI_Receive+0x1cc>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_Receive+0x1d2>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044d8:	e017      	b.n	800450a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1cd      	bne.n	8004480 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa45 	bl	8004978 <SPI_EndRxTransaction>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d002      	beq.n	8004508 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	75fb      	strb	r3, [r7, #23]
 8004506:	e000      	b.n	800450a <HAL_SPI_Receive+0x208>
  }

error :
 8004508:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	; 0x30
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004532:	2301      	movs	r3, #1
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_SPI_TransmitReceive+0x26>
 8004546:	2302      	movs	r3, #2
 8004548:	e18a      	b.n	8004860 <HAL_SPI_TransmitReceive+0x33c>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004552:	f7fd fb77 	bl	8001c44 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004568:	887b      	ldrh	r3, [r7, #2]
 800456a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800456c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004570:	2b01      	cmp	r3, #1
 8004572:	d00f      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x70>
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457a:	d107      	bne.n	800458c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d103      	bne.n	800458c <HAL_SPI_TransmitReceive+0x68>
 8004584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004588:	2b04      	cmp	r3, #4
 800458a:	d003      	beq.n	8004594 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800458c:	2302      	movs	r3, #2
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004592:	e15b      	b.n	800484c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x82>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x82>
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d103      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045ac:	e14e      	b.n	800484c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d003      	beq.n	80045c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2205      	movs	r2, #5
 80045be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	887a      	ldrh	r2, [r7, #2]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	887a      	ldrh	r2, [r7, #2]
 80045d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	887a      	ldrh	r2, [r7, #2]
 80045ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d007      	beq.n	8004616 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004614:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d178      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_SPI_TransmitReceive+0x10a>
 8004628:	8b7b      	ldrh	r3, [r7, #26]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d166      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	1c9a      	adds	r2, r3, #2
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004652:	e053      	b.n	80046fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d11b      	bne.n	800469a <HAL_SPI_TransmitReceive+0x176>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d016      	beq.n	800469a <HAL_SPI_TransmitReceive+0x176>
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	2b01      	cmp	r3, #1
 8004670:	d113      	bne.n	800469a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	881a      	ldrh	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	1c9a      	adds	r2, r3, #2
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d119      	bne.n	80046dc <HAL_SPI_TransmitReceive+0x1b8>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68da      	ldr	r2, [r3, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	b292      	uxth	r2, r2
 80046be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	1c9a      	adds	r2, r3, #2
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d8:	2301      	movs	r3, #1
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046dc:	f7fd fab2 	bl	8001c44 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d807      	bhi.n	80046fc <HAL_SPI_TransmitReceive+0x1d8>
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d003      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046fa:	e0a7      	b.n	800484c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1a6      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x130>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1a1      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x130>
 8004710:	e07c      	b.n	800480c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_TransmitReceive+0x1fc>
 800471a:	8b7b      	ldrh	r3, [r7, #26]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d16b      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	7812      	ldrb	r2, [r2, #0]
 800472c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004746:	e057      	b.n	80047f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d11c      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x26c>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_SPI_TransmitReceive+0x26c>
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b01      	cmp	r3, #1
 8004764:	d114      	bne.n	8004790 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	7812      	ldrb	r2, [r2, #0]
 8004772:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d119      	bne.n	80047d2 <HAL_SPI_TransmitReceive+0x2ae>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d014      	beq.n	80047d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047ce:	2301      	movs	r3, #1
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047d2:	f7fd fa37 	bl	8001c44 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047de:	429a      	cmp	r2, r3
 80047e0:	d803      	bhi.n	80047ea <HAL_SPI_TransmitReceive+0x2c6>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d102      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x2cc>
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80047f6:	e029      	b.n	800484c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1a2      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x224>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d19d      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f917 	bl	8004a44 <SPI_EndRxTxTransaction>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004828:	e010      	b.n	800484c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	e000      	b.n	800484c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800484a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800485c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004860:	4618      	mov	r0, r3
 8004862:	3730      	adds	r7, #48	; 0x30
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004878:	f7fd f9e4 	bl	8001c44 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	4413      	add	r3, r2
 8004886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004888:	f7fd f9dc 	bl	8001c44 <HAL_GetTick>
 800488c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800488e:	4b39      	ldr	r3, [pc, #228]	; (8004974 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	015b      	lsls	r3, r3, #5
 8004894:	0d1b      	lsrs	r3, r3, #20
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	fb02 f303 	mul.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800489e:	e054      	b.n	800494a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a6:	d050      	beq.n	800494a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048a8:	f7fd f9cc 	bl	8001c44 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d902      	bls.n	80048be <SPI_WaitFlagStateUntilTimeout+0x56>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d13d      	bne.n	800493a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d6:	d111      	bne.n	80048fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e0:	d004      	beq.n	80048ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ea:	d107      	bne.n	80048fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004904:	d10f      	bne.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e017      	b.n	800496a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3b01      	subs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d19b      	bne.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000004 	.word	0x20000004

08004978 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498c:	d111      	bne.n	80049b2 <SPI_EndRxTransaction+0x3a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004996:	d004      	beq.n	80049a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a0:	d107      	bne.n	80049b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d12a      	bne.n	8004a12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d012      	beq.n	80049ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2180      	movs	r1, #128	; 0x80
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f7ff ff49 	bl	8004868 <SPI_WaitFlagStateUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d02d      	beq.n	8004a38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f043 0220 	orr.w	r2, r3, #32
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e026      	b.n	8004a3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	2101      	movs	r1, #1
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff ff36 	bl	8004868 <SPI_WaitFlagStateUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01a      	beq.n	8004a38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e013      	b.n	8004a3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f7ff ff23 	bl	8004868 <SPI_WaitFlagStateUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e000      	b.n	8004a3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a50:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <SPI_EndRxTxTransaction+0x7c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1b      	ldr	r2, [pc, #108]	; (8004ac4 <SPI_EndRxTxTransaction+0x80>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0d5b      	lsrs	r3, r3, #21
 8004a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6e:	d112      	bne.n	8004a96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff fef4 	bl	8004868 <SPI_WaitFlagStateUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e00f      	b.n	8004ab6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d0f2      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x52>
 8004ab0:	e000      	b.n	8004ab4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ab2:	bf00      	nop
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000004 	.word	0x20000004
 8004ac4:	165e9f81 	.word	0x165e9f81

08004ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e041      	b.n	8004b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f839 	bl	8004b66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 f9d8 	bl	8004ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d001      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e04e      	b.n	8004c32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbe:	d01d      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d111      	bne.n	8004c20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d010      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	e007      	b.n	8004c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0202 	mvn.w	r2, #2
 8004c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8ee 	bl	8004e80 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f8e0 	bl	8004e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f8f1 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f8c4 	bl	8004e80 <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8b6 	bl	8004e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8c7 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0208 	mvn.w	r2, #8
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f89a 	bl	8004e80 <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f88c 	bl	8004e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f89d 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0210 	mvn.w	r2, #16
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f870 	bl	8004e80 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f862 	bl	8004e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f873 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0201 	mvn.w	r2, #1
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fc fb5e 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f902 	bl	8005010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f838 	bl	8004ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0220 	mvn.w	r2, #32
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8cc 	bl	8004ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <TIM_Base_SetConfig+0x114>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d00f      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a3d      	ldr	r2, [pc, #244]	; (8004fd4 <TIM_Base_SetConfig+0x118>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00b      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a3c      	ldr	r2, [pc, #240]	; (8004fd8 <TIM_Base_SetConfig+0x11c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d007      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a3b      	ldr	r2, [pc, #236]	; (8004fdc <TIM_Base_SetConfig+0x120>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d003      	beq.n	8004efc <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3a      	ldr	r2, [pc, #232]	; (8004fe0 <TIM_Base_SetConfig+0x124>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d108      	bne.n	8004f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <TIM_Base_SetConfig+0x114>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02b      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d027      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <TIM_Base_SetConfig+0x118>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d023      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <TIM_Base_SetConfig+0x11c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01f      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2a      	ldr	r2, [pc, #168]	; (8004fdc <TIM_Base_SetConfig+0x120>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01b      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a29      	ldr	r2, [pc, #164]	; (8004fe0 <TIM_Base_SetConfig+0x124>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d017      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <TIM_Base_SetConfig+0x128>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <TIM_Base_SetConfig+0x12c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00f      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a26      	ldr	r2, [pc, #152]	; (8004fec <TIM_Base_SetConfig+0x130>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <TIM_Base_SetConfig+0x134>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <TIM_Base_SetConfig+0x138>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <TIM_Base_SetConfig+0x13c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d108      	bne.n	8004f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <TIM_Base_SetConfig+0x114>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0xf8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <TIM_Base_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d103      	bne.n	8004fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	615a      	str	r2, [r3, #20]
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800
 8004fdc:	40000c00 	.word	0x40000c00
 8004fe0:	40010400 	.word	0x40010400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800
 8004ff0:	40001800 	.word	0x40001800
 8004ff4:	40001c00 	.word	0x40001c00
 8004ff8:	40002000 	.word	0x40002000

08004ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e03f      	b.n	80050b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc fbb4 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2224      	movs	r2, #36	; 0x24
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f929 	bl	80052c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800507c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695a      	ldr	r2, [r3, #20]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800508c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68da      	ldr	r2, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800509c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b08a      	sub	sp, #40	; 0x28
 80050c2:	af02      	add	r7, sp, #8
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d17c      	bne.n	80051d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_UART_Transmit+0x2c>
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e075      	b.n	80051da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Transmit+0x3e>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e06e      	b.n	80051da <HAL_UART_Transmit+0x11c>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2221      	movs	r2, #33	; 0x21
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005112:	f7fc fd97 	bl	8001c44 <HAL_GetTick>
 8005116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d108      	bne.n	8005140 <HAL_UART_Transmit+0x82>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e003      	b.n	8005148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005150:	e02a      	b.n	80051a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f840 	bl	80051e2 <UART_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e036      	b.n	80051da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3302      	adds	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e007      	b.n	800519a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1cf      	bne.n	8005152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2140      	movs	r1, #64	; 0x40
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f810 	bl	80051e2 <UART_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e006      	b.n	80051da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3720      	adds	r7, #32
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b090      	sub	sp, #64	; 0x40
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	4613      	mov	r3, r2
 80051f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f2:	e050      	b.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d04c      	beq.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x30>
 8005202:	f7fc fd1f 	bl	8001c44 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800520e:	429a      	cmp	r2, r3
 8005210:	d241      	bcs.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005232:	637a      	str	r2, [r7, #52]	; 0x34
 8005234:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e5      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3314      	adds	r3, #20
 800524c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	613b      	str	r3, [r7, #16]
   return(result);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	63bb      	str	r3, [r7, #56]	; 0x38
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005266:	623a      	str	r2, [r7, #32]
 8005268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	69f9      	ldr	r1, [r7, #28]
 800526c:	6a3a      	ldr	r2, [r7, #32]
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	61bb      	str	r3, [r7, #24]
   return(result);
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e5      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e00f      	b.n	80052b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4013      	ands	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d09f      	beq.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3740      	adds	r7, #64	; 0x40
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052c4:	b0c0      	sub	sp, #256	; 0x100
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	68d9      	ldr	r1, [r3, #12]
 80052de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	ea40 0301 	orr.w	r3, r0, r1
 80052e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	431a      	orrs	r2, r3
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005318:	f021 010c 	bic.w	r1, r1, #12
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005326:	430b      	orrs	r3, r1
 8005328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	6999      	ldr	r1, [r3, #24]
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	ea40 0301 	orr.w	r3, r0, r1
 8005346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b8f      	ldr	r3, [pc, #572]	; (800558c <UART_SetConfig+0x2cc>)
 8005350:	429a      	cmp	r2, r3
 8005352:	d005      	beq.n	8005360 <UART_SetConfig+0xa0>
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b8d      	ldr	r3, [pc, #564]	; (8005590 <UART_SetConfig+0x2d0>)
 800535c:	429a      	cmp	r2, r3
 800535e:	d104      	bne.n	800536a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005360:	f7fe fc84 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 8005364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005368:	e003      	b.n	8005372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800536a:	f7fe fc6b 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 800536e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537c:	f040 810c 	bne.w	8005598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005384:	2200      	movs	r2, #0
 8005386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800538a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800538e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	1891      	adds	r1, r2, r2
 8005398:	65b9      	str	r1, [r7, #88]	; 0x58
 800539a:	415b      	adcs	r3, r3
 800539c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800539e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053a2:	4621      	mov	r1, r4
 80053a4:	eb12 0801 	adds.w	r8, r2, r1
 80053a8:	4629      	mov	r1, r5
 80053aa:	eb43 0901 	adc.w	r9, r3, r1
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053c2:	4690      	mov	r8, r2
 80053c4:	4699      	mov	r9, r3
 80053c6:	4623      	mov	r3, r4
 80053c8:	eb18 0303 	adds.w	r3, r8, r3
 80053cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053d0:	462b      	mov	r3, r5
 80053d2:	eb49 0303 	adc.w	r3, r9, r3
 80053d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053ee:	460b      	mov	r3, r1
 80053f0:	18db      	adds	r3, r3, r3
 80053f2:	653b      	str	r3, [r7, #80]	; 0x50
 80053f4:	4613      	mov	r3, r2
 80053f6:	eb42 0303 	adc.w	r3, r2, r3
 80053fa:	657b      	str	r3, [r7, #84]	; 0x54
 80053fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005404:	f7fb fbd0 	bl	8000ba8 <__aeabi_uldivmod>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4b61      	ldr	r3, [pc, #388]	; (8005594 <UART_SetConfig+0x2d4>)
 800540e:	fba3 2302 	umull	r2, r3, r3, r2
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	011c      	lsls	r4, r3, #4
 8005416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	1891      	adds	r1, r2, r2
 800542e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005430:	415b      	adcs	r3, r3
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005438:	4641      	mov	r1, r8
 800543a:	eb12 0a01 	adds.w	sl, r2, r1
 800543e:	4649      	mov	r1, r9
 8005440:	eb43 0b01 	adc.w	fp, r3, r1
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005458:	4692      	mov	sl, r2
 800545a:	469b      	mov	fp, r3
 800545c:	4643      	mov	r3, r8
 800545e:	eb1a 0303 	adds.w	r3, sl, r3
 8005462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005466:	464b      	mov	r3, r9
 8005468:	eb4b 0303 	adc.w	r3, fp, r3
 800546c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800547c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005484:	460b      	mov	r3, r1
 8005486:	18db      	adds	r3, r3, r3
 8005488:	643b      	str	r3, [r7, #64]	; 0x40
 800548a:	4613      	mov	r3, r2
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
 8005492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800549a:	f7fb fb85 	bl	8000ba8 <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	4b3b      	ldr	r3, [pc, #236]	; (8005594 <UART_SetConfig+0x2d4>)
 80054a6:	fba3 2301 	umull	r2, r3, r3, r1
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	2264      	movs	r2, #100	; 0x64
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	1acb      	subs	r3, r1, r3
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054ba:	4b36      	ldr	r3, [pc, #216]	; (8005594 <UART_SetConfig+0x2d4>)
 80054bc:	fba3 2302 	umull	r2, r3, r3, r2
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054c8:	441c      	add	r4, r3
 80054ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054dc:	4642      	mov	r2, r8
 80054de:	464b      	mov	r3, r9
 80054e0:	1891      	adds	r1, r2, r2
 80054e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80054e4:	415b      	adcs	r3, r3
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054ec:	4641      	mov	r1, r8
 80054ee:	1851      	adds	r1, r2, r1
 80054f0:	6339      	str	r1, [r7, #48]	; 0x30
 80054f2:	4649      	mov	r1, r9
 80054f4:	414b      	adcs	r3, r1
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005504:	4659      	mov	r1, fp
 8005506:	00cb      	lsls	r3, r1, #3
 8005508:	4651      	mov	r1, sl
 800550a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800550e:	4651      	mov	r1, sl
 8005510:	00ca      	lsls	r2, r1, #3
 8005512:	4610      	mov	r0, r2
 8005514:	4619      	mov	r1, r3
 8005516:	4603      	mov	r3, r0
 8005518:	4642      	mov	r2, r8
 800551a:	189b      	adds	r3, r3, r2
 800551c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005520:	464b      	mov	r3, r9
 8005522:	460a      	mov	r2, r1
 8005524:	eb42 0303 	adc.w	r3, r2, r3
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800553c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005540:	460b      	mov	r3, r1
 8005542:	18db      	adds	r3, r3, r3
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
 8005546:	4613      	mov	r3, r2
 8005548:	eb42 0303 	adc.w	r3, r2, r3
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800554e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005556:	f7fb fb27 	bl	8000ba8 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <UART_SetConfig+0x2d4>)
 8005560:	fba3 1302 	umull	r1, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	2164      	movs	r1, #100	; 0x64
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	3332      	adds	r3, #50	; 0x32
 8005572:	4a08      	ldr	r2, [pc, #32]	; (8005594 <UART_SetConfig+0x2d4>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	f003 0207 	and.w	r2, r3, #7
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4422      	add	r2, r4
 8005586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005588:	e105      	b.n	8005796 <UART_SetConfig+0x4d6>
 800558a:	bf00      	nop
 800558c:	40011000 	.word	0x40011000
 8005590:	40011400 	.word	0x40011400
 8005594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559c:	2200      	movs	r2, #0
 800559e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055aa:	4642      	mov	r2, r8
 80055ac:	464b      	mov	r3, r9
 80055ae:	1891      	adds	r1, r2, r2
 80055b0:	6239      	str	r1, [r7, #32]
 80055b2:	415b      	adcs	r3, r3
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ba:	4641      	mov	r1, r8
 80055bc:	1854      	adds	r4, r2, r1
 80055be:	4649      	mov	r1, r9
 80055c0:	eb43 0501 	adc.w	r5, r3, r1
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	00eb      	lsls	r3, r5, #3
 80055ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055d2:	00e2      	lsls	r2, r4, #3
 80055d4:	4614      	mov	r4, r2
 80055d6:	461d      	mov	r5, r3
 80055d8:	4643      	mov	r3, r8
 80055da:	18e3      	adds	r3, r4, r3
 80055dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055e0:	464b      	mov	r3, r9
 80055e2:	eb45 0303 	adc.w	r3, r5, r3
 80055e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005606:	4629      	mov	r1, r5
 8005608:	008b      	lsls	r3, r1, #2
 800560a:	4621      	mov	r1, r4
 800560c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005610:	4621      	mov	r1, r4
 8005612:	008a      	lsls	r2, r1, #2
 8005614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005618:	f7fb fac6 	bl	8000ba8 <__aeabi_uldivmod>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4b60      	ldr	r3, [pc, #384]	; (80057a4 <UART_SetConfig+0x4e4>)
 8005622:	fba3 2302 	umull	r2, r3, r3, r2
 8005626:	095b      	lsrs	r3, r3, #5
 8005628:	011c      	lsls	r4, r3, #4
 800562a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800562e:	2200      	movs	r2, #0
 8005630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800563c:	4642      	mov	r2, r8
 800563e:	464b      	mov	r3, r9
 8005640:	1891      	adds	r1, r2, r2
 8005642:	61b9      	str	r1, [r7, #24]
 8005644:	415b      	adcs	r3, r3
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800564c:	4641      	mov	r1, r8
 800564e:	1851      	adds	r1, r2, r1
 8005650:	6139      	str	r1, [r7, #16]
 8005652:	4649      	mov	r1, r9
 8005654:	414b      	adcs	r3, r1
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005664:	4659      	mov	r1, fp
 8005666:	00cb      	lsls	r3, r1, #3
 8005668:	4651      	mov	r1, sl
 800566a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800566e:	4651      	mov	r1, sl
 8005670:	00ca      	lsls	r2, r1, #3
 8005672:	4610      	mov	r0, r2
 8005674:	4619      	mov	r1, r3
 8005676:	4603      	mov	r3, r0
 8005678:	4642      	mov	r2, r8
 800567a:	189b      	adds	r3, r3, r2
 800567c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005680:	464b      	mov	r3, r9
 8005682:	460a      	mov	r2, r1
 8005684:	eb42 0303 	adc.w	r3, r2, r3
 8005688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	67bb      	str	r3, [r7, #120]	; 0x78
 8005696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056a4:	4649      	mov	r1, r9
 80056a6:	008b      	lsls	r3, r1, #2
 80056a8:	4641      	mov	r1, r8
 80056aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ae:	4641      	mov	r1, r8
 80056b0:	008a      	lsls	r2, r1, #2
 80056b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056b6:	f7fb fa77 	bl	8000ba8 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <UART_SetConfig+0x4e4>)
 80056c0:	fba3 1302 	umull	r1, r3, r3, r2
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	2164      	movs	r1, #100	; 0x64
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	3332      	adds	r3, #50	; 0x32
 80056d2:	4a34      	ldr	r2, [pc, #208]	; (80057a4 <UART_SetConfig+0x4e4>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056de:	441c      	add	r4, r3
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e4:	2200      	movs	r2, #0
 80056e6:	673b      	str	r3, [r7, #112]	; 0x70
 80056e8:	677a      	str	r2, [r7, #116]	; 0x74
 80056ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056ee:	4642      	mov	r2, r8
 80056f0:	464b      	mov	r3, r9
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	415b      	adcs	r3, r3
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056fe:	4641      	mov	r1, r8
 8005700:	1851      	adds	r1, r2, r1
 8005702:	6039      	str	r1, [r7, #0]
 8005704:	4649      	mov	r1, r9
 8005706:	414b      	adcs	r3, r1
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005716:	4659      	mov	r1, fp
 8005718:	00cb      	lsls	r3, r1, #3
 800571a:	4651      	mov	r1, sl
 800571c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005720:	4651      	mov	r1, sl
 8005722:	00ca      	lsls	r2, r1, #3
 8005724:	4610      	mov	r0, r2
 8005726:	4619      	mov	r1, r3
 8005728:	4603      	mov	r3, r0
 800572a:	4642      	mov	r2, r8
 800572c:	189b      	adds	r3, r3, r2
 800572e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005730:	464b      	mov	r3, r9
 8005732:	460a      	mov	r2, r1
 8005734:	eb42 0303 	adc.w	r3, r2, r3
 8005738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	663b      	str	r3, [r7, #96]	; 0x60
 8005744:	667a      	str	r2, [r7, #100]	; 0x64
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005752:	4649      	mov	r1, r9
 8005754:	008b      	lsls	r3, r1, #2
 8005756:	4641      	mov	r1, r8
 8005758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800575c:	4641      	mov	r1, r8
 800575e:	008a      	lsls	r2, r1, #2
 8005760:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005764:	f7fb fa20 	bl	8000ba8 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <UART_SetConfig+0x4e4>)
 800576e:	fba3 1302 	umull	r1, r3, r3, r2
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2164      	movs	r1, #100	; 0x64
 8005776:	fb01 f303 	mul.w	r3, r1, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	3332      	adds	r3, #50	; 0x32
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <UART_SetConfig+0x4e4>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4422      	add	r2, r4
 8005794:	609a      	str	r2, [r3, #8]
}
 8005796:	bf00      	nop
 8005798:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800579c:	46bd      	mov	sp, r7
 800579e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057a2:	bf00      	nop
 80057a4:	51eb851f 	.word	0x51eb851f

080057a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057b4:	f001 fb18 	bl	8006de8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057b8:	4b58      	ldr	r3, [pc, #352]	; (800591c <pvPortMalloc+0x174>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057c0:	f000 f910 	bl	80059e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057c4:	4b56      	ldr	r3, [pc, #344]	; (8005920 <pvPortMalloc+0x178>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 808e 	bne.w	80058ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01d      	beq.n	8005814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057d8:	2208      	movs	r2, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f023 0307 	bic.w	r3, r3, #7
 80057f0:	3308      	adds	r3, #8
 80057f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d069      	beq.n	80058ee <pvPortMalloc+0x146>
 800581a:	4b42      	ldr	r3, [pc, #264]	; (8005924 <pvPortMalloc+0x17c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	d864      	bhi.n	80058ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005824:	4b40      	ldr	r3, [pc, #256]	; (8005928 <pvPortMalloc+0x180>)
 8005826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005828:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <pvPortMalloc+0x180>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800582e:	e004      	b.n	800583a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	429a      	cmp	r2, r3
 8005842:	d903      	bls.n	800584c <pvPortMalloc+0xa4>
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f1      	bne.n	8005830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800584c:	4b33      	ldr	r3, [pc, #204]	; (800591c <pvPortMalloc+0x174>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	429a      	cmp	r2, r3
 8005854:	d04b      	beq.n	80058ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2208      	movs	r2, #8
 800585c:	4413      	add	r3, r2
 800585e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	1ad2      	subs	r2, r2, r3
 8005870:	2308      	movs	r3, #8
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	429a      	cmp	r2, r3
 8005876:	d91f      	bls.n	80058b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <pvPortMalloc+0xf8>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	613b      	str	r3, [r7, #16]
}
 800589c:	bf00      	nop
 800589e:	e7fe      	b.n	800589e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad2      	subs	r2, r2, r3
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058b2:	69b8      	ldr	r0, [r7, #24]
 80058b4:	f000 f8f8 	bl	8005aa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <pvPortMalloc+0x17c>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a18      	ldr	r2, [pc, #96]	; (8005924 <pvPortMalloc+0x17c>)
 80058c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058c6:	4b17      	ldr	r3, [pc, #92]	; (8005924 <pvPortMalloc+0x17c>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b18      	ldr	r3, [pc, #96]	; (800592c <pvPortMalloc+0x184>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d203      	bcs.n	80058da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <pvPortMalloc+0x17c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a15      	ldr	r2, [pc, #84]	; (800592c <pvPortMalloc+0x184>)
 80058d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <pvPortMalloc+0x178>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058ee:	f001 fa89 	bl	8006e04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <pvPortMalloc+0x16a>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <pvPortMalloc+0x168>
	return pvReturn;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20014004 	.word	0x20014004
 8005920:	20014010 	.word	0x20014010
 8005924:	20014008 	.word	0x20014008
 8005928:	20013ffc 	.word	0x20013ffc
 800592c:	2001400c 	.word	0x2001400c

08005930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d048      	beq.n	80059d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005942:	2308      	movs	r3, #8
 8005944:	425b      	negs	r3, r3
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	4b21      	ldr	r3, [pc, #132]	; (80059dc <vPortFree+0xac>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4013      	ands	r3, r2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <vPortFree+0x44>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	60fb      	str	r3, [r7, #12]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <vPortFree+0x62>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60bb      	str	r3, [r7, #8]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <vPortFree+0xac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d019      	beq.n	80059d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d115      	bne.n	80059d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <vPortFree+0xac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059b8:	f001 fa16 	bl	8006de8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <vPortFree+0xb0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4413      	add	r3, r2
 80059c6:	4a06      	ldr	r2, [pc, #24]	; (80059e0 <vPortFree+0xb0>)
 80059c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f000 f86c 	bl	8005aa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059d0:	f001 fa18 	bl	8006e04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059d4:	bf00      	nop
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20014010 	.word	0x20014010
 80059e0:	20014008 	.word	0x20014008

080059e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ea:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059f0:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <prvHeapInit+0xac>)
 80059f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3307      	adds	r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <prvHeapInit+0xac>)
 8005a14:	4413      	add	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <prvHeapInit+0xb0>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <prvHeapInit+0xb0>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a30:	2208      	movs	r2, #8
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <prvHeapInit+0xb4>)
 8005a44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <prvHeapInit+0xb4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <prvHeapInit+0xb4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <prvHeapInit+0xb4>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <prvHeapInit+0xb8>)
 8005a72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <prvHeapInit+0xbc>)
 8005a7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a7c:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <prvHeapInit+0xc0>)
 8005a7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a82:	601a      	str	r2, [r3, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	200013fc 	.word	0x200013fc
 8005a94:	20013ffc 	.word	0x20013ffc
 8005a98:	20014004 	.word	0x20014004
 8005a9c:	2001400c 	.word	0x2001400c
 8005aa0:	20014008 	.word	0x20014008
 8005aa4:	20014010 	.word	0x20014010

08005aa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <prvInsertBlockIntoFreeList+0xac>)
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <prvInsertBlockIntoFreeList+0x14>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d8f7      	bhi.n	8005ab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d108      	bne.n	8005aea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	441a      	add	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d118      	bne.n	8005b30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <prvInsertBlockIntoFreeList+0xb0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d00d      	beq.n	8005b26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	e008      	b.n	8005b38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvInsertBlockIntoFreeList+0xb0>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e003      	b.n	8005b38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d002      	beq.n	8005b46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20013ffc 	.word	0x20013ffc
 8005b58:	20014004 	.word	0x20014004

08005b5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295
 8005b74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f103 0208 	add.w	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f103 0208 	add.w	r2, r3, #8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b085      	sub	sp, #20
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d103      	bne.n	8005c1e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e00c      	b.n	8005c38 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3308      	adds	r3, #8
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e002      	b.n	8005c2c <vListInsert+0x2e>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d2f6      	bcs.n	8005c26 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6892      	ldr	r2, [r2, #8]
 8005c86:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6852      	ldr	r2, [r2, #4]
 8005c90:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d103      	bne.n	8005ca4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	1e5a      	subs	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <xQueueGenericReset+0x2a>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60bb      	str	r3, [r7, #8]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005cee:	f002 faa9 	bl	8008244 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	441a      	add	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	68f9      	ldr	r1, [r7, #12]
 8005d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d24:	fb01 f303 	mul.w	r3, r1, r3
 8005d28:	441a      	add	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	22ff      	movs	r2, #255	; 0xff
 8005d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d114      	bne.n	8005d6e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01a      	beq.n	8005d82 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3310      	adds	r3, #16
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 fa67 	bl	8007224 <xTaskRemoveFromEventList>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d012      	beq.n	8005d82 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <xQueueGenericReset+0xcc>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	e009      	b.n	8005d82 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3310      	adds	r3, #16
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fef2 	bl	8005b5c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff feed 	bl	8005b5c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005d82:	f002 fa8f 	bl	80082a4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005d86:	2301      	movs	r3, #1
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	e000ed04 	.word	0xe000ed04

08005d94 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08c      	sub	sp, #48	; 0x30
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xQueueGenericCreate+0x2a>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	61bb      	str	r3, [r7, #24]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d006      	beq.n	8005ddc <xQueueGenericCreate+0x48>
 8005dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d101      	bne.n	8005de0 <xQueueGenericCreate+0x4c>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <xQueueGenericCreate+0x4e>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <xQueueGenericCreate+0x68>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	617b      	str	r3, [r7, #20]
}
 8005df8:	bf00      	nop
 8005dfa:	e7fe      	b.n	8005dfa <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005e02:	d90a      	bls.n	8005e1a <xQueueGenericCreate+0x86>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	613b      	str	r3, [r7, #16]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	3350      	adds	r3, #80	; 0x50
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fcc2 	bl	80057a8 <pvPortMalloc>
 8005e24:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3350      	adds	r3, #80	; 0x50
 8005e34:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e36:	79fa      	ldrb	r2, [r7, #7]
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f805 	bl	8005e52 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005e48:	6a3b      	ldr	r3, [r7, #32]
    }
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	; 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
 8005e5e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d103      	bne.n	8005e6e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e002      	b.n	8005e74 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e80:	2101      	movs	r1, #1
 8005e82:	69b8      	ldr	r0, [r7, #24]
 8005e84:	f7ff ff1e 	bl	8005cc4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f81c 	bl	8005efc <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6939      	ldr	r1, [r7, #16]
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	f7ff ff55 	bl	8005d94 <xQueueGenericCreate>
 8005eea:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ffd3 	bl	8005e98 <prvInitialiseMutex>

        return xNewQueue;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
    }
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	; 0x38
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10a      	bne.n	8005f2e <xQueueGenericSend+0x32>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <xQueueGenericSend+0x40>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <xQueueGenericSend+0x44>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <xQueueGenericSend+0x46>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xQueueGenericSend+0x60>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d103      	bne.n	8005f6a <xQueueGenericSend+0x6e>
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <xQueueGenericSend+0x72>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <xQueueGenericSend+0x74>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	623b      	str	r3, [r7, #32]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f8a:	f001 fae7 	bl	800755c <xTaskGetSchedulerState>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <xQueueGenericSend+0x9e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <xQueueGenericSend+0xa2>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <xQueueGenericSend+0xa4>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10a      	bne.n	8005fba <xQueueGenericSend+0xbe>
	__asm volatile
 8005fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa8:	f383 8811 	msr	BASEPRI, r3
 8005fac:	f3bf 8f6f 	isb	sy
 8005fb0:	f3bf 8f4f 	dsb	sy
 8005fb4:	61fb      	str	r3, [r7, #28]
}
 8005fb6:	bf00      	nop
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005fba:	f002 f943 	bl	8008244 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d302      	bcc.n	8005fd0 <xQueueGenericSend+0xd4>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d129      	bne.n	8006024 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fd6:	f000 fbd9 	bl	800678c <prvCopyDataToQueue>
 8005fda:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d010      	beq.n	8006006 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f91b 	bl	8007224 <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d013      	beq.n	800601c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005ff4:	4b3f      	ldr	r3, [pc, #252]	; (80060f4 <xQueueGenericSend+0x1f8>)
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	e00a      	b.n	800601c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d007      	beq.n	800601c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800600c:	4b39      	ldr	r3, [pc, #228]	; (80060f4 <xQueueGenericSend+0x1f8>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800601c:	f002 f942 	bl	80082a4 <vPortExitCritical>
                return pdPASS;
 8006020:	2301      	movs	r3, #1
 8006022:	e063      	b.n	80060ec <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d103      	bne.n	8006032 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800602a:	f002 f93b 	bl	80082a4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800602e:	2300      	movs	r3, #0
 8006030:	e05c      	b.n	80060ec <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006034:	2b00      	cmp	r3, #0
 8006036:	d106      	bne.n	8006046 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4618      	mov	r0, r3
 800603e:	f001 f953 	bl	80072e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006042:	2301      	movs	r3, #1
 8006044:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006046:	f002 f92d 	bl	80082a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800604a:	f000 fecd 	bl	8006de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800604e:	f002 f8f9 	bl	8008244 <vPortEnterCritical>
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006058:	b25b      	sxtb	r3, r3
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d103      	bne.n	8006068 <xQueueGenericSend+0x16c>
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800606e:	b25b      	sxtb	r3, r3
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d103      	bne.n	800607e <xQueueGenericSend+0x182>
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607e:	f002 f911 	bl	80082a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006082:	1d3a      	adds	r2, r7, #4
 8006084:	f107 0314 	add.w	r3, r7, #20
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f942 	bl	8007314 <xTaskCheckForTimeOut>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d124      	bne.n	80060e0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006098:	f000 fc70 	bl	800697c <prvIsQueueFull>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d018      	beq.n	80060d4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	3310      	adds	r3, #16
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f86a 	bl	8007184 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80060b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b2:	f000 fbfb 	bl	80068ac <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80060b6:	f000 fea5 	bl	8006e04 <xTaskResumeAll>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f47f af7c 	bne.w	8005fba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <xQueueGenericSend+0x1f8>)
 80060c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	e772      	b.n	8005fba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80060d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d6:	f000 fbe9 	bl	80068ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80060da:	f000 fe93 	bl	8006e04 <xTaskResumeAll>
 80060de:	e76c      	b.n	8005fba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80060e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060e2:	f000 fbe3 	bl	80068ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80060e6:	f000 fe8d 	bl	8006e04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80060ea:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3738      	adds	r7, #56	; 0x38
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	e000ed04 	.word	0xe000ed04

080060f8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b090      	sub	sp, #64	; 0x40
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10a      	bne.n	8006126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <xQueueGenericSendFromISR+0x3c>
 800612c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <xQueueGenericSendFromISR+0x40>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <xQueueGenericSendFromISR+0x42>
 8006138:	2300      	movs	r3, #0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006150:	bf00      	nop
 8006152:	e7fe      	b.n	8006152 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d103      	bne.n	8006162 <xQueueGenericSendFromISR+0x6a>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <xQueueGenericSendFromISR+0x6e>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <xQueueGenericSendFromISR+0x70>
 8006166:	2300      	movs	r3, #0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	623b      	str	r3, [r7, #32]
}
 800617e:	bf00      	nop
 8006180:	e7fe      	b.n	8006180 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006182:	f002 f941 	bl	8008408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006186:	f3ef 8211 	mrs	r2, BASEPRI
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fa      	str	r2, [r7, #28]
 800619c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800619e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <xQueueGenericSendFromISR+0xbc>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d13e      	bne.n	8006232 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061ca:	f000 fadf 	bl	800678c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80061ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d112      	bne.n	80061fe <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d025      	beq.n	800622c <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	3324      	adds	r3, #36	; 0x24
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f81d 	bl	8007224 <xTaskRemoveFromEventList>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01d      	beq.n	800622c <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d01a      	beq.n	800622c <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	e016      	b.n	800622c <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80061fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006202:	2b7f      	cmp	r3, #127	; 0x7f
 8006204:	d10a      	bne.n	800621c <xQueueGenericSendFromISR+0x124>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	617b      	str	r3, [r7, #20]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800621c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006220:	3301      	adds	r3, #1
 8006222:	b2db      	uxtb	r3, r3
 8006224:	b25a      	sxtb	r2, r3
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800622c:	2301      	movs	r3, #1
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006230:	e001      	b.n	8006236 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006232:	2300      	movs	r3, #0
 8006234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006240:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006244:	4618      	mov	r0, r3
 8006246:	3740      	adds	r7, #64	; 0x40
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08e      	sub	sp, #56	; 0x38
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	623b      	str	r3, [r7, #32]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <xQueueGiveFromISR+0x48>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	61fb      	str	r3, [r7, #28]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d103      	bne.n	80062a4 <xQueueGiveFromISR+0x58>
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <xQueueGiveFromISR+0x5c>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <xQueueGiveFromISR+0x5e>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	61bb      	str	r3, [r7, #24]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c4:	f002 f8a0 	bl	8008408 <vPortValidateInterruptPriority>
	__asm volatile
 80062c8:	f3ef 8211 	mrs	r2, BASEPRI
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	617a      	str	r2, [r7, #20]
 80062de:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80062e0:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d23a      	bcs.n	800636a <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006306:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d112      	bne.n	8006336 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	2b00      	cmp	r3, #0
 8006316:	d025      	beq.n	8006364 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	3324      	adds	r3, #36	; 0x24
 800631c:	4618      	mov	r0, r3
 800631e:	f000 ff81 	bl	8007224 <xTaskRemoveFromEventList>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01d      	beq.n	8006364 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d01a      	beq.n	8006364 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	e016      	b.n	8006364 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006336:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800633a:	2b7f      	cmp	r3, #127	; 0x7f
 800633c:	d10a      	bne.n	8006354 <xQueueGiveFromISR+0x108>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60fb      	str	r3, [r7, #12]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006358:	3301      	adds	r3, #1
 800635a:	b2db      	uxtb	r3, r3
 800635c:	b25a      	sxtb	r2, r3
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8006364:	2301      	movs	r3, #1
 8006366:	637b      	str	r3, [r7, #52]	; 0x34
 8006368:	e001      	b.n	800636e <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800636a:	2300      	movs	r3, #0
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f383 8811 	msr	BASEPRI, r3
}
 8006378:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800637c:	4618      	mov	r0, r3
 800637e:	3738      	adds	r7, #56	; 0x38
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08c      	sub	sp, #48	; 0x30
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xQueueReceive+0x30>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	623b      	str	r3, [r7, #32]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <xQueueReceive+0x3e>
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <xQueueReceive+0x42>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueReceive+0x44>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xQueueReceive+0x5e>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	61fb      	str	r3, [r7, #28]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e2:	f001 f8bb 	bl	800755c <xTaskGetSchedulerState>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d102      	bne.n	80063f2 <xQueueReceive+0x6e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <xQueueReceive+0x72>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <xQueueReceive+0x74>
 80063f6:	2300      	movs	r3, #0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueReceive+0x8e>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	61bb      	str	r3, [r7, #24]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006412:	f001 ff17 	bl	8008244 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01f      	beq.n	8006462 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006426:	f000 fa1b 	bl	8006860 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1e5a      	subs	r2, r3, #1
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00f      	beq.n	800645a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	3310      	adds	r3, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fef0 	bl	8007224 <xTaskRemoveFromEventList>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800644a:	4b3d      	ldr	r3, [pc, #244]	; (8006540 <xQueueReceive+0x1bc>)
 800644c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800645a:	f001 ff23 	bl	80082a4 <vPortExitCritical>
                return pdPASS;
 800645e:	2301      	movs	r3, #1
 8006460:	e069      	b.n	8006536 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006468:	f001 ff1c 	bl	80082a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800646c:	2300      	movs	r3, #0
 800646e:	e062      	b.n	8006536 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006476:	f107 0310 	add.w	r3, r7, #16
 800647a:	4618      	mov	r0, r3
 800647c:	f000 ff34 	bl	80072e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006484:	f001 ff0e 	bl	80082a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006488:	f000 fcae 	bl	8006de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800648c:	f001 feda 	bl	8008244 <vPortEnterCritical>
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006496:	b25b      	sxtb	r3, r3
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d103      	bne.n	80064a6 <xQueueReceive+0x122>
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ac:	b25b      	sxtb	r3, r3
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d103      	bne.n	80064bc <xQueueReceive+0x138>
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064bc:	f001 fef2 	bl	80082a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c0:	1d3a      	adds	r2, r7, #4
 80064c2:	f107 0310 	add.w	r3, r7, #16
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 ff23 	bl	8007314 <xTaskCheckForTimeOut>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d123      	bne.n	800651c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d6:	f000 fa3b 	bl	8006950 <prvIsQueueEmpty>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d017      	beq.n	8006510 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fe4b 	bl	8007184 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80064ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f0:	f000 f9dc 	bl	80068ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80064f4:	f000 fc86 	bl	8006e04 <xTaskResumeAll>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d189      	bne.n	8006412 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <xQueueReceive+0x1bc>)
 8006500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	e780      	b.n	8006412 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006512:	f000 f9cb 	bl	80068ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006516:	f000 fc75 	bl	8006e04 <xTaskResumeAll>
 800651a:	e77a      	b.n	8006412 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800651c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651e:	f000 f9c5 	bl	80068ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006522:	f000 fc6f 	bl	8006e04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006528:	f000 fa12 	bl	8006950 <prvIsQueueEmpty>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	f43f af6f 	beq.w	8006412 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006534:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006536:	4618      	mov	r0, r3
 8006538:	3730      	adds	r7, #48	; 0x30
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08e      	sub	sp, #56	; 0x38
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800654e:	2300      	movs	r3, #0
 8006550:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006556:	2300      	movs	r3, #0
 8006558:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	623b      	str	r3, [r7, #32]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	61fb      	str	r3, [r7, #28]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006594:	f000 ffe2 	bl	800755c <xTaskGetSchedulerState>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <xQueueSemaphoreTake+0x60>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <xQueueSemaphoreTake+0x64>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <xQueueSemaphoreTake+0x66>
 80065a8:	2300      	movs	r3, #0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	61bb      	str	r3, [r7, #24]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80065c4:	f001 fe3e 	bl	8008244 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d024      	beq.n	800661e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	1e5a      	subs	r2, r3, #1
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d104      	bne.n	80065ee <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80065e4:	f001 f978 	bl	80078d8 <pvTaskIncrementMutexHeldCount>
 80065e8:	4602      	mov	r2, r0
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	3310      	adds	r3, #16
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fe12 	bl	8007224 <xTaskRemoveFromEventList>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006606:	4b54      	ldr	r3, [pc, #336]	; (8006758 <xQueueSemaphoreTake+0x214>)
 8006608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006616:	f001 fe45 	bl	80082a4 <vPortExitCritical>
                return pdPASS;
 800661a:	2301      	movs	r3, #1
 800661c:	e097      	b.n	800674e <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d111      	bne.n	8006648 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	617b      	str	r3, [r7, #20]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006640:	f001 fe30 	bl	80082a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006644:	2300      	movs	r3, #0
 8006646:	e082      	b.n	800674e <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800664e:	f107 030c 	add.w	r3, r7, #12
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fe48 	bl	80072e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006658:	2301      	movs	r3, #1
 800665a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800665c:	f001 fe22 	bl	80082a4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006660:	f000 fbc2 	bl	8006de8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006664:	f001 fdee 	bl	8008244 <vPortEnterCritical>
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800666e:	b25b      	sxtb	r3, r3
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d103      	bne.n	800667e <xQueueSemaphoreTake+0x13a>
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006684:	b25b      	sxtb	r3, r3
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d103      	bne.n	8006694 <xQueueSemaphoreTake+0x150>
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006694:	f001 fe06 	bl	80082a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006698:	463a      	mov	r2, r7
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fe37 	bl	8007314 <xTaskCheckForTimeOut>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d132      	bne.n	8006712 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066ae:	f000 f94f 	bl	8006950 <prvIsQueueEmpty>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d026      	beq.n	8006706 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d109      	bne.n	80066d4 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80066c0:	f001 fdc0 	bl	8008244 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 ff65 	bl	8007598 <xTaskPriorityInherit>
 80066ce:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80066d0:	f001 fde8 	bl	80082a4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	3324      	adds	r3, #36	; 0x24
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	4611      	mov	r1, r2
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fd51 	bl	8007184 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80066e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066e4:	f000 f8e2 	bl	80068ac <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80066e8:	f000 fb8c 	bl	8006e04 <xTaskResumeAll>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f47f af68 	bne.w	80065c4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <xQueueSemaphoreTake+0x214>)
 80066f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	e75e      	b.n	80065c4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006708:	f000 f8d0 	bl	80068ac <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800670c:	f000 fb7a 	bl	8006e04 <xTaskResumeAll>
 8006710:	e758      	b.n	80065c4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006714:	f000 f8ca 	bl	80068ac <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006718:	f000 fb74 	bl	8006e04 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800671c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800671e:	f000 f917 	bl	8006950 <prvIsQueueEmpty>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	f43f af4d 	beq.w	80065c4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00d      	beq.n	800674c <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8006730:	f001 fd88 	bl	8008244 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006736:	f000 f811 	bl	800675c <prvGetDisinheritPriorityAfterTimeout>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006742:	4618      	mov	r0, r3
 8006744:	f001 f82e 	bl	80077a4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006748:	f001 fdac 	bl	80082a4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800674c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800674e:	4618      	mov	r0, r3
 8006750:	3738      	adds	r7, #56	; 0x38
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1c3 030f 	rsb	r3, r3, #15
 8006776:	60fb      	str	r3, [r7, #12]
 8006778:	e001      	b.n	800677e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800677e:	68fb      	ldr	r3, [r7, #12]
    }
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d14d      	bne.n	800684e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 ff6e 	bl	8007698 <xTaskPriorityDisinherit>
 80067bc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
 80067c4:	e043      	b.n	800684e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d119      	bne.n	8006800 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6858      	ldr	r0, [r3, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	461a      	mov	r2, r3
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	f001 fe80 	bl	80084dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d32b      	bcc.n	800684e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	605a      	str	r2, [r3, #4]
 80067fe:	e026      	b.n	800684e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68d8      	ldr	r0, [r3, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	461a      	mov	r2, r3
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	f001 fe66 	bl	80084dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	425b      	negs	r3, r3
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d207      	bcs.n	800683c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	425b      	negs	r3, r3
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d105      	bne.n	800684e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3b01      	subs	r3, #1
 800684c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006856:	697b      	ldr	r3, [r7, #20]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d018      	beq.n	80068a4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	441a      	add	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d303      	bcc.n	8006894 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68d9      	ldr	r1, [r3, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	461a      	mov	r2, r3
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f001 fe1c 	bl	80084dc <memcpy>
    }
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80068b4:	f001 fcc6 	bl	8008244 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068be:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c0:	e011      	b.n	80068e6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d012      	beq.n	80068f0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fca8 	bl	8007224 <xTaskRemoveFromEventList>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80068da:	f000 fd7d 	bl	80073d8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80068e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dce9      	bgt.n	80068c2 <prvUnlockQueue+0x16>
 80068ee:	e000      	b.n	80068f2 <prvUnlockQueue+0x46>
                        break;
 80068f0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	22ff      	movs	r2, #255	; 0xff
 80068f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80068fa:	f001 fcd3 	bl	80082a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80068fe:	f001 fca1 	bl	8008244 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006908:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800690a:	e011      	b.n	8006930 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d012      	beq.n	800693a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3310      	adds	r3, #16
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fc83 	bl	8007224 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006924:	f000 fd58 	bl	80073d8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	3b01      	subs	r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dce9      	bgt.n	800690c <prvUnlockQueue+0x60>
 8006938:	e000      	b.n	800693c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800693a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	22ff      	movs	r2, #255	; 0xff
 8006940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006944:	f001 fcae 	bl	80082a4 <vPortExitCritical>
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006958:	f001 fc74 	bl	8008244 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e001      	b.n	800696e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800696e:	f001 fc99 	bl	80082a4 <vPortExitCritical>

    return xReturn;
 8006972:	68fb      	ldr	r3, [r7, #12]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006984:	f001 fc5e 	bl	8008244 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	429a      	cmp	r2, r3
 8006992:	d102      	bne.n	800699a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e001      	b.n	800699e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800699e:	f001 fc81 	bl	80082a4 <vPortExitCritical>

    return xReturn;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e014      	b.n	80069e6 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069bc:	4a0f      	ldr	r2, [pc, #60]	; (80069fc <vQueueAddToRegistry+0x50>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10b      	bne.n	80069e0 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069c8:	490c      	ldr	r1, [pc, #48]	; (80069fc <vQueueAddToRegistry+0x50>)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80069d2:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <vQueueAddToRegistry+0x50>)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4413      	add	r3, r2
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80069de:	e006      	b.n	80069ee <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b07      	cmp	r3, #7
 80069ea:	d9e7      	bls.n	80069bc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80069ec:	bf00      	nop
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20014014 	.word	0x20014014

08006a00 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006a10:	f001 fc18 	bl	8008244 <vPortEnterCritical>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d103      	bne.n	8006a2a <vQueueWaitForMessageRestricted+0x2a>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a30:	b25b      	sxtb	r3, r3
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	d103      	bne.n	8006a40 <vQueueWaitForMessageRestricted+0x40>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a40:	f001 fc30 	bl	80082a4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3324      	adds	r3, #36	; 0x24
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fbb9 	bl	80071cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f7ff ff26 	bl	80068ac <prvUnlockQueue>
    }
 8006a60:	bf00      	nop
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08c      	sub	sp, #48	; 0x30
 8006a6c:	af04      	add	r7, sp, #16
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a78:	88fb      	ldrh	r3, [r7, #6]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7fe fe93 	bl	80057a8 <pvPortMalloc>
 8006a82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00e      	beq.n	8006aa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a8a:	2058      	movs	r0, #88	; 0x58
 8006a8c:	f7fe fe8c 	bl	80057a8 <pvPortMalloc>
 8006a90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a9e:	e005      	b.n	8006aac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006aa0:	6978      	ldr	r0, [r7, #20]
 8006aa2:	f7fe ff45 	bl	8005930 <vPortFree>
 8006aa6:	e001      	b.n	8006aac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d013      	beq.n	8006ada <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	9303      	str	r3, [sp, #12]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	9302      	str	r3, [sp, #8]
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	9301      	str	r3, [sp, #4]
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f80e 	bl	8006aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ace:	69f8      	ldr	r0, [r7, #28]
 8006ad0:	f000 f89a 	bl	8006c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e002      	b.n	8006ae0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ada:	f04f 33ff 	mov.w	r3, #4294967295
 8006ade:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ae0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b088      	sub	sp, #32
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
 8006af6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	461a      	mov	r2, r3
 8006b02:	21a5      	movs	r1, #165	; 0xa5
 8006b04:	f001 fcf8 	bl	80084f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b12:	3b01      	subs	r3, #1
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f023 0307 	bic.w	r3, r3, #7
 8006b20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	617b      	str	r3, [r7, #20]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01f      	beq.n	8006b88 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	e012      	b.n	8006b74 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	7819      	ldrb	r1, [r3, #0]
 8006b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3334      	adds	r3, #52	; 0x34
 8006b5e:	460a      	mov	r2, r1
 8006b60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d006      	beq.n	8006b7c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	3301      	adds	r3, #1
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	2b09      	cmp	r3, #9
 8006b78:	d9e9      	bls.n	8006b4e <prvInitialiseNewTask+0x64>
 8006b7a:	e000      	b.n	8006b7e <prvInitialiseNewTask+0x94>
			{
				break;
 8006b7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b86:	e003      	b.n	8006b90 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b0e      	cmp	r3, #14
 8006b94:	d901      	bls.n	8006b9a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b96:	230e      	movs	r3, #14
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba4:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	2200      	movs	r2, #0
 8006baa:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	3304      	adds	r3, #4
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fff3 	bl	8005b9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	3318      	adds	r3, #24
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe ffee 	bl	8005b9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	f1c3 020f 	rsb	r2, r3, #15
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2200      	movs	r2, #0
 8006bda:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	69b8      	ldr	r0, [r7, #24]
 8006bea:	f001 fa01 	bl	8007ff0 <pxPortInitialiseStack>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c00:	bf00      	nop
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c10:	f001 fb18 	bl	8008244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c14:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <prvAddNewTaskToReadyList+0xc0>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <prvAddNewTaskToReadyList+0xc0>)
 8006c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c1e:	4b2b      	ldr	r3, [pc, #172]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c26:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c2c:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <prvAddNewTaskToReadyList+0xc0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d110      	bne.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c34:	f000 fbf4 	bl	8007420 <prvInitialiseTaskLists>
 8006c38:	e00d      	b.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c3a:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c42:	4b22      	ldr	r3, [pc, #136]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d802      	bhi.n	8006c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c50:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c56:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <prvAddNewTaskToReadyList+0xcc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <prvAddNewTaskToReadyList+0xcc>)
 8006c5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c60:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <prvAddNewTaskToReadyList+0xcc>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	409a      	lsls	r2, r3
 8006c70:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <prvAddNewTaskToReadyList+0xd0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <prvAddNewTaskToReadyList+0xd0>)
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7e:	4613      	mov	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <prvAddNewTaskToReadyList+0xd4>)
 8006c88:	441a      	add	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4610      	mov	r0, r2
 8006c92:	f7fe ff90 	bl	8005bb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c96:	f001 fb05 	bl	80082a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <prvAddNewTaskToReadyList+0xc8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00e      	beq.n	8006cc0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca2:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddNewTaskToReadyList+0xc4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d207      	bcs.n	8006cc0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <prvAddNewTaskToReadyList+0xd8>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	200141f4 	.word	0x200141f4
 8006ccc:	20014054 	.word	0x20014054
 8006cd0:	20014200 	.word	0x20014200
 8006cd4:	20014210 	.word	0x20014210
 8006cd8:	200141fc 	.word	0x200141fc
 8006cdc:	20014058 	.word	0x20014058
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cf6:	4b13      	ldr	r3, [pc, #76]	; (8006d44 <vTaskDelay+0x60>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <vTaskDelay+0x30>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	60bb      	str	r3, [r7, #8]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d14:	f000 f868 	bl	8006de8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fdf0 	bl	8007900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d20:	f000 f870 	bl	8006e04 <xTaskResumeAll>
 8006d24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d107      	bne.n	8006d3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <vTaskDelay+0x64>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	2001421c 	.word	0x2001421c
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <vTaskStartScheduler+0x84>)
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2282      	movs	r2, #130	; 0x82
 8006d5e:	491d      	ldr	r1, [pc, #116]	; (8006dd4 <vTaskStartScheduler+0x88>)
 8006d60:	481d      	ldr	r0, [pc, #116]	; (8006dd8 <vTaskStartScheduler+0x8c>)
 8006d62:	f7ff fe81 	bl	8006a68 <xTaskCreate>
 8006d66:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d102      	bne.n	8006d74 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8006d6e:	f000 fe2d 	bl	80079cc <xTimerCreateTimerTask>
 8006d72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d116      	bne.n	8006da8 <vTaskStartScheduler+0x5c>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60bb      	str	r3, [r7, #8]
}
 8006d8c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d8e:	4b13      	ldr	r3, [pc, #76]	; (8006ddc <vTaskStartScheduler+0x90>)
 8006d90:	f04f 32ff 	mov.w	r2, #4294967295
 8006d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <vTaskStartScheduler+0x94>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <vTaskStartScheduler+0x98>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006da2:	f001 f9ad 	bl	8008100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006da6:	e00e      	b.n	8006dc6 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dae:	d10a      	bne.n	8006dc6 <vTaskStartScheduler+0x7a>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	607b      	str	r3, [r7, #4]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <vTaskStartScheduler+0x78>
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20014218 	.word	0x20014218
 8006dd4:	0800b0e8 	.word	0x0800b0e8
 8006dd8:	080073f1 	.word	0x080073f1
 8006ddc:	20014214 	.word	0x20014214
 8006de0:	20014200 	.word	0x20014200
 8006de4:	200141f8 	.word	0x200141f8

08006de8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <vTaskSuspendAll+0x18>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3301      	adds	r3, #1
 8006df2:	4a03      	ldr	r2, [pc, #12]	; (8006e00 <vTaskSuspendAll+0x18>)
 8006df4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006df6:	bf00      	nop
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	2001421c 	.word	0x2001421c

08006e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e12:	4b41      	ldr	r3, [pc, #260]	; (8006f18 <xTaskResumeAll+0x114>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	603b      	str	r3, [r7, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e30:	f001 fa08 	bl	8008244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e34:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <xTaskResumeAll+0x114>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	4a37      	ldr	r2, [pc, #220]	; (8006f18 <xTaskResumeAll+0x114>)
 8006e3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e3e:	4b36      	ldr	r3, [pc, #216]	; (8006f18 <xTaskResumeAll+0x114>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d161      	bne.n	8006f0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e46:	4b35      	ldr	r3, [pc, #212]	; (8006f1c <xTaskResumeAll+0x118>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d05d      	beq.n	8006f0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e4e:	e02e      	b.n	8006eae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e50:	4b33      	ldr	r3, [pc, #204]	; (8006f20 <xTaskResumeAll+0x11c>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3318      	adds	r3, #24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe ff07 	bl	8005c70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe ff02 	bl	8005c70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	2201      	movs	r2, #1
 8006e72:	409a      	lsls	r2, r3
 8006e74:	4b2b      	ldr	r3, [pc, #172]	; (8006f24 <xTaskResumeAll+0x120>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <xTaskResumeAll+0x120>)
 8006e7c:	6013      	str	r3, [r2, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <xTaskResumeAll+0x124>)
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3304      	adds	r3, #4
 8006e92:	4619      	mov	r1, r3
 8006e94:	4610      	mov	r0, r2
 8006e96:	f7fe fe8e 	bl	8005bb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <xTaskResumeAll+0x128>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d302      	bcc.n	8006eae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ea8:	4b21      	ldr	r3, [pc, #132]	; (8006f30 <xTaskResumeAll+0x12c>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eae:	4b1c      	ldr	r3, [pc, #112]	; (8006f20 <xTaskResumeAll+0x11c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1cc      	bne.n	8006e50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ebc:	f000 fb2e 	bl	800751c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006ec0:	4b1c      	ldr	r3, [pc, #112]	; (8006f34 <xTaskResumeAll+0x130>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d010      	beq.n	8006eee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ecc:	f000 f846 	bl	8006f5c <xTaskIncrementTick>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006ed6:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <xTaskResumeAll+0x12c>)
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f1      	bne.n	8006ecc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006ee8:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <xTaskResumeAll+0x130>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <xTaskResumeAll+0x12c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <xTaskResumeAll+0x134>)
 8006efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f0a:	f001 f9cb 	bl	80082a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	2001421c 	.word	0x2001421c
 8006f1c:	200141f4 	.word	0x200141f4
 8006f20:	200141b4 	.word	0x200141b4
 8006f24:	200141fc 	.word	0x200141fc
 8006f28:	20014058 	.word	0x20014058
 8006f2c:	20014054 	.word	0x20014054
 8006f30:	20014208 	.word	0x20014208
 8006f34:	20014204 	.word	0x20014204
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <xTaskGetTickCount+0x1c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f48:	687b      	ldr	r3, [r7, #4]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	200141f8 	.word	0x200141f8

08006f5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f66:	4b4e      	ldr	r3, [pc, #312]	; (80070a0 <xTaskIncrementTick+0x144>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8088 	bne.w	8007080 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f70:	4b4c      	ldr	r3, [pc, #304]	; (80070a4 <xTaskIncrementTick+0x148>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f78:	4a4a      	ldr	r2, [pc, #296]	; (80070a4 <xTaskIncrementTick+0x148>)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d120      	bne.n	8006fc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f84:	4b48      	ldr	r3, [pc, #288]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	603b      	str	r3, [r7, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <xTaskIncrementTick+0x46>
 8006fa4:	4b40      	ldr	r3, [pc, #256]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	4b40      	ldr	r3, [pc, #256]	; (80070ac <xTaskIncrementTick+0x150>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3e      	ldr	r2, [pc, #248]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4a3e      	ldr	r2, [pc, #248]	; (80070ac <xTaskIncrementTick+0x150>)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <xTaskIncrementTick+0x154>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	4a3c      	ldr	r2, [pc, #240]	; (80070b0 <xTaskIncrementTick+0x154>)
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	f000 faab 	bl	800751c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fc6:	4b3b      	ldr	r3, [pc, #236]	; (80070b4 <xTaskIncrementTick+0x158>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d348      	bcc.n	8007062 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fd0:	4b35      	ldr	r3, [pc, #212]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fda:	4b36      	ldr	r3, [pc, #216]	; (80070b4 <xTaskIncrementTick+0x158>)
 8006fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe0:	601a      	str	r2, [r3, #0]
					break;
 8006fe2:	e03e      	b.n	8007062 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe4:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <xTaskIncrementTick+0x14c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d203      	bcs.n	8007004 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ffc:	4a2d      	ldr	r2, [pc, #180]	; (80070b4 <xTaskIncrementTick+0x158>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007002:	e02e      	b.n	8007062 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3304      	adds	r3, #4
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe fe31 	bl	8005c70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d004      	beq.n	8007020 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3318      	adds	r3, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fe28 	bl	8005c70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	2201      	movs	r2, #1
 8007026:	409a      	lsls	r2, r3
 8007028:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <xTaskIncrementTick+0x15c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4313      	orrs	r3, r2
 800702e:	4a22      	ldr	r2, [pc, #136]	; (80070b8 <xTaskIncrementTick+0x15c>)
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a1f      	ldr	r2, [pc, #124]	; (80070bc <xTaskIncrementTick+0x160>)
 8007040:	441a      	add	r2, r3
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f7fe fdb4 	bl	8005bb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007052:	4b1b      	ldr	r3, [pc, #108]	; (80070c0 <xTaskIncrementTick+0x164>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	429a      	cmp	r2, r3
 800705a:	d3b9      	bcc.n	8006fd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007060:	e7b6      	b.n	8006fd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007062:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <xTaskIncrementTick+0x164>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4914      	ldr	r1, [pc, #80]	; (80070bc <xTaskIncrementTick+0x160>)
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d907      	bls.n	800708a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800707a:	2301      	movs	r3, #1
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	e004      	b.n	800708a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <xTaskIncrementTick+0x168>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <xTaskIncrementTick+0x168>)
 8007088:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <xTaskIncrementTick+0x16c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007096:	697b      	ldr	r3, [r7, #20]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	2001421c 	.word	0x2001421c
 80070a4:	200141f8 	.word	0x200141f8
 80070a8:	200141ac 	.word	0x200141ac
 80070ac:	200141b0 	.word	0x200141b0
 80070b0:	2001420c 	.word	0x2001420c
 80070b4:	20014214 	.word	0x20014214
 80070b8:	200141fc 	.word	0x200141fc
 80070bc:	20014058 	.word	0x20014058
 80070c0:	20014054 	.word	0x20014054
 80070c4:	20014204 	.word	0x20014204
 80070c8:	20014208 	.word	0x20014208

080070cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070d2:	4b27      	ldr	r3, [pc, #156]	; (8007170 <vTaskSwitchContext+0xa4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070da:	4b26      	ldr	r3, [pc, #152]	; (8007174 <vTaskSwitchContext+0xa8>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070e0:	e03f      	b.n	8007162 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80070e2:	4b24      	ldr	r3, [pc, #144]	; (8007174 <vTaskSwitchContext+0xa8>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070e8:	4b23      	ldr	r3, [pc, #140]	; (8007178 <vTaskSwitchContext+0xac>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	fab3 f383 	clz	r3, r3
 80070f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	f1c3 031f 	rsb	r3, r3, #31
 80070fc:	617b      	str	r3, [r7, #20]
 80070fe:	491f      	ldr	r1, [pc, #124]	; (800717c <vTaskSwitchContext+0xb0>)
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10a      	bne.n	8007128 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	607b      	str	r3, [r7, #4]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <vTaskSwitchContext+0x5a>
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4a12      	ldr	r2, [pc, #72]	; (800717c <vTaskSwitchContext+0xb0>)
 8007134:	4413      	add	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	605a      	str	r2, [r3, #4]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3308      	adds	r3, #8
 800714a:	429a      	cmp	r2, r3
 800714c:	d104      	bne.n	8007158 <vTaskSwitchContext+0x8c>
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	4a08      	ldr	r2, [pc, #32]	; (8007180 <vTaskSwitchContext+0xb4>)
 8007160:	6013      	str	r3, [r2, #0]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	2001421c 	.word	0x2001421c
 8007174:	20014208 	.word	0x20014208
 8007178:	200141fc 	.word	0x200141fc
 800717c:	20014058 	.word	0x20014058
 8007180:	20014054 	.word	0x20014054

08007184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <vTaskPlaceOnEventList+0x44>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3318      	adds	r3, #24
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fe fd23 	bl	8005bfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071b8:	2101      	movs	r1, #1
 80071ba:	6838      	ldr	r0, [r7, #0]
 80071bc:	f000 fba0 	bl	8007900 <prvAddCurrentTaskToDelayedList>
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20014054 	.word	0x20014054

080071cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	617b      	str	r3, [r7, #20]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <vTaskPlaceOnEventListRestricted+0x54>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3318      	adds	r3, #24
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7fe fcda 	bl	8005bb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	68b8      	ldr	r0, [r7, #8]
 8007212:	f000 fb75 	bl	8007900 <prvAddCurrentTaskToDelayedList>
	}
 8007216:	bf00      	nop
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20014054 	.word	0x20014054

08007224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60fb      	str	r3, [r7, #12]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3318      	adds	r3, #24
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fd0b 	bl	8005c70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800725a:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <xTaskRemoveFromEventList+0xac>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d11c      	bne.n	800729c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fd02 	bl	8005c70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	2201      	movs	r2, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <xTaskRemoveFromEventList+0xb0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4313      	orrs	r3, r2
 800727a:	4a16      	ldr	r2, [pc, #88]	; (80072d4 <xTaskRemoveFromEventList+0xb0>)
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <xTaskRemoveFromEventList+0xb4>)
 800728c:	441a      	add	r2, r3
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	3304      	adds	r3, #4
 8007292:	4619      	mov	r1, r3
 8007294:	4610      	mov	r0, r2
 8007296:	f7fe fc8e 	bl	8005bb6 <vListInsertEnd>
 800729a:	e005      	b.n	80072a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	3318      	adds	r3, #24
 80072a0:	4619      	mov	r1, r3
 80072a2:	480e      	ldr	r0, [pc, #56]	; (80072dc <xTaskRemoveFromEventList+0xb8>)
 80072a4:	f7fe fc87 	bl	8005bb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <xTaskRemoveFromEventList+0xbc>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d905      	bls.n	80072c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072ba:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <xTaskRemoveFromEventList+0xc0>)
 80072bc:	2201      	movs	r2, #1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	e001      	b.n	80072c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072c6:	697b      	ldr	r3, [r7, #20]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	2001421c 	.word	0x2001421c
 80072d4:	200141fc 	.word	0x200141fc
 80072d8:	20014058 	.word	0x20014058
 80072dc:	200141b4 	.word	0x200141b4
 80072e0:	20014054 	.word	0x20014054
 80072e4:	20014208 	.word	0x20014208

080072e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <vTaskInternalSetTimeOutState+0x24>)
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <vTaskInternalSetTimeOutState+0x28>)
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	2001420c 	.word	0x2001420c
 8007310:	200141f8 	.word	0x200141f8

08007314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	613b      	str	r3, [r7, #16]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60fb      	str	r3, [r7, #12]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007356:	f000 ff75 	bl	8008244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800735a:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <xTaskCheckForTimeOut+0xbc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d102      	bne.n	800737a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]
 8007378:	e023      	b.n	80073c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <xTaskCheckForTimeOut+0xc0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d007      	beq.n	8007396 <xTaskCheckForTimeOut+0x82>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	429a      	cmp	r2, r3
 800738e:	d302      	bcc.n	8007396 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007390:	2301      	movs	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	e015      	b.n	80073c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	429a      	cmp	r2, r3
 800739e:	d20b      	bcs.n	80073b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ff9b 	bl	80072e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e004      	b.n	80073c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073be:	2301      	movs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073c2:	f000 ff6f 	bl	80082a4 <vPortExitCritical>

	return xReturn;
 80073c6:	69fb      	ldr	r3, [r7, #28]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	200141f8 	.word	0x200141f8
 80073d4:	2001420c 	.word	0x2001420c

080073d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <vTaskMissedYield+0x14>)
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
}
 80073e2:	bf00      	nop
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	20014208 	.word	0x20014208

080073f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073f8:	f000 f852 	bl	80074a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <prvIdleTask+0x28>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d9f9      	bls.n	80073f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <prvIdleTask+0x2c>)
 8007406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007414:	e7f0      	b.n	80073f8 <prvIdleTask+0x8>
 8007416:	bf00      	nop
 8007418:	20014058 	.word	0x20014058
 800741c:	e000ed04 	.word	0xe000ed04

08007420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007426:	2300      	movs	r3, #0
 8007428:	607b      	str	r3, [r7, #4]
 800742a:	e00c      	b.n	8007446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <prvInitialiseTaskLists+0x60>)
 8007438:	4413      	add	r3, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fb8e 	bl	8005b5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3301      	adds	r3, #1
 8007444:	607b      	str	r3, [r7, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b0e      	cmp	r3, #14
 800744a:	d9ef      	bls.n	800742c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800744c:	480d      	ldr	r0, [pc, #52]	; (8007484 <prvInitialiseTaskLists+0x64>)
 800744e:	f7fe fb85 	bl	8005b5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007452:	480d      	ldr	r0, [pc, #52]	; (8007488 <prvInitialiseTaskLists+0x68>)
 8007454:	f7fe fb82 	bl	8005b5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007458:	480c      	ldr	r0, [pc, #48]	; (800748c <prvInitialiseTaskLists+0x6c>)
 800745a:	f7fe fb7f 	bl	8005b5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800745e:	480c      	ldr	r0, [pc, #48]	; (8007490 <prvInitialiseTaskLists+0x70>)
 8007460:	f7fe fb7c 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007464:	480b      	ldr	r0, [pc, #44]	; (8007494 <prvInitialiseTaskLists+0x74>)
 8007466:	f7fe fb79 	bl	8005b5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <prvInitialiseTaskLists+0x78>)
 800746c:	4a05      	ldr	r2, [pc, #20]	; (8007484 <prvInitialiseTaskLists+0x64>)
 800746e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <prvInitialiseTaskLists+0x7c>)
 8007472:	4a05      	ldr	r2, [pc, #20]	; (8007488 <prvInitialiseTaskLists+0x68>)
 8007474:	601a      	str	r2, [r3, #0]
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20014058 	.word	0x20014058
 8007484:	20014184 	.word	0x20014184
 8007488:	20014198 	.word	0x20014198
 800748c:	200141b4 	.word	0x200141b4
 8007490:	200141c8 	.word	0x200141c8
 8007494:	200141e0 	.word	0x200141e0
 8007498:	200141ac 	.word	0x200141ac
 800749c:	200141b0 	.word	0x200141b0

080074a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074a6:	e019      	b.n	80074dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074a8:	f000 fecc 	bl	8008244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <prvCheckTasksWaitingTermination+0x50>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fbd9 	bl	8005c70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074be:	4b0d      	ldr	r3, [pc, #52]	; (80074f4 <prvCheckTasksWaitingTermination+0x54>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	4a0b      	ldr	r2, [pc, #44]	; (80074f4 <prvCheckTasksWaitingTermination+0x54>)
 80074c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074c8:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <prvCheckTasksWaitingTermination+0x58>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <prvCheckTasksWaitingTermination+0x58>)
 80074d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074d2:	f000 fee7 	bl	80082a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f810 	bl	80074fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <prvCheckTasksWaitingTermination+0x58>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e1      	bne.n	80074a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200141c8 	.word	0x200141c8
 80074f4:	200141f4 	.word	0x200141f4
 80074f8:	200141dc 	.word	0x200141dc

080074fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fa11 	bl	8005930 <vPortFree>
			vPortFree( pxTCB );
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fe fa0e 	bl	8005930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007514:	bf00      	nop
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007522:	4b0c      	ldr	r3, [pc, #48]	; (8007554 <prvResetNextTaskUnblockTime+0x38>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <prvResetNextTaskUnblockTime+0x3c>)
 800752e:	f04f 32ff 	mov.w	r2, #4294967295
 8007532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007534:	e008      	b.n	8007548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <prvResetNextTaskUnblockTime+0x38>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	4a04      	ldr	r2, [pc, #16]	; (8007558 <prvResetNextTaskUnblockTime+0x3c>)
 8007546:	6013      	str	r3, [r2, #0]
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	200141ac 	.word	0x200141ac
 8007558:	20014214 	.word	0x20014214

0800755c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <xTaskGetSchedulerState+0x34>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d102      	bne.n	8007570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800756a:	2301      	movs	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	e008      	b.n	8007582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007570:	4b08      	ldr	r3, [pc, #32]	; (8007594 <xTaskGetSchedulerState+0x38>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d102      	bne.n	800757e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007578:	2302      	movs	r3, #2
 800757a:	607b      	str	r3, [r7, #4]
 800757c:	e001      	b.n	8007582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007582:	687b      	ldr	r3, [r7, #4]
	}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	20014200 	.word	0x20014200
 8007594:	2001421c 	.word	0x2001421c

08007598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d069      	beq.n	8007682 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	4b36      	ldr	r3, [pc, #216]	; (800768c <xTaskPriorityInherit+0xf4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d259      	bcs.n	8007670 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	db06      	blt.n	80075d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c4:	4b31      	ldr	r3, [pc, #196]	; (800768c <xTaskPriorityInherit+0xf4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f1c3 020f 	rsb	r2, r3, #15
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	6959      	ldr	r1, [r3, #20]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a2b      	ldr	r2, [pc, #172]	; (8007690 <xTaskPriorityInherit+0xf8>)
 80075e4:	4413      	add	r3, r2
 80075e6:	4299      	cmp	r1, r3
 80075e8:	d13a      	bne.n	8007660 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fb3e 	bl	8005c70 <uxListRemove>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d115      	bne.n	8007626 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	4924      	ldr	r1, [pc, #144]	; (8007690 <xTaskPriorityInherit+0xf8>)
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskPriorityInherit+0x8e>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007614:	2201      	movs	r2, #1
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	43da      	mvns	r2, r3
 800761c:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <xTaskPriorityInherit+0xfc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4013      	ands	r3, r2
 8007622:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <xTaskPriorityInherit+0xfc>)
 8007624:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007626:	4b19      	ldr	r3, [pc, #100]	; (800768c <xTaskPriorityInherit+0xf4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	2201      	movs	r2, #1
 8007636:	409a      	lsls	r2, r3
 8007638:	4b16      	ldr	r3, [pc, #88]	; (8007694 <xTaskPriorityInherit+0xfc>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4313      	orrs	r3, r2
 800763e:	4a15      	ldr	r2, [pc, #84]	; (8007694 <xTaskPriorityInherit+0xfc>)
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	4613      	mov	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4a10      	ldr	r2, [pc, #64]	; (8007690 <xTaskPriorityInherit+0xf8>)
 8007650:	441a      	add	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe faac 	bl	8005bb6 <vListInsertEnd>
 800765e:	e004      	b.n	800766a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007660:	4b0a      	ldr	r3, [pc, #40]	; (800768c <xTaskPriorityInherit+0xf4>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800766a:	2301      	movs	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	e008      	b.n	8007682 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <xTaskPriorityInherit+0xf4>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767a:	429a      	cmp	r2, r3
 800767c:	d201      	bcs.n	8007682 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800767e:	2301      	movs	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007682:	68fb      	ldr	r3, [r7, #12]
	}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	20014054 	.word	0x20014054
 8007690:	20014058 	.word	0x20014058
 8007694:	200141fc 	.word	0x200141fc

08007698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d06e      	beq.n	800778c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ae:	4b3a      	ldr	r3, [pc, #232]	; (8007798 <xTaskPriorityDisinherit+0x100>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d00a      	beq.n	80076ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10a      	bne.n	80076ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60bb      	str	r3, [r7, #8]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f0:	1e5a      	subs	r2, r3, #1
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fe:	429a      	cmp	r2, r3
 8007700:	d044      	beq.n	800778c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d140      	bne.n	800778c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3304      	adds	r3, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe faae 	bl	8005c70 <uxListRemove>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d115      	bne.n	8007746 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771e:	491f      	ldr	r1, [pc, #124]	; (800779c <xTaskPriorityDisinherit+0x104>)
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10a      	bne.n	8007746 <xTaskPriorityDisinherit+0xae>
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	2201      	movs	r2, #1
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	43da      	mvns	r2, r3
 800773c:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <xTaskPriorityDisinherit+0x108>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4013      	ands	r3, r2
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <xTaskPriorityDisinherit+0x108>)
 8007744:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	f1c3 020f 	rsb	r2, r3, #15
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	2201      	movs	r2, #1
 8007760:	409a      	lsls	r2, r3
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <xTaskPriorityDisinherit+0x108>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4313      	orrs	r3, r2
 8007768:	4a0d      	ldr	r2, [pc, #52]	; (80077a0 <xTaskPriorityDisinherit+0x108>)
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4a08      	ldr	r2, [pc, #32]	; (800779c <xTaskPriorityDisinherit+0x104>)
 800777a:	441a      	add	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f7fe fa17 	bl	8005bb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800778c:	697b      	ldr	r3, [r7, #20]
	}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20014054 	.word	0x20014054
 800779c:	20014058 	.word	0x20014058
 80077a0:	200141fc 	.word	0x200141fc

080077a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8083 	beq.w	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60fb      	str	r3, [r7, #12]
}
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d902      	bls.n	80077ec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	e002      	b.n	80077f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d063      	beq.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	429a      	cmp	r2, r3
 8007804:	d15e      	bne.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007806:	4b31      	ldr	r3, [pc, #196]	; (80078cc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	429a      	cmp	r2, r3
 800780e:	d10a      	bne.n	8007826 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60bb      	str	r3, [r7, #8]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	db04      	blt.n	8007844 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f1c3 020f 	rsb	r2, r3, #15
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	6959      	ldr	r1, [r3, #20]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007854:	4413      	add	r3, r2
 8007856:	4299      	cmp	r1, r3
 8007858:	d134      	bne.n	80078c4 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	3304      	adds	r3, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fa06 	bl	8005c70 <uxListRemove>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d115      	bne.n	8007896 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786e:	4918      	ldr	r1, [pc, #96]	; (80078d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	440b      	add	r3, r1
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	2201      	movs	r2, #1
 8007886:	fa02 f303 	lsl.w	r3, r2, r3
 800788a:	43da      	mvns	r2, r3
 800788c:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4013      	ands	r3, r2
 8007892:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007894:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	2201      	movs	r2, #1
 800789c:	409a      	lsls	r2, r3
 800789e:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	4a0b      	ldr	r2, [pc, #44]	; (80078d4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4a06      	ldr	r2, [pc, #24]	; (80078d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80078b6:	441a      	add	r2, r3
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fe f979 	bl	8005bb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078c4:	bf00      	nop
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20014054 	.word	0x20014054
 80078d0:	20014058 	.word	0x20014058
 80078d4:	200141fc 	.word	0x200141fc

080078d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <pvTaskIncrementMutexHeldCount+0x24>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <pvTaskIncrementMutexHeldCount+0x24>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078ea:	3201      	adds	r2, #1
 80078ec:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80078ee:	4b03      	ldr	r3, [pc, #12]	; (80078fc <pvTaskIncrementMutexHeldCount+0x24>)
 80078f0:	681b      	ldr	r3, [r3, #0]
	}
 80078f2:	4618      	mov	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	20014054 	.word	0x20014054

08007900 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800790a:	4b29      	ldr	r3, [pc, #164]	; (80079b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007910:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3304      	adds	r3, #4
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe f9aa 	bl	8005c70 <uxListRemove>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	2201      	movs	r2, #1
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43da      	mvns	r2, r3
 8007930:	4b21      	ldr	r3, [pc, #132]	; (80079b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4013      	ands	r3, r2
 8007936:	4a20      	ldr	r2, [pc, #128]	; (80079b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007938:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d10a      	bne.n	8007958 <prvAddCurrentTaskToDelayedList+0x58>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007948:	4b1a      	ldr	r3, [pc, #104]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3304      	adds	r3, #4
 800794e:	4619      	mov	r1, r3
 8007950:	481a      	ldr	r0, [pc, #104]	; (80079bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007952:	f7fe f930 	bl	8005bb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007956:	e026      	b.n	80079a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007960:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	429a      	cmp	r2, r3
 800796e:	d209      	bcs.n	8007984 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007970:	4b13      	ldr	r3, [pc, #76]	; (80079c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3304      	adds	r3, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4610      	mov	r0, r2
 800797e:	f7fe f93e 	bl	8005bfe <vListInsert>
}
 8007982:	e010      	b.n	80079a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007984:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	4b0a      	ldr	r3, [pc, #40]	; (80079b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3304      	adds	r3, #4
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f7fe f934 	bl	8005bfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	429a      	cmp	r2, r3
 800799e:	d202      	bcs.n	80079a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	6013      	str	r3, [r2, #0]
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	200141f8 	.word	0x200141f8
 80079b4:	20014054 	.word	0x20014054
 80079b8:	200141fc 	.word	0x200141fc
 80079bc:	200141e0 	.word	0x200141e0
 80079c0:	200141b0 	.word	0x200141b0
 80079c4:	200141ac 	.word	0x200141ac
 80079c8:	20014214 	.word	0x20014214

080079cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80079d6:	f000 fad5 	bl	8007f84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80079da:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <xTimerCreateTimerTask+0x54>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00b      	beq.n	80079fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80079e2:	4b10      	ldr	r3, [pc, #64]	; (8007a24 <xTimerCreateTimerTask+0x58>)
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	2302      	movs	r3, #2
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80079f0:	490d      	ldr	r1, [pc, #52]	; (8007a28 <xTimerCreateTimerTask+0x5c>)
 80079f2:	480e      	ldr	r0, [pc, #56]	; (8007a2c <xTimerCreateTimerTask+0x60>)
 80079f4:	f7ff f838 	bl	8006a68 <xTaskCreate>
 80079f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	603b      	str	r3, [r7, #0]
}
 8007a12:	bf00      	nop
 8007a14:	e7fe      	b.n	8007a14 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007a16:	687b      	ldr	r3, [r7, #4]
    }
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20014250 	.word	0x20014250
 8007a24:	20014254 	.word	0x20014254
 8007a28:	0800b0f0 	.word	0x0800b0f0
 8007a2c:	08007b65 	.word	0x08007b65

08007a30 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10a      	bne.n	8007a5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	623b      	str	r3, [r7, #32]
}
 8007a5a:	bf00      	nop
 8007a5c:	e7fe      	b.n	8007a5c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007a5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ac8 <xTimerGenericCommand+0x98>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02a      	beq.n	8007abc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b05      	cmp	r3, #5
 8007a76:	dc18      	bgt.n	8007aaa <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a78:	f7ff fd70 	bl	800755c <xTaskGetSchedulerState>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d109      	bne.n	8007a96 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a82:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <xTimerGenericCommand+0x98>)
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f107 0114 	add.w	r1, r7, #20
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a8e:	f7fe fa35 	bl	8005efc <xQueueGenericSend>
 8007a92:	6278      	str	r0, [r7, #36]	; 0x24
 8007a94:	e012      	b.n	8007abc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <xTimerGenericCommand+0x98>)
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f107 0114 	add.w	r1, r7, #20
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f7fe fa2b 	bl	8005efc <xQueueGenericSend>
 8007aa6:	6278      	str	r0, [r7, #36]	; 0x24
 8007aa8:	e008      	b.n	8007abc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007aaa:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <xTimerGenericCommand+0x98>)
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	f107 0114 	add.w	r1, r7, #20
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	f7fe fb1f 	bl	80060f8 <xQueueGenericSendFromISR>
 8007aba:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3728      	adds	r7, #40	; 0x28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20014250 	.word	0x20014250

08007acc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad6:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <prvProcessExpiredTimer+0x94>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	3304      	adds	r3, #4
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe f8c3 	bl	8005c70 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d022      	beq.n	8007b3e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	18d1      	adds	r1, r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	6978      	ldr	r0, [r7, #20]
 8007b06:	f000 f8d1 	bl	8007cac <prvInsertTimerInActiveList>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01f      	beq.n	8007b50 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	2100      	movs	r1, #0
 8007b1a:	6978      	ldr	r0, [r7, #20]
 8007b1c:	f7ff ff88 	bl	8007a30 <xTimerGenericCommand>
 8007b20:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d113      	bne.n	8007b50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	60fb      	str	r3, [r7, #12]
}
 8007b3a:	bf00      	nop
 8007b3c:	e7fe      	b.n	8007b3c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b44:	f023 0301 	bic.w	r3, r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	6978      	ldr	r0, [r7, #20]
 8007b56:	4798      	blx	r3
    }
 8007b58:	bf00      	nop
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20014248 	.word	0x20014248

08007b64 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b6c:	f107 0308 	add.w	r3, r7, #8
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f857 	bl	8007c24 <prvGetNextExpireTime>
 8007b76:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f803 	bl	8007b88 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007b82:	f000 f8d5 	bl	8007d30 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b86:	e7f1      	b.n	8007b6c <prvTimerTask+0x8>

08007b88 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007b92:	f7ff f929 	bl	8006de8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b96:	f107 0308 	add.w	r3, r7, #8
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 f866 	bl	8007c6c <prvSampleTimeNow>
 8007ba0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d130      	bne.n	8007c0a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <prvProcessTimerOrBlockTask+0x3c>
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d806      	bhi.n	8007bc4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007bb6:	f7ff f925 	bl	8006e04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff ff85 	bl	8007acc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007bc2:	e024      	b.n	8007c0e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d008      	beq.n	8007bdc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <prvProcessTimerOrBlockTask+0x90>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <prvProcessTimerOrBlockTask+0x50>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <prvProcessTimerOrBlockTask+0x52>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <prvProcessTimerOrBlockTask+0x94>)
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	f7fe ff09 	bl	8006a00 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007bee:	f7ff f909 	bl	8006e04 <xTaskResumeAll>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007bf8:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <prvProcessTimerOrBlockTask+0x98>)
 8007bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	f3bf 8f6f 	isb	sy
    }
 8007c08:	e001      	b.n	8007c0e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007c0a:	f7ff f8fb 	bl	8006e04 <xTaskResumeAll>
    }
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2001424c 	.word	0x2001424c
 8007c1c:	20014250 	.word	0x20014250
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <prvGetNextExpireTime+0x44>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <prvGetNextExpireTime+0x16>
 8007c36:	2201      	movs	r2, #1
 8007c38:	e000      	b.n	8007c3c <prvGetNextExpireTime+0x18>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d105      	bne.n	8007c54 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c48:	4b07      	ldr	r3, [pc, #28]	; (8007c68 <prvGetNextExpireTime+0x44>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	e001      	b.n	8007c58 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007c58:	68fb      	ldr	r3, [r7, #12]
    }
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	20014248 	.word	0x20014248

08007c6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007c74:	f7ff f962 	bl	8006f3c <xTaskGetTickCount>
 8007c78:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <prvSampleTimeNow+0x3c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d205      	bcs.n	8007c90 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007c84:	f000 f91a 	bl	8007ebc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e002      	b.n	8007c96 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007c96:	4a04      	ldr	r2, [pc, #16]	; (8007ca8 <prvSampleTimeNow+0x3c>)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
    }
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20014258 	.word	0x20014258

08007cac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d812      	bhi.n	8007cf8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	1ad2      	subs	r2, r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d302      	bcc.n	8007ce6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e01b      	b.n	8007d1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ce6:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <prvInsertTimerInActiveList+0x7c>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4619      	mov	r1, r3
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	f7fd ff84 	bl	8005bfe <vListInsert>
 8007cf6:	e012      	b.n	8007d1e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d206      	bcs.n	8007d0e <prvInsertTimerInActiveList+0x62>
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d302      	bcc.n	8007d0e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e007      	b.n	8007d1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <prvInsertTimerInActiveList+0x80>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3304      	adds	r3, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4610      	mov	r0, r2
 8007d1a:	f7fd ff70 	bl	8005bfe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007d1e:	697b      	ldr	r3, [r7, #20]
    }
 8007d20:	4618      	mov	r0, r3
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	2001424c 	.word	0x2001424c
 8007d2c:	20014248 	.word	0x20014248

08007d30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08c      	sub	sp, #48	; 0x30
 8007d34:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d36:	e0ae      	b.n	8007e96 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f2c0 80aa 	blt.w	8007e94 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	3304      	adds	r3, #4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fd ff8d 	bl	8005c70 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d56:	1d3b      	adds	r3, r7, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff ff87 	bl	8007c6c <prvSampleTimeNow>
 8007d5e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b09      	cmp	r3, #9
 8007d64:	f200 8097 	bhi.w	8007e96 <prvProcessReceivedCommands+0x166>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <prvProcessReceivedCommands+0x40>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d99 	.word	0x08007d99
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007d99 	.word	0x08007d99
 8007d7c:	08007e0d 	.word	0x08007e0d
 8007d80:	08007e21 	.word	0x08007e21
 8007d84:	08007e6b 	.word	0x08007e6b
 8007d88:	08007d99 	.word	0x08007d99
 8007d8c:	08007d99 	.word	0x08007d99
 8007d90:	08007e0d 	.word	0x08007e0d
 8007d94:	08007e21 	.word	0x08007e21
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	18d1      	adds	r1, r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a3a      	ldr	r2, [r7, #32]
 8007db6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007db8:	f7ff ff78 	bl	8007cac <prvInsertTimerInActiveList>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d069      	beq.n	8007e96 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dc8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d05e      	beq.n	8007e96 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	441a      	add	r2, r3
 8007de0:	2300      	movs	r3, #0
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2300      	movs	r3, #0
 8007de6:	2100      	movs	r1, #0
 8007de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dea:	f7ff fe21 	bl	8007a30 <xTimerGenericCommand>
 8007dee:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d14f      	bne.n	8007e96 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61bb      	str	r3, [r7, #24]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007e1e:	e03a      	b.n	8007e96 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e26:	f043 0301 	orr.w	r3, r3, #1
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	617b      	str	r3, [r7, #20]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	18d1      	adds	r1, r2, r3
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	6a3a      	ldr	r2, [r7, #32]
 8007e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e64:	f7ff ff22 	bl	8007cac <prvInsertTimerInActiveList>
                        break;
 8007e68:	e015      	b.n	8007e96 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e7a:	f7fd fd59 	bl	8005930 <vPortFree>
 8007e7e:	e00a      	b.n	8007e96 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007e92:	e000      	b.n	8007e96 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007e94:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <prvProcessReceivedCommands+0x188>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f107 0108 	add.w	r1, r7, #8
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe fa6f 	bl	8006384 <xQueueReceive>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f af45 	bne.w	8007d38 <prvProcessReceivedCommands+0x8>
        }
    }
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	3728      	adds	r7, #40	; 0x28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20014250 	.word	0x20014250

08007ebc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ec2:	e048      	b.n	8007f56 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec4:	4b2d      	ldr	r3, [pc, #180]	; (8007f7c <prvSwitchTimerLists+0xc0>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ece:	4b2b      	ldr	r3, [pc, #172]	; (8007f7c <prvSwitchTimerLists+0xc0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd fec7 	bl	8005c70 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d02e      	beq.n	8007f56 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d90e      	bls.n	8007f28 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f16:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <prvSwitchTimerLists+0xc0>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7fd fe6c 	bl	8005bfe <vListInsert>
 8007f26:	e016      	b.n	8007f56 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	2100      	movs	r1, #0
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff fd7c 	bl	8007a30 <xTimerGenericCommand>
 8007f38:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	603b      	str	r3, [r7, #0]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f56:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <prvSwitchTimerLists+0xc0>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1b1      	bne.n	8007ec4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <prvSwitchTimerLists+0xc0>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007f66:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <prvSwitchTimerLists+0xc4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a04      	ldr	r2, [pc, #16]	; (8007f7c <prvSwitchTimerLists+0xc0>)
 8007f6c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007f6e:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <prvSwitchTimerLists+0xc4>)
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	6013      	str	r3, [r2, #0]
    }
 8007f74:	bf00      	nop
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20014248 	.word	0x20014248
 8007f80:	2001424c 	.word	0x2001424c

08007f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007f88:	f000 f95c 	bl	8008244 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007f8c:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d11d      	bne.n	8007fd0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007f94:	4811      	ldr	r0, [pc, #68]	; (8007fdc <prvCheckForValidListAndQueue+0x58>)
 8007f96:	f7fd fde1 	bl	8005b5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007f9a:	4811      	ldr	r0, [pc, #68]	; (8007fe0 <prvCheckForValidListAndQueue+0x5c>)
 8007f9c:	f7fd fdde 	bl	8005b5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007fa0:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <prvCheckForValidListAndQueue+0x60>)
 8007fa2:	4a0e      	ldr	r2, [pc, #56]	; (8007fdc <prvCheckForValidListAndQueue+0x58>)
 8007fa4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007fa6:	4b10      	ldr	r3, [pc, #64]	; (8007fe8 <prvCheckForValidListAndQueue+0x64>)
 8007fa8:	4a0d      	ldr	r2, [pc, #52]	; (8007fe0 <prvCheckForValidListAndQueue+0x5c>)
 8007faa:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007fac:	2200      	movs	r2, #0
 8007fae:	210c      	movs	r1, #12
 8007fb0:	200a      	movs	r0, #10
 8007fb2:	f7fd feef 	bl	8005d94 <xQueueGenericCreate>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4a07      	ldr	r2, [pc, #28]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007fba:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007fbc:	4b06      	ldr	r3, [pc, #24]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <prvCheckForValidListAndQueue+0x54>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4908      	ldr	r1, [pc, #32]	; (8007fec <prvCheckForValidListAndQueue+0x68>)
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fcee 	bl	80069ac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007fd0:	f000 f968 	bl	80082a4 <vPortExitCritical>
    }
 8007fd4:	bf00      	nop
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20014250 	.word	0x20014250
 8007fdc:	20014220 	.word	0x20014220
 8007fe0:	20014234 	.word	0x20014234
 8007fe4:	20014248 	.word	0x20014248
 8007fe8:	2001424c 	.word	0x2001424c
 8007fec:	0800b0f8 	.word	0x0800b0f8

08007ff0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3b04      	subs	r3, #4
 8008000:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008008:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b04      	subs	r3, #4
 800800e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f023 0201 	bic.w	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	3b04      	subs	r3, #4
 800801e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008020:	4a0c      	ldr	r2, [pc, #48]	; (8008054 <pxPortInitialiseStack+0x64>)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b14      	subs	r3, #20
 800802a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3b04      	subs	r3, #4
 8008036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f06f 0202 	mvn.w	r2, #2
 800803e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3b20      	subs	r3, #32
 8008044:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008046:	68fb      	ldr	r3, [r7, #12]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	08008059 	.word	0x08008059

08008058 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008062:	4b12      	ldr	r3, [pc, #72]	; (80080ac <prvTaskExitError+0x54>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806a:	d00a      	beq.n	8008082 <prvTaskExitError+0x2a>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	60fb      	str	r3, [r7, #12]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <prvTaskExitError+0x28>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	60bb      	str	r3, [r7, #8]
}
 8008094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008096:	bf00      	nop
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0fc      	beq.n	8008098 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800809e:	bf00      	nop
 80080a0:	bf00      	nop
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20000010 	.word	0x20000010

080080b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <pxCurrentTCBConst2>)
 80080b2:	6819      	ldr	r1, [r3, #0]
 80080b4:	6808      	ldr	r0, [r1, #0]
 80080b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ba:	f380 8809 	msr	PSP, r0
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8811 	msr	BASEPRI, r0
 80080ca:	4770      	bx	lr
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst2>:
 80080d0:	20014054 	.word	0x20014054
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080d8:	4808      	ldr	r0, [pc, #32]	; (80080fc <prvPortStartFirstTask+0x24>)
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	f380 8808 	msr	MSP, r0
 80080e2:	f04f 0000 	mov.w	r0, #0
 80080e6:	f380 8814 	msr	CONTROL, r0
 80080ea:	b662      	cpsie	i
 80080ec:	b661      	cpsie	f
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	df00      	svc	0
 80080f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080fa:	bf00      	nop
 80080fc:	e000ed08 	.word	0xe000ed08

08008100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008106:	4b46      	ldr	r3, [pc, #280]	; (8008220 <xPortStartScheduler+0x120>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a46      	ldr	r2, [pc, #280]	; (8008224 <xPortStartScheduler+0x124>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d10a      	bne.n	8008126 <xPortStartScheduler+0x26>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	613b      	str	r3, [r7, #16]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008126:	4b3e      	ldr	r3, [pc, #248]	; (8008220 <xPortStartScheduler+0x120>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a3f      	ldr	r2, [pc, #252]	; (8008228 <xPortStartScheduler+0x128>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d10a      	bne.n	8008146 <xPortStartScheduler+0x46>
	__asm volatile
 8008130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008134:	f383 8811 	msr	BASEPRI, r3
 8008138:	f3bf 8f6f 	isb	sy
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	60fb      	str	r3, [r7, #12]
}
 8008142:	bf00      	nop
 8008144:	e7fe      	b.n	8008144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008146:	4b39      	ldr	r3, [pc, #228]	; (800822c <xPortStartScheduler+0x12c>)
 8008148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b2db      	uxtb	r3, r3
 8008150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	22ff      	movs	r2, #255	; 0xff
 8008156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008168:	b2da      	uxtb	r2, r3
 800816a:	4b31      	ldr	r3, [pc, #196]	; (8008230 <xPortStartScheduler+0x130>)
 800816c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800816e:	4b31      	ldr	r3, [pc, #196]	; (8008234 <xPortStartScheduler+0x134>)
 8008170:	2207      	movs	r2, #7
 8008172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008174:	e009      	b.n	800818a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008176:	4b2f      	ldr	r3, [pc, #188]	; (8008234 <xPortStartScheduler+0x134>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3b01      	subs	r3, #1
 800817c:	4a2d      	ldr	r2, [pc, #180]	; (8008234 <xPortStartScheduler+0x134>)
 800817e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008180:	78fb      	ldrb	r3, [r7, #3]
 8008182:	b2db      	uxtb	r3, r3
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	b2db      	uxtb	r3, r3
 8008188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d0ef      	beq.n	8008176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008196:	4b27      	ldr	r3, [pc, #156]	; (8008234 <xPortStartScheduler+0x134>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f1c3 0307 	rsb	r3, r3, #7
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d00a      	beq.n	80081b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	60bb      	str	r3, [r7, #8]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081b8:	4b1e      	ldr	r3, [pc, #120]	; (8008234 <xPortStartScheduler+0x134>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <xPortStartScheduler+0x134>)
 80081c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081c2:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <xPortStartScheduler+0x134>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081ca:	4a1a      	ldr	r2, [pc, #104]	; (8008234 <xPortStartScheduler+0x134>)
 80081cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081d6:	4b18      	ldr	r3, [pc, #96]	; (8008238 <xPortStartScheduler+0x138>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a17      	ldr	r2, [pc, #92]	; (8008238 <xPortStartScheduler+0x138>)
 80081dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081e2:	4b15      	ldr	r3, [pc, #84]	; (8008238 <xPortStartScheduler+0x138>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a14      	ldr	r2, [pc, #80]	; (8008238 <xPortStartScheduler+0x138>)
 80081e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ee:	f000 f8dd 	bl	80083ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081f2:	4b12      	ldr	r3, [pc, #72]	; (800823c <xPortStartScheduler+0x13c>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081f8:	f000 f8fc 	bl	80083f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081fc:	4b10      	ldr	r3, [pc, #64]	; (8008240 <xPortStartScheduler+0x140>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a0f      	ldr	r2, [pc, #60]	; (8008240 <xPortStartScheduler+0x140>)
 8008202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008208:	f7ff ff66 	bl	80080d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800820c:	f7fe ff5e 	bl	80070cc <vTaskSwitchContext>
	prvTaskExitError();
 8008210:	f7ff ff22 	bl	8008058 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	e000ed00 	.word	0xe000ed00
 8008224:	410fc271 	.word	0x410fc271
 8008228:	410fc270 	.word	0x410fc270
 800822c:	e000e400 	.word	0xe000e400
 8008230:	2001425c 	.word	0x2001425c
 8008234:	20014260 	.word	0x20014260
 8008238:	e000ed20 	.word	0xe000ed20
 800823c:	20000010 	.word	0x20000010
 8008240:	e000ef34 	.word	0xe000ef34

08008244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	607b      	str	r3, [r7, #4]
}
 800825c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <vPortEnterCritical+0x58>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	4a0d      	ldr	r2, [pc, #52]	; (800829c <vPortEnterCritical+0x58>)
 8008266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008268:	4b0c      	ldr	r3, [pc, #48]	; (800829c <vPortEnterCritical+0x58>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d10f      	bne.n	8008290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <vPortEnterCritical+0x5c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <vPortEnterCritical+0x4c>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	603b      	str	r3, [r7, #0]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <vPortEnterCritical+0x4a>
	}
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	20000010 	.word	0x20000010
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082aa:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <vPortExitCritical+0x50>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <vPortExitCritical+0x24>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	607b      	str	r3, [r7, #4]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082c8:	4b0a      	ldr	r3, [pc, #40]	; (80082f4 <vPortExitCritical+0x50>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	4a09      	ldr	r2, [pc, #36]	; (80082f4 <vPortExitCritical+0x50>)
 80082d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082d2:	4b08      	ldr	r3, [pc, #32]	; (80082f4 <vPortExitCritical+0x50>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d105      	bne.n	80082e6 <vPortExitCritical+0x42>
 80082da:	2300      	movs	r3, #0
 80082dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f383 8811 	msr	BASEPRI, r3
}
 80082e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000010 	.word	0x20000010
	...

08008300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008300:	f3ef 8009 	mrs	r0, PSP
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	4b15      	ldr	r3, [pc, #84]	; (8008360 <pxCurrentTCBConst>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	f01e 0f10 	tst.w	lr, #16
 8008310:	bf08      	it	eq
 8008312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	6010      	str	r0, [r2, #0]
 800831c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008324:	f380 8811 	msr	BASEPRI, r0
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f7fe fecc 	bl	80070cc <vTaskSwitchContext>
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	f380 8811 	msr	BASEPRI, r0
 800833c:	bc09      	pop	{r0, r3}
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	6808      	ldr	r0, [r1, #0]
 8008342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008346:	f01e 0f10 	tst.w	lr, #16
 800834a:	bf08      	it	eq
 800834c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008350:	f380 8809 	msr	PSP, r0
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst>:
 8008360:	20014054 	.word	0x20014054
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	607b      	str	r3, [r7, #4]
}
 8008380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008382:	f7fe fdeb 	bl	8006f5c <xTaskIncrementTick>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <SysTick_Handler+0x40>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	2300      	movs	r3, #0
 8008396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	f383 8811 	msr	BASEPRI, r3
}
 800839e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083b0:	4b0b      	ldr	r3, [pc, #44]	; (80083e0 <vPortSetupTimerInterrupt+0x34>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083b6:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <vPortSetupTimerInterrupt+0x38>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <vPortSetupTimerInterrupt+0x3c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a0a      	ldr	r2, [pc, #40]	; (80083ec <vPortSetupTimerInterrupt+0x40>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	099b      	lsrs	r3, r3, #6
 80083c8:	4a09      	ldr	r2, [pc, #36]	; (80083f0 <vPortSetupTimerInterrupt+0x44>)
 80083ca:	3b01      	subs	r3, #1
 80083cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083ce:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <vPortSetupTimerInterrupt+0x34>)
 80083d0:	2207      	movs	r2, #7
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	e000e010 	.word	0xe000e010
 80083e4:	e000e018 	.word	0xe000e018
 80083e8:	20000004 	.word	0x20000004
 80083ec:	10624dd3 	.word	0x10624dd3
 80083f0:	e000e014 	.word	0xe000e014

080083f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008404 <vPortEnableVFP+0x10>
 80083f8:	6801      	ldr	r1, [r0, #0]
 80083fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083fe:	6001      	str	r1, [r0, #0]
 8008400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008402:	bf00      	nop
 8008404:	e000ed88 	.word	0xe000ed88

08008408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800840e:	f3ef 8305 	mrs	r3, IPSR
 8008412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d914      	bls.n	8008444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800841a:	4a17      	ldr	r2, [pc, #92]	; (8008478 <vPortValidateInterruptPriority+0x70>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008424:	4b15      	ldr	r3, [pc, #84]	; (800847c <vPortValidateInterruptPriority+0x74>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	7afa      	ldrb	r2, [r7, #11]
 800842a:	429a      	cmp	r2, r3
 800842c:	d20a      	bcs.n	8008444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008444:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <vPortValidateInterruptPriority+0x78>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800844c:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <vPortValidateInterruptPriority+0x7c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	429a      	cmp	r2, r3
 8008452:	d90a      	bls.n	800846a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	603b      	str	r3, [r7, #0]
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <vPortValidateInterruptPriority+0x60>
	}
 800846a:	bf00      	nop
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	e000e3f0 	.word	0xe000e3f0
 800847c:	2001425c 	.word	0x2001425c
 8008480:	e000ed0c 	.word	0xe000ed0c
 8008484:	20014260 	.word	0x20014260

08008488 <__errno>:
 8008488:	4b01      	ldr	r3, [pc, #4]	; (8008490 <__errno+0x8>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000014 	.word	0x20000014

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4d0d      	ldr	r5, [pc, #52]	; (80084cc <__libc_init_array+0x38>)
 8008498:	4c0d      	ldr	r4, [pc, #52]	; (80084d0 <__libc_init_array+0x3c>)
 800849a:	1b64      	subs	r4, r4, r5
 800849c:	10a4      	asrs	r4, r4, #2
 800849e:	2600      	movs	r6, #0
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	4d0b      	ldr	r5, [pc, #44]	; (80084d4 <__libc_init_array+0x40>)
 80084a6:	4c0c      	ldr	r4, [pc, #48]	; (80084d8 <__libc_init_array+0x44>)
 80084a8:	f002 fdaa 	bl	800b000 <_init>
 80084ac:	1b64      	subs	r4, r4, r5
 80084ae:	10a4      	asrs	r4, r4, #2
 80084b0:	2600      	movs	r6, #0
 80084b2:	42a6      	cmp	r6, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084bc:	4798      	blx	r3
 80084be:	3601      	adds	r6, #1
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c6:	4798      	blx	r3
 80084c8:	3601      	adds	r6, #1
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	0800b504 	.word	0x0800b504
 80084d0:	0800b504 	.word	0x0800b504
 80084d4:	0800b504 	.word	0x0800b504
 80084d8:	0800b508 	.word	0x0800b508

080084dc <memcpy>:
 80084dc:	440a      	add	r2, r1
 80084de:	4291      	cmp	r1, r2
 80084e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084e4:	d100      	bne.n	80084e8 <memcpy+0xc>
 80084e6:	4770      	bx	lr
 80084e8:	b510      	push	{r4, lr}
 80084ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f2:	4291      	cmp	r1, r2
 80084f4:	d1f9      	bne.n	80084ea <memcpy+0xe>
 80084f6:	bd10      	pop	{r4, pc}

080084f8 <memset>:
 80084f8:	4402      	add	r2, r0
 80084fa:	4603      	mov	r3, r0
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d100      	bne.n	8008502 <memset+0xa>
 8008500:	4770      	bx	lr
 8008502:	f803 1b01 	strb.w	r1, [r3], #1
 8008506:	e7f9      	b.n	80084fc <memset+0x4>

08008508 <__cvt>:
 8008508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800850c:	ec55 4b10 	vmov	r4, r5, d0
 8008510:	2d00      	cmp	r5, #0
 8008512:	460e      	mov	r6, r1
 8008514:	4619      	mov	r1, r3
 8008516:	462b      	mov	r3, r5
 8008518:	bfbb      	ittet	lt
 800851a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800851e:	461d      	movlt	r5, r3
 8008520:	2300      	movge	r3, #0
 8008522:	232d      	movlt	r3, #45	; 0x2d
 8008524:	700b      	strb	r3, [r1, #0]
 8008526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008528:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800852c:	4691      	mov	r9, r2
 800852e:	f023 0820 	bic.w	r8, r3, #32
 8008532:	bfbc      	itt	lt
 8008534:	4622      	movlt	r2, r4
 8008536:	4614      	movlt	r4, r2
 8008538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800853c:	d005      	beq.n	800854a <__cvt+0x42>
 800853e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008542:	d100      	bne.n	8008546 <__cvt+0x3e>
 8008544:	3601      	adds	r6, #1
 8008546:	2102      	movs	r1, #2
 8008548:	e000      	b.n	800854c <__cvt+0x44>
 800854a:	2103      	movs	r1, #3
 800854c:	ab03      	add	r3, sp, #12
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	ab02      	add	r3, sp, #8
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	ec45 4b10 	vmov	d0, r4, r5
 8008558:	4653      	mov	r3, sl
 800855a:	4632      	mov	r2, r6
 800855c:	f000 fe00 	bl	8009160 <_dtoa_r>
 8008560:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008564:	4607      	mov	r7, r0
 8008566:	d102      	bne.n	800856e <__cvt+0x66>
 8008568:	f019 0f01 	tst.w	r9, #1
 800856c:	d022      	beq.n	80085b4 <__cvt+0xac>
 800856e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008572:	eb07 0906 	add.w	r9, r7, r6
 8008576:	d110      	bne.n	800859a <__cvt+0x92>
 8008578:	783b      	ldrb	r3, [r7, #0]
 800857a:	2b30      	cmp	r3, #48	; 0x30
 800857c:	d10a      	bne.n	8008594 <__cvt+0x8c>
 800857e:	2200      	movs	r2, #0
 8008580:	2300      	movs	r3, #0
 8008582:	4620      	mov	r0, r4
 8008584:	4629      	mov	r1, r5
 8008586:	f7f8 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800858a:	b918      	cbnz	r0, 8008594 <__cvt+0x8c>
 800858c:	f1c6 0601 	rsb	r6, r6, #1
 8008590:	f8ca 6000 	str.w	r6, [sl]
 8008594:	f8da 3000 	ldr.w	r3, [sl]
 8008598:	4499      	add	r9, r3
 800859a:	2200      	movs	r2, #0
 800859c:	2300      	movs	r3, #0
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	f7f8 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a6:	b108      	cbz	r0, 80085ac <__cvt+0xa4>
 80085a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80085ac:	2230      	movs	r2, #48	; 0x30
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	454b      	cmp	r3, r9
 80085b2:	d307      	bcc.n	80085c4 <__cvt+0xbc>
 80085b4:	9b03      	ldr	r3, [sp, #12]
 80085b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085b8:	1bdb      	subs	r3, r3, r7
 80085ba:	4638      	mov	r0, r7
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	b004      	add	sp, #16
 80085c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c4:	1c59      	adds	r1, r3, #1
 80085c6:	9103      	str	r1, [sp, #12]
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e7f0      	b.n	80085ae <__cvt+0xa6>

080085cc <__exponent>:
 80085cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ce:	4603      	mov	r3, r0
 80085d0:	2900      	cmp	r1, #0
 80085d2:	bfb8      	it	lt
 80085d4:	4249      	neglt	r1, r1
 80085d6:	f803 2b02 	strb.w	r2, [r3], #2
 80085da:	bfb4      	ite	lt
 80085dc:	222d      	movlt	r2, #45	; 0x2d
 80085de:	222b      	movge	r2, #43	; 0x2b
 80085e0:	2909      	cmp	r1, #9
 80085e2:	7042      	strb	r2, [r0, #1]
 80085e4:	dd2a      	ble.n	800863c <__exponent+0x70>
 80085e6:	f10d 0407 	add.w	r4, sp, #7
 80085ea:	46a4      	mov	ip, r4
 80085ec:	270a      	movs	r7, #10
 80085ee:	46a6      	mov	lr, r4
 80085f0:	460a      	mov	r2, r1
 80085f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80085f6:	fb07 1516 	mls	r5, r7, r6, r1
 80085fa:	3530      	adds	r5, #48	; 0x30
 80085fc:	2a63      	cmp	r2, #99	; 0x63
 80085fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8008602:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008606:	4631      	mov	r1, r6
 8008608:	dcf1      	bgt.n	80085ee <__exponent+0x22>
 800860a:	3130      	adds	r1, #48	; 0x30
 800860c:	f1ae 0502 	sub.w	r5, lr, #2
 8008610:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008614:	1c44      	adds	r4, r0, #1
 8008616:	4629      	mov	r1, r5
 8008618:	4561      	cmp	r1, ip
 800861a:	d30a      	bcc.n	8008632 <__exponent+0x66>
 800861c:	f10d 0209 	add.w	r2, sp, #9
 8008620:	eba2 020e 	sub.w	r2, r2, lr
 8008624:	4565      	cmp	r5, ip
 8008626:	bf88      	it	hi
 8008628:	2200      	movhi	r2, #0
 800862a:	4413      	add	r3, r2
 800862c:	1a18      	subs	r0, r3, r0
 800862e:	b003      	add	sp, #12
 8008630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008636:	f804 2f01 	strb.w	r2, [r4, #1]!
 800863a:	e7ed      	b.n	8008618 <__exponent+0x4c>
 800863c:	2330      	movs	r3, #48	; 0x30
 800863e:	3130      	adds	r1, #48	; 0x30
 8008640:	7083      	strb	r3, [r0, #2]
 8008642:	70c1      	strb	r1, [r0, #3]
 8008644:	1d03      	adds	r3, r0, #4
 8008646:	e7f1      	b.n	800862c <__exponent+0x60>

08008648 <_printf_float>:
 8008648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	ed2d 8b02 	vpush	{d8}
 8008650:	b08d      	sub	sp, #52	; 0x34
 8008652:	460c      	mov	r4, r1
 8008654:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008658:	4616      	mov	r6, r2
 800865a:	461f      	mov	r7, r3
 800865c:	4605      	mov	r5, r0
 800865e:	f001 fd25 	bl	800a0ac <_localeconv_r>
 8008662:	f8d0 a000 	ldr.w	sl, [r0]
 8008666:	4650      	mov	r0, sl
 8008668:	f7f7 fdb2 	bl	80001d0 <strlen>
 800866c:	2300      	movs	r3, #0
 800866e:	930a      	str	r3, [sp, #40]	; 0x28
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	f8d8 3000 	ldr.w	r3, [r8]
 8008678:	f894 b018 	ldrb.w	fp, [r4, #24]
 800867c:	3307      	adds	r3, #7
 800867e:	f023 0307 	bic.w	r3, r3, #7
 8008682:	f103 0208 	add.w	r2, r3, #8
 8008686:	f8c8 2000 	str.w	r2, [r8]
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008692:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008696:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800869a:	9307      	str	r3, [sp, #28]
 800869c:	f8cd 8018 	str.w	r8, [sp, #24]
 80086a0:	ee08 0a10 	vmov	s16, r0
 80086a4:	4b9f      	ldr	r3, [pc, #636]	; (8008924 <_printf_float+0x2dc>)
 80086a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295
 80086ae:	f7f8 fa3d 	bl	8000b2c <__aeabi_dcmpun>
 80086b2:	bb88      	cbnz	r0, 8008718 <_printf_float+0xd0>
 80086b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086b8:	4b9a      	ldr	r3, [pc, #616]	; (8008924 <_printf_float+0x2dc>)
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	f7f8 fa17 	bl	8000af0 <__aeabi_dcmple>
 80086c2:	bb48      	cbnz	r0, 8008718 <_printf_float+0xd0>
 80086c4:	2200      	movs	r2, #0
 80086c6:	2300      	movs	r3, #0
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f8 fa06 	bl	8000adc <__aeabi_dcmplt>
 80086d0:	b110      	cbz	r0, 80086d8 <_printf_float+0x90>
 80086d2:	232d      	movs	r3, #45	; 0x2d
 80086d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d8:	4b93      	ldr	r3, [pc, #588]	; (8008928 <_printf_float+0x2e0>)
 80086da:	4894      	ldr	r0, [pc, #592]	; (800892c <_printf_float+0x2e4>)
 80086dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086e0:	bf94      	ite	ls
 80086e2:	4698      	movls	r8, r3
 80086e4:	4680      	movhi	r8, r0
 80086e6:	2303      	movs	r3, #3
 80086e8:	6123      	str	r3, [r4, #16]
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	f023 0204 	bic.w	r2, r3, #4
 80086f0:	6022      	str	r2, [r4, #0]
 80086f2:	f04f 0900 	mov.w	r9, #0
 80086f6:	9700      	str	r7, [sp, #0]
 80086f8:	4633      	mov	r3, r6
 80086fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80086fc:	4621      	mov	r1, r4
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f9d8 	bl	8008ab4 <_printf_common>
 8008704:	3001      	adds	r0, #1
 8008706:	f040 8090 	bne.w	800882a <_printf_float+0x1e2>
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	b00d      	add	sp, #52	; 0x34
 8008710:	ecbd 8b02 	vpop	{d8}
 8008714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 fa04 	bl	8000b2c <__aeabi_dcmpun>
 8008724:	b140      	cbz	r0, 8008738 <_printf_float+0xf0>
 8008726:	464b      	mov	r3, r9
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfbc      	itt	lt
 800872c:	232d      	movlt	r3, #45	; 0x2d
 800872e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008732:	487f      	ldr	r0, [pc, #508]	; (8008930 <_printf_float+0x2e8>)
 8008734:	4b7f      	ldr	r3, [pc, #508]	; (8008934 <_printf_float+0x2ec>)
 8008736:	e7d1      	b.n	80086dc <_printf_float+0x94>
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800873e:	9206      	str	r2, [sp, #24]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	d13f      	bne.n	80087c4 <_printf_float+0x17c>
 8008744:	2306      	movs	r3, #6
 8008746:	6063      	str	r3, [r4, #4]
 8008748:	9b05      	ldr	r3, [sp, #20]
 800874a:	6861      	ldr	r1, [r4, #4]
 800874c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008750:	2300      	movs	r3, #0
 8008752:	9303      	str	r3, [sp, #12]
 8008754:	ab0a      	add	r3, sp, #40	; 0x28
 8008756:	e9cd b301 	strd	fp, r3, [sp, #4]
 800875a:	ab09      	add	r3, sp, #36	; 0x24
 800875c:	ec49 8b10 	vmov	d0, r8, r9
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	6022      	str	r2, [r4, #0]
 8008764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008768:	4628      	mov	r0, r5
 800876a:	f7ff fecd 	bl	8008508 <__cvt>
 800876e:	9b06      	ldr	r3, [sp, #24]
 8008770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008772:	2b47      	cmp	r3, #71	; 0x47
 8008774:	4680      	mov	r8, r0
 8008776:	d108      	bne.n	800878a <_printf_float+0x142>
 8008778:	1cc8      	adds	r0, r1, #3
 800877a:	db02      	blt.n	8008782 <_printf_float+0x13a>
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	4299      	cmp	r1, r3
 8008780:	dd41      	ble.n	8008806 <_printf_float+0x1be>
 8008782:	f1ab 0b02 	sub.w	fp, fp, #2
 8008786:	fa5f fb8b 	uxtb.w	fp, fp
 800878a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800878e:	d820      	bhi.n	80087d2 <_printf_float+0x18a>
 8008790:	3901      	subs	r1, #1
 8008792:	465a      	mov	r2, fp
 8008794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008798:	9109      	str	r1, [sp, #36]	; 0x24
 800879a:	f7ff ff17 	bl	80085cc <__exponent>
 800879e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a0:	1813      	adds	r3, r2, r0
 80087a2:	2a01      	cmp	r2, #1
 80087a4:	4681      	mov	r9, r0
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	dc02      	bgt.n	80087b0 <_printf_float+0x168>
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	07d2      	lsls	r2, r2, #31
 80087ae:	d501      	bpl.n	80087b4 <_printf_float+0x16c>
 80087b0:	3301      	adds	r3, #1
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d09c      	beq.n	80086f6 <_printf_float+0xae>
 80087bc:	232d      	movs	r3, #45	; 0x2d
 80087be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c2:	e798      	b.n	80086f6 <_printf_float+0xae>
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	2a47      	cmp	r2, #71	; 0x47
 80087c8:	d1be      	bne.n	8008748 <_printf_float+0x100>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1bc      	bne.n	8008748 <_printf_float+0x100>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e7b9      	b.n	8008746 <_printf_float+0xfe>
 80087d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087d6:	d118      	bne.n	800880a <_printf_float+0x1c2>
 80087d8:	2900      	cmp	r1, #0
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	dd0b      	ble.n	80087f6 <_printf_float+0x1ae>
 80087de:	6121      	str	r1, [r4, #16]
 80087e0:	b913      	cbnz	r3, 80087e8 <_printf_float+0x1a0>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	07d0      	lsls	r0, r2, #31
 80087e6:	d502      	bpl.n	80087ee <_printf_float+0x1a6>
 80087e8:	3301      	adds	r3, #1
 80087ea:	440b      	add	r3, r1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80087f0:	f04f 0900 	mov.w	r9, #0
 80087f4:	e7de      	b.n	80087b4 <_printf_float+0x16c>
 80087f6:	b913      	cbnz	r3, 80087fe <_printf_float+0x1b6>
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	07d2      	lsls	r2, r2, #31
 80087fc:	d501      	bpl.n	8008802 <_printf_float+0x1ba>
 80087fe:	3302      	adds	r3, #2
 8008800:	e7f4      	b.n	80087ec <_printf_float+0x1a4>
 8008802:	2301      	movs	r3, #1
 8008804:	e7f2      	b.n	80087ec <_printf_float+0x1a4>
 8008806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800880a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880c:	4299      	cmp	r1, r3
 800880e:	db05      	blt.n	800881c <_printf_float+0x1d4>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	6121      	str	r1, [r4, #16]
 8008814:	07d8      	lsls	r0, r3, #31
 8008816:	d5ea      	bpl.n	80087ee <_printf_float+0x1a6>
 8008818:	1c4b      	adds	r3, r1, #1
 800881a:	e7e7      	b.n	80087ec <_printf_float+0x1a4>
 800881c:	2900      	cmp	r1, #0
 800881e:	bfd4      	ite	le
 8008820:	f1c1 0202 	rsble	r2, r1, #2
 8008824:	2201      	movgt	r2, #1
 8008826:	4413      	add	r3, r2
 8008828:	e7e0      	b.n	80087ec <_printf_float+0x1a4>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	055a      	lsls	r2, r3, #21
 800882e:	d407      	bmi.n	8008840 <_printf_float+0x1f8>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	4642      	mov	r2, r8
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	d12c      	bne.n	8008898 <_printf_float+0x250>
 800883e:	e764      	b.n	800870a <_printf_float+0xc2>
 8008840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008844:	f240 80e0 	bls.w	8008a08 <_printf_float+0x3c0>
 8008848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800884c:	2200      	movs	r2, #0
 800884e:	2300      	movs	r3, #0
 8008850:	f7f8 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008854:	2800      	cmp	r0, #0
 8008856:	d034      	beq.n	80088c2 <_printf_float+0x27a>
 8008858:	4a37      	ldr	r2, [pc, #220]	; (8008938 <_printf_float+0x2f0>)
 800885a:	2301      	movs	r3, #1
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	f43f af51 	beq.w	800870a <_printf_float+0xc2>
 8008868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800886c:	429a      	cmp	r2, r3
 800886e:	db02      	blt.n	8008876 <_printf_float+0x22e>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07d8      	lsls	r0, r3, #31
 8008874:	d510      	bpl.n	8008898 <_printf_float+0x250>
 8008876:	ee18 3a10 	vmov	r3, s16
 800887a:	4652      	mov	r2, sl
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f af41 	beq.w	800870a <_printf_float+0xc2>
 8008888:	f04f 0800 	mov.w	r8, #0
 800888c:	f104 091a 	add.w	r9, r4, #26
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	4543      	cmp	r3, r8
 8008896:	dc09      	bgt.n	80088ac <_printf_float+0x264>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	079b      	lsls	r3, r3, #30
 800889c:	f100 8105 	bmi.w	8008aaa <_printf_float+0x462>
 80088a0:	68e0      	ldr	r0, [r4, #12]
 80088a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a4:	4298      	cmp	r0, r3
 80088a6:	bfb8      	it	lt
 80088a8:	4618      	movlt	r0, r3
 80088aa:	e730      	b.n	800870e <_printf_float+0xc6>
 80088ac:	2301      	movs	r3, #1
 80088ae:	464a      	mov	r2, r9
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	f43f af27 	beq.w	800870a <_printf_float+0xc2>
 80088bc:	f108 0801 	add.w	r8, r8, #1
 80088c0:	e7e6      	b.n	8008890 <_printf_float+0x248>
 80088c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dc39      	bgt.n	800893c <_printf_float+0x2f4>
 80088c8:	4a1b      	ldr	r2, [pc, #108]	; (8008938 <_printf_float+0x2f0>)
 80088ca:	2301      	movs	r3, #1
 80088cc:	4631      	mov	r1, r6
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b8      	blx	r7
 80088d2:	3001      	adds	r0, #1
 80088d4:	f43f af19 	beq.w	800870a <_printf_float+0xc2>
 80088d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088dc:	4313      	orrs	r3, r2
 80088de:	d102      	bne.n	80088e6 <_printf_float+0x29e>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	07d9      	lsls	r1, r3, #31
 80088e4:	d5d8      	bpl.n	8008898 <_printf_float+0x250>
 80088e6:	ee18 3a10 	vmov	r3, s16
 80088ea:	4652      	mov	r2, sl
 80088ec:	4631      	mov	r1, r6
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f af09 	beq.w	800870a <_printf_float+0xc2>
 80088f8:	f04f 0900 	mov.w	r9, #0
 80088fc:	f104 0a1a 	add.w	sl, r4, #26
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	425b      	negs	r3, r3
 8008904:	454b      	cmp	r3, r9
 8008906:	dc01      	bgt.n	800890c <_printf_float+0x2c4>
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	e792      	b.n	8008832 <_printf_float+0x1ea>
 800890c:	2301      	movs	r3, #1
 800890e:	4652      	mov	r2, sl
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f aef7 	beq.w	800870a <_printf_float+0xc2>
 800891c:	f109 0901 	add.w	r9, r9, #1
 8008920:	e7ee      	b.n	8008900 <_printf_float+0x2b8>
 8008922:	bf00      	nop
 8008924:	7fefffff 	.word	0x7fefffff
 8008928:	0800b124 	.word	0x0800b124
 800892c:	0800b128 	.word	0x0800b128
 8008930:	0800b130 	.word	0x0800b130
 8008934:	0800b12c 	.word	0x0800b12c
 8008938:	0800b134 	.word	0x0800b134
 800893c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008940:	429a      	cmp	r2, r3
 8008942:	bfa8      	it	ge
 8008944:	461a      	movge	r2, r3
 8008946:	2a00      	cmp	r2, #0
 8008948:	4691      	mov	r9, r2
 800894a:	dc37      	bgt.n	80089bc <_printf_float+0x374>
 800894c:	f04f 0b00 	mov.w	fp, #0
 8008950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008954:	f104 021a 	add.w	r2, r4, #26
 8008958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800895a:	9305      	str	r3, [sp, #20]
 800895c:	eba3 0309 	sub.w	r3, r3, r9
 8008960:	455b      	cmp	r3, fp
 8008962:	dc33      	bgt.n	80089cc <_printf_float+0x384>
 8008964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008968:	429a      	cmp	r2, r3
 800896a:	db3b      	blt.n	80089e4 <_printf_float+0x39c>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	07da      	lsls	r2, r3, #31
 8008970:	d438      	bmi.n	80089e4 <_printf_float+0x39c>
 8008972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008974:	9a05      	ldr	r2, [sp, #20]
 8008976:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008978:	1a9a      	subs	r2, r3, r2
 800897a:	eba3 0901 	sub.w	r9, r3, r1
 800897e:	4591      	cmp	r9, r2
 8008980:	bfa8      	it	ge
 8008982:	4691      	movge	r9, r2
 8008984:	f1b9 0f00 	cmp.w	r9, #0
 8008988:	dc35      	bgt.n	80089f6 <_printf_float+0x3ae>
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008992:	f104 0a1a 	add.w	sl, r4, #26
 8008996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	eba3 0309 	sub.w	r3, r3, r9
 80089a0:	4543      	cmp	r3, r8
 80089a2:	f77f af79 	ble.w	8008898 <_printf_float+0x250>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4652      	mov	r2, sl
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	f43f aeaa 	beq.w	800870a <_printf_float+0xc2>
 80089b6:	f108 0801 	add.w	r8, r8, #1
 80089ba:	e7ec      	b.n	8008996 <_printf_float+0x34e>
 80089bc:	4613      	mov	r3, r2
 80089be:	4631      	mov	r1, r6
 80089c0:	4642      	mov	r2, r8
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b8      	blx	r7
 80089c6:	3001      	adds	r0, #1
 80089c8:	d1c0      	bne.n	800894c <_printf_float+0x304>
 80089ca:	e69e      	b.n	800870a <_printf_float+0xc2>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	9205      	str	r2, [sp, #20]
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f ae97 	beq.w	800870a <_printf_float+0xc2>
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	f10b 0b01 	add.w	fp, fp, #1
 80089e2:	e7b9      	b.n	8008958 <_printf_float+0x310>
 80089e4:	ee18 3a10 	vmov	r3, s16
 80089e8:	4652      	mov	r2, sl
 80089ea:	4631      	mov	r1, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b8      	blx	r7
 80089f0:	3001      	adds	r0, #1
 80089f2:	d1be      	bne.n	8008972 <_printf_float+0x32a>
 80089f4:	e689      	b.n	800870a <_printf_float+0xc2>
 80089f6:	9a05      	ldr	r2, [sp, #20]
 80089f8:	464b      	mov	r3, r9
 80089fa:	4442      	add	r2, r8
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	d1c1      	bne.n	800898a <_printf_float+0x342>
 8008a06:	e680      	b.n	800870a <_printf_float+0xc2>
 8008a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a0a:	2a01      	cmp	r2, #1
 8008a0c:	dc01      	bgt.n	8008a12 <_printf_float+0x3ca>
 8008a0e:	07db      	lsls	r3, r3, #31
 8008a10:	d538      	bpl.n	8008a84 <_printf_float+0x43c>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4642      	mov	r2, r8
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f ae74 	beq.w	800870a <_printf_float+0xc2>
 8008a22:	ee18 3a10 	vmov	r3, s16
 8008a26:	4652      	mov	r2, sl
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b8      	blx	r7
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f43f ae6b 	beq.w	800870a <_printf_float+0xc2>
 8008a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f7f8 f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a40:	b9d8      	cbnz	r0, 8008a7a <_printf_float+0x432>
 8008a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a44:	f108 0201 	add.w	r2, r8, #1
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	d10e      	bne.n	8008a72 <_printf_float+0x42a>
 8008a54:	e659      	b.n	800870a <_printf_float+0xc2>
 8008a56:	2301      	movs	r3, #1
 8008a58:	4652      	mov	r2, sl
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	f43f ae52 	beq.w	800870a <_printf_float+0xc2>
 8008a66:	f108 0801 	add.w	r8, r8, #1
 8008a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	4543      	cmp	r3, r8
 8008a70:	dcf1      	bgt.n	8008a56 <_printf_float+0x40e>
 8008a72:	464b      	mov	r3, r9
 8008a74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a78:	e6dc      	b.n	8008834 <_printf_float+0x1ec>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	f104 0a1a 	add.w	sl, r4, #26
 8008a82:	e7f2      	b.n	8008a6a <_printf_float+0x422>
 8008a84:	2301      	movs	r3, #1
 8008a86:	4642      	mov	r2, r8
 8008a88:	e7df      	b.n	8008a4a <_printf_float+0x402>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	464a      	mov	r2, r9
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	f43f ae38 	beq.w	800870a <_printf_float+0xc2>
 8008a9a:	f108 0801 	add.w	r8, r8, #1
 8008a9e:	68e3      	ldr	r3, [r4, #12]
 8008aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aa2:	1a5b      	subs	r3, r3, r1
 8008aa4:	4543      	cmp	r3, r8
 8008aa6:	dcf0      	bgt.n	8008a8a <_printf_float+0x442>
 8008aa8:	e6fa      	b.n	80088a0 <_printf_float+0x258>
 8008aaa:	f04f 0800 	mov.w	r8, #0
 8008aae:	f104 0919 	add.w	r9, r4, #25
 8008ab2:	e7f4      	b.n	8008a9e <_printf_float+0x456>

08008ab4 <_printf_common>:
 8008ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	4616      	mov	r6, r2
 8008aba:	4699      	mov	r9, r3
 8008abc:	688a      	ldr	r2, [r1, #8]
 8008abe:	690b      	ldr	r3, [r1, #16]
 8008ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	bfb8      	it	lt
 8008ac8:	4613      	movlt	r3, r2
 8008aca:	6033      	str	r3, [r6, #0]
 8008acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	b10a      	cbz	r2, 8008ada <_printf_common+0x26>
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	6033      	str	r3, [r6, #0]
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	0699      	lsls	r1, r3, #26
 8008ade:	bf42      	ittt	mi
 8008ae0:	6833      	ldrmi	r3, [r6, #0]
 8008ae2:	3302      	addmi	r3, #2
 8008ae4:	6033      	strmi	r3, [r6, #0]
 8008ae6:	6825      	ldr	r5, [r4, #0]
 8008ae8:	f015 0506 	ands.w	r5, r5, #6
 8008aec:	d106      	bne.n	8008afc <_printf_common+0x48>
 8008aee:	f104 0a19 	add.w	sl, r4, #25
 8008af2:	68e3      	ldr	r3, [r4, #12]
 8008af4:	6832      	ldr	r2, [r6, #0]
 8008af6:	1a9b      	subs	r3, r3, r2
 8008af8:	42ab      	cmp	r3, r5
 8008afa:	dc26      	bgt.n	8008b4a <_printf_common+0x96>
 8008afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b00:	1e13      	subs	r3, r2, #0
 8008b02:	6822      	ldr	r2, [r4, #0]
 8008b04:	bf18      	it	ne
 8008b06:	2301      	movne	r3, #1
 8008b08:	0692      	lsls	r2, r2, #26
 8008b0a:	d42b      	bmi.n	8008b64 <_printf_common+0xb0>
 8008b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b10:	4649      	mov	r1, r9
 8008b12:	4638      	mov	r0, r7
 8008b14:	47c0      	blx	r8
 8008b16:	3001      	adds	r0, #1
 8008b18:	d01e      	beq.n	8008b58 <_printf_common+0xa4>
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	68e5      	ldr	r5, [r4, #12]
 8008b1e:	6832      	ldr	r2, [r6, #0]
 8008b20:	f003 0306 	and.w	r3, r3, #6
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	bf08      	it	eq
 8008b28:	1aad      	subeq	r5, r5, r2
 8008b2a:	68a3      	ldr	r3, [r4, #8]
 8008b2c:	6922      	ldr	r2, [r4, #16]
 8008b2e:	bf0c      	ite	eq
 8008b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b34:	2500      	movne	r5, #0
 8008b36:	4293      	cmp	r3, r2
 8008b38:	bfc4      	itt	gt
 8008b3a:	1a9b      	subgt	r3, r3, r2
 8008b3c:	18ed      	addgt	r5, r5, r3
 8008b3e:	2600      	movs	r6, #0
 8008b40:	341a      	adds	r4, #26
 8008b42:	42b5      	cmp	r5, r6
 8008b44:	d11a      	bne.n	8008b7c <_printf_common+0xc8>
 8008b46:	2000      	movs	r0, #0
 8008b48:	e008      	b.n	8008b5c <_printf_common+0xa8>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4652      	mov	r2, sl
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4638      	mov	r0, r7
 8008b52:	47c0      	blx	r8
 8008b54:	3001      	adds	r0, #1
 8008b56:	d103      	bne.n	8008b60 <_printf_common+0xac>
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b60:	3501      	adds	r5, #1
 8008b62:	e7c6      	b.n	8008af2 <_printf_common+0x3e>
 8008b64:	18e1      	adds	r1, r4, r3
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	2030      	movs	r0, #48	; 0x30
 8008b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b6e:	4422      	add	r2, r4
 8008b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b78:	3302      	adds	r3, #2
 8008b7a:	e7c7      	b.n	8008b0c <_printf_common+0x58>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4622      	mov	r2, r4
 8008b80:	4649      	mov	r1, r9
 8008b82:	4638      	mov	r0, r7
 8008b84:	47c0      	blx	r8
 8008b86:	3001      	adds	r0, #1
 8008b88:	d0e6      	beq.n	8008b58 <_printf_common+0xa4>
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7d9      	b.n	8008b42 <_printf_common+0x8e>
	...

08008b90 <_printf_i>:
 8008b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	7e0f      	ldrb	r7, [r1, #24]
 8008b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b98:	2f78      	cmp	r7, #120	; 0x78
 8008b9a:	4691      	mov	r9, r2
 8008b9c:	4680      	mov	r8, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	469a      	mov	sl, r3
 8008ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ba6:	d807      	bhi.n	8008bb8 <_printf_i+0x28>
 8008ba8:	2f62      	cmp	r7, #98	; 0x62
 8008baa:	d80a      	bhi.n	8008bc2 <_printf_i+0x32>
 8008bac:	2f00      	cmp	r7, #0
 8008bae:	f000 80d8 	beq.w	8008d62 <_printf_i+0x1d2>
 8008bb2:	2f58      	cmp	r7, #88	; 0x58
 8008bb4:	f000 80a3 	beq.w	8008cfe <_printf_i+0x16e>
 8008bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bc0:	e03a      	b.n	8008c38 <_printf_i+0xa8>
 8008bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bc6:	2b15      	cmp	r3, #21
 8008bc8:	d8f6      	bhi.n	8008bb8 <_printf_i+0x28>
 8008bca:	a101      	add	r1, pc, #4	; (adr r1, 8008bd0 <_printf_i+0x40>)
 8008bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bd0:	08008c29 	.word	0x08008c29
 8008bd4:	08008c3d 	.word	0x08008c3d
 8008bd8:	08008bb9 	.word	0x08008bb9
 8008bdc:	08008bb9 	.word	0x08008bb9
 8008be0:	08008bb9 	.word	0x08008bb9
 8008be4:	08008bb9 	.word	0x08008bb9
 8008be8:	08008c3d 	.word	0x08008c3d
 8008bec:	08008bb9 	.word	0x08008bb9
 8008bf0:	08008bb9 	.word	0x08008bb9
 8008bf4:	08008bb9 	.word	0x08008bb9
 8008bf8:	08008bb9 	.word	0x08008bb9
 8008bfc:	08008d49 	.word	0x08008d49
 8008c00:	08008c6d 	.word	0x08008c6d
 8008c04:	08008d2b 	.word	0x08008d2b
 8008c08:	08008bb9 	.word	0x08008bb9
 8008c0c:	08008bb9 	.word	0x08008bb9
 8008c10:	08008d6b 	.word	0x08008d6b
 8008c14:	08008bb9 	.word	0x08008bb9
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008bb9 	.word	0x08008bb9
 8008c20:	08008bb9 	.word	0x08008bb9
 8008c24:	08008d33 	.word	0x08008d33
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	1d1a      	adds	r2, r3, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	602a      	str	r2, [r5, #0]
 8008c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e0a3      	b.n	8008d84 <_printf_i+0x1f4>
 8008c3c:	6820      	ldr	r0, [r4, #0]
 8008c3e:	6829      	ldr	r1, [r5, #0]
 8008c40:	0606      	lsls	r6, r0, #24
 8008c42:	f101 0304 	add.w	r3, r1, #4
 8008c46:	d50a      	bpl.n	8008c5e <_printf_i+0xce>
 8008c48:	680e      	ldr	r6, [r1, #0]
 8008c4a:	602b      	str	r3, [r5, #0]
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	da03      	bge.n	8008c58 <_printf_i+0xc8>
 8008c50:	232d      	movs	r3, #45	; 0x2d
 8008c52:	4276      	negs	r6, r6
 8008c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c58:	485e      	ldr	r0, [pc, #376]	; (8008dd4 <_printf_i+0x244>)
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	e019      	b.n	8008c92 <_printf_i+0x102>
 8008c5e:	680e      	ldr	r6, [r1, #0]
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c66:	bf18      	it	ne
 8008c68:	b236      	sxthne	r6, r6
 8008c6a:	e7ef      	b.n	8008c4c <_printf_i+0xbc>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	6820      	ldr	r0, [r4, #0]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	6029      	str	r1, [r5, #0]
 8008c74:	0601      	lsls	r1, r0, #24
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0xec>
 8008c78:	681e      	ldr	r6, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <_printf_i+0xf2>
 8008c7c:	0646      	lsls	r6, r0, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0xe8>
 8008c80:	881e      	ldrh	r6, [r3, #0]
 8008c82:	4854      	ldr	r0, [pc, #336]	; (8008dd4 <_printf_i+0x244>)
 8008c84:	2f6f      	cmp	r7, #111	; 0x6f
 8008c86:	bf0c      	ite	eq
 8008c88:	2308      	moveq	r3, #8
 8008c8a:	230a      	movne	r3, #10
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c92:	6865      	ldr	r5, [r4, #4]
 8008c94:	60a5      	str	r5, [r4, #8]
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	bfa2      	ittt	ge
 8008c9a:	6821      	ldrge	r1, [r4, #0]
 8008c9c:	f021 0104 	bicge.w	r1, r1, #4
 8008ca0:	6021      	strge	r1, [r4, #0]
 8008ca2:	b90e      	cbnz	r6, 8008ca8 <_printf_i+0x118>
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	d04d      	beq.n	8008d44 <_printf_i+0x1b4>
 8008ca8:	4615      	mov	r5, r2
 8008caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cae:	fb03 6711 	mls	r7, r3, r1, r6
 8008cb2:	5dc7      	ldrb	r7, [r0, r7]
 8008cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cb8:	4637      	mov	r7, r6
 8008cba:	42bb      	cmp	r3, r7
 8008cbc:	460e      	mov	r6, r1
 8008cbe:	d9f4      	bls.n	8008caa <_printf_i+0x11a>
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d10b      	bne.n	8008cdc <_printf_i+0x14c>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	07de      	lsls	r6, r3, #31
 8008cc8:	d508      	bpl.n	8008cdc <_printf_i+0x14c>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	6861      	ldr	r1, [r4, #4]
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	bfde      	ittt	le
 8008cd2:	2330      	movle	r3, #48	; 0x30
 8008cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cdc:	1b52      	subs	r2, r2, r5
 8008cde:	6122      	str	r2, [r4, #16]
 8008ce0:	f8cd a000 	str.w	sl, [sp]
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	aa03      	add	r2, sp, #12
 8008ce8:	4621      	mov	r1, r4
 8008cea:	4640      	mov	r0, r8
 8008cec:	f7ff fee2 	bl	8008ab4 <_printf_common>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d14c      	bne.n	8008d8e <_printf_i+0x1fe>
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	b004      	add	sp, #16
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	4835      	ldr	r0, [pc, #212]	; (8008dd4 <_printf_i+0x244>)
 8008d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d04:	6829      	ldr	r1, [r5, #0]
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d0c:	6029      	str	r1, [r5, #0]
 8008d0e:	061d      	lsls	r5, r3, #24
 8008d10:	d514      	bpl.n	8008d3c <_printf_i+0x1ac>
 8008d12:	07df      	lsls	r7, r3, #31
 8008d14:	bf44      	itt	mi
 8008d16:	f043 0320 	orrmi.w	r3, r3, #32
 8008d1a:	6023      	strmi	r3, [r4, #0]
 8008d1c:	b91e      	cbnz	r6, 8008d26 <_printf_i+0x196>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	f023 0320 	bic.w	r3, r3, #32
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	2310      	movs	r3, #16
 8008d28:	e7b0      	b.n	8008c8c <_printf_i+0xfc>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	f043 0320 	orr.w	r3, r3, #32
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	2378      	movs	r3, #120	; 0x78
 8008d34:	4828      	ldr	r0, [pc, #160]	; (8008dd8 <_printf_i+0x248>)
 8008d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d3a:	e7e3      	b.n	8008d04 <_printf_i+0x174>
 8008d3c:	0659      	lsls	r1, r3, #25
 8008d3e:	bf48      	it	mi
 8008d40:	b2b6      	uxthmi	r6, r6
 8008d42:	e7e6      	b.n	8008d12 <_printf_i+0x182>
 8008d44:	4615      	mov	r5, r2
 8008d46:	e7bb      	b.n	8008cc0 <_printf_i+0x130>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	6826      	ldr	r6, [r4, #0]
 8008d4c:	6961      	ldr	r1, [r4, #20]
 8008d4e:	1d18      	adds	r0, r3, #4
 8008d50:	6028      	str	r0, [r5, #0]
 8008d52:	0635      	lsls	r5, r6, #24
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	d501      	bpl.n	8008d5c <_printf_i+0x1cc>
 8008d58:	6019      	str	r1, [r3, #0]
 8008d5a:	e002      	b.n	8008d62 <_printf_i+0x1d2>
 8008d5c:	0670      	lsls	r0, r6, #25
 8008d5e:	d5fb      	bpl.n	8008d58 <_printf_i+0x1c8>
 8008d60:	8019      	strh	r1, [r3, #0]
 8008d62:	2300      	movs	r3, #0
 8008d64:	6123      	str	r3, [r4, #16]
 8008d66:	4615      	mov	r5, r2
 8008d68:	e7ba      	b.n	8008ce0 <_printf_i+0x150>
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	1d1a      	adds	r2, r3, #4
 8008d6e:	602a      	str	r2, [r5, #0]
 8008d70:	681d      	ldr	r5, [r3, #0]
 8008d72:	6862      	ldr	r2, [r4, #4]
 8008d74:	2100      	movs	r1, #0
 8008d76:	4628      	mov	r0, r5
 8008d78:	f7f7 fa32 	bl	80001e0 <memchr>
 8008d7c:	b108      	cbz	r0, 8008d82 <_printf_i+0x1f2>
 8008d7e:	1b40      	subs	r0, r0, r5
 8008d80:	6060      	str	r0, [r4, #4]
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	6123      	str	r3, [r4, #16]
 8008d86:	2300      	movs	r3, #0
 8008d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8c:	e7a8      	b.n	8008ce0 <_printf_i+0x150>
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	462a      	mov	r2, r5
 8008d92:	4649      	mov	r1, r9
 8008d94:	4640      	mov	r0, r8
 8008d96:	47d0      	blx	sl
 8008d98:	3001      	adds	r0, #1
 8008d9a:	d0ab      	beq.n	8008cf4 <_printf_i+0x164>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	079b      	lsls	r3, r3, #30
 8008da0:	d413      	bmi.n	8008dca <_printf_i+0x23a>
 8008da2:	68e0      	ldr	r0, [r4, #12]
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	4298      	cmp	r0, r3
 8008da8:	bfb8      	it	lt
 8008daa:	4618      	movlt	r0, r3
 8008dac:	e7a4      	b.n	8008cf8 <_printf_i+0x168>
 8008dae:	2301      	movs	r3, #1
 8008db0:	4632      	mov	r2, r6
 8008db2:	4649      	mov	r1, r9
 8008db4:	4640      	mov	r0, r8
 8008db6:	47d0      	blx	sl
 8008db8:	3001      	adds	r0, #1
 8008dba:	d09b      	beq.n	8008cf4 <_printf_i+0x164>
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	9903      	ldr	r1, [sp, #12]
 8008dc2:	1a5b      	subs	r3, r3, r1
 8008dc4:	42ab      	cmp	r3, r5
 8008dc6:	dcf2      	bgt.n	8008dae <_printf_i+0x21e>
 8008dc8:	e7eb      	b.n	8008da2 <_printf_i+0x212>
 8008dca:	2500      	movs	r5, #0
 8008dcc:	f104 0619 	add.w	r6, r4, #25
 8008dd0:	e7f5      	b.n	8008dbe <_printf_i+0x22e>
 8008dd2:	bf00      	nop
 8008dd4:	0800b136 	.word	0x0800b136
 8008dd8:	0800b147 	.word	0x0800b147

08008ddc <_puts_r>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	460e      	mov	r6, r1
 8008de0:	4605      	mov	r5, r0
 8008de2:	b118      	cbz	r0, 8008dec <_puts_r+0x10>
 8008de4:	6983      	ldr	r3, [r0, #24]
 8008de6:	b90b      	cbnz	r3, 8008dec <_puts_r+0x10>
 8008de8:	f001 f8c2 	bl	8009f70 <__sinit>
 8008dec:	69ab      	ldr	r3, [r5, #24]
 8008dee:	68ac      	ldr	r4, [r5, #8]
 8008df0:	b913      	cbnz	r3, 8008df8 <_puts_r+0x1c>
 8008df2:	4628      	mov	r0, r5
 8008df4:	f001 f8bc 	bl	8009f70 <__sinit>
 8008df8:	4b2c      	ldr	r3, [pc, #176]	; (8008eac <_puts_r+0xd0>)
 8008dfa:	429c      	cmp	r4, r3
 8008dfc:	d120      	bne.n	8008e40 <_puts_r+0x64>
 8008dfe:	686c      	ldr	r4, [r5, #4]
 8008e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e02:	07db      	lsls	r3, r3, #31
 8008e04:	d405      	bmi.n	8008e12 <_puts_r+0x36>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	0598      	lsls	r0, r3, #22
 8008e0a:	d402      	bmi.n	8008e12 <_puts_r+0x36>
 8008e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e0e:	f001 f952 	bl	800a0b6 <__retarget_lock_acquire_recursive>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	0719      	lsls	r1, r3, #28
 8008e16:	d51d      	bpl.n	8008e54 <_puts_r+0x78>
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	b1db      	cbz	r3, 8008e54 <_puts_r+0x78>
 8008e1c:	3e01      	subs	r6, #1
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e24:	3b01      	subs	r3, #1
 8008e26:	60a3      	str	r3, [r4, #8]
 8008e28:	bb39      	cbnz	r1, 8008e7a <_puts_r+0x9e>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da38      	bge.n	8008ea0 <_puts_r+0xc4>
 8008e2e:	4622      	mov	r2, r4
 8008e30:	210a      	movs	r1, #10
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f848 	bl	8008ec8 <__swbuf_r>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d011      	beq.n	8008e60 <_puts_r+0x84>
 8008e3c:	250a      	movs	r5, #10
 8008e3e:	e011      	b.n	8008e64 <_puts_r+0x88>
 8008e40:	4b1b      	ldr	r3, [pc, #108]	; (8008eb0 <_puts_r+0xd4>)
 8008e42:	429c      	cmp	r4, r3
 8008e44:	d101      	bne.n	8008e4a <_puts_r+0x6e>
 8008e46:	68ac      	ldr	r4, [r5, #8]
 8008e48:	e7da      	b.n	8008e00 <_puts_r+0x24>
 8008e4a:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <_puts_r+0xd8>)
 8008e4c:	429c      	cmp	r4, r3
 8008e4e:	bf08      	it	eq
 8008e50:	68ec      	ldreq	r4, [r5, #12]
 8008e52:	e7d5      	b.n	8008e00 <_puts_r+0x24>
 8008e54:	4621      	mov	r1, r4
 8008e56:	4628      	mov	r0, r5
 8008e58:	f000 f888 	bl	8008f6c <__swsetup_r>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d0dd      	beq.n	8008e1c <_puts_r+0x40>
 8008e60:	f04f 35ff 	mov.w	r5, #4294967295
 8008e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e66:	07da      	lsls	r2, r3, #31
 8008e68:	d405      	bmi.n	8008e76 <_puts_r+0x9a>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	059b      	lsls	r3, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_puts_r+0x9a>
 8008e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e72:	f001 f921 	bl	800a0b8 <__retarget_lock_release_recursive>
 8008e76:	4628      	mov	r0, r5
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da04      	bge.n	8008e88 <_puts_r+0xac>
 8008e7e:	69a2      	ldr	r2, [r4, #24]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	dc06      	bgt.n	8008e92 <_puts_r+0xb6>
 8008e84:	290a      	cmp	r1, #10
 8008e86:	d004      	beq.n	8008e92 <_puts_r+0xb6>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	6022      	str	r2, [r4, #0]
 8008e8e:	7019      	strb	r1, [r3, #0]
 8008e90:	e7c5      	b.n	8008e1e <_puts_r+0x42>
 8008e92:	4622      	mov	r2, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	f000 f817 	bl	8008ec8 <__swbuf_r>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d1bf      	bne.n	8008e1e <_puts_r+0x42>
 8008e9e:	e7df      	b.n	8008e60 <_puts_r+0x84>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	250a      	movs	r5, #10
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	701d      	strb	r5, [r3, #0]
 8008eaa:	e7db      	b.n	8008e64 <_puts_r+0x88>
 8008eac:	0800b208 	.word	0x0800b208
 8008eb0:	0800b228 	.word	0x0800b228
 8008eb4:	0800b1e8 	.word	0x0800b1e8

08008eb8 <puts>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <puts+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f7ff bf8d 	b.w	8008ddc <_puts_r>
 8008ec2:	bf00      	nop
 8008ec4:	20000014 	.word	0x20000014

08008ec8 <__swbuf_r>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	460e      	mov	r6, r1
 8008ecc:	4614      	mov	r4, r2
 8008ece:	4605      	mov	r5, r0
 8008ed0:	b118      	cbz	r0, 8008eda <__swbuf_r+0x12>
 8008ed2:	6983      	ldr	r3, [r0, #24]
 8008ed4:	b90b      	cbnz	r3, 8008eda <__swbuf_r+0x12>
 8008ed6:	f001 f84b 	bl	8009f70 <__sinit>
 8008eda:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <__swbuf_r+0x98>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d12b      	bne.n	8008f38 <__swbuf_r+0x70>
 8008ee0:	686c      	ldr	r4, [r5, #4]
 8008ee2:	69a3      	ldr	r3, [r4, #24]
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	071a      	lsls	r2, r3, #28
 8008eea:	d52f      	bpl.n	8008f4c <__swbuf_r+0x84>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	b36b      	cbz	r3, 8008f4c <__swbuf_r+0x84>
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	1ac0      	subs	r0, r0, r3
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	b2f6      	uxtb	r6, r6
 8008efa:	4283      	cmp	r3, r0
 8008efc:	4637      	mov	r7, r6
 8008efe:	dc04      	bgt.n	8008f0a <__swbuf_r+0x42>
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 ffa0 	bl	8009e48 <_fflush_r>
 8008f08:	bb30      	cbnz	r0, 8008f58 <__swbuf_r+0x90>
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	6022      	str	r2, [r4, #0]
 8008f16:	701e      	strb	r6, [r3, #0]
 8008f18:	6963      	ldr	r3, [r4, #20]
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	4283      	cmp	r3, r0
 8008f1e:	d004      	beq.n	8008f2a <__swbuf_r+0x62>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	07db      	lsls	r3, r3, #31
 8008f24:	d506      	bpl.n	8008f34 <__swbuf_r+0x6c>
 8008f26:	2e0a      	cmp	r6, #10
 8008f28:	d104      	bne.n	8008f34 <__swbuf_r+0x6c>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 ff8b 	bl	8009e48 <_fflush_r>
 8008f32:	b988      	cbnz	r0, 8008f58 <__swbuf_r+0x90>
 8008f34:	4638      	mov	r0, r7
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <__swbuf_r+0x9c>)
 8008f3a:	429c      	cmp	r4, r3
 8008f3c:	d101      	bne.n	8008f42 <__swbuf_r+0x7a>
 8008f3e:	68ac      	ldr	r4, [r5, #8]
 8008f40:	e7cf      	b.n	8008ee2 <__swbuf_r+0x1a>
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <__swbuf_r+0xa0>)
 8008f44:	429c      	cmp	r4, r3
 8008f46:	bf08      	it	eq
 8008f48:	68ec      	ldreq	r4, [r5, #12]
 8008f4a:	e7ca      	b.n	8008ee2 <__swbuf_r+0x1a>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 f80c 	bl	8008f6c <__swsetup_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d0cb      	beq.n	8008ef0 <__swbuf_r+0x28>
 8008f58:	f04f 37ff 	mov.w	r7, #4294967295
 8008f5c:	e7ea      	b.n	8008f34 <__swbuf_r+0x6c>
 8008f5e:	bf00      	nop
 8008f60:	0800b208 	.word	0x0800b208
 8008f64:	0800b228 	.word	0x0800b228
 8008f68:	0800b1e8 	.word	0x0800b1e8

08008f6c <__swsetup_r>:
 8008f6c:	4b32      	ldr	r3, [pc, #200]	; (8009038 <__swsetup_r+0xcc>)
 8008f6e:	b570      	push	{r4, r5, r6, lr}
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	4606      	mov	r6, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	b125      	cbz	r5, 8008f82 <__swsetup_r+0x16>
 8008f78:	69ab      	ldr	r3, [r5, #24]
 8008f7a:	b913      	cbnz	r3, 8008f82 <__swsetup_r+0x16>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 fff7 	bl	8009f70 <__sinit>
 8008f82:	4b2e      	ldr	r3, [pc, #184]	; (800903c <__swsetup_r+0xd0>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d10f      	bne.n	8008fa8 <__swsetup_r+0x3c>
 8008f88:	686c      	ldr	r4, [r5, #4]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f90:	0719      	lsls	r1, r3, #28
 8008f92:	d42c      	bmi.n	8008fee <__swsetup_r+0x82>
 8008f94:	06dd      	lsls	r5, r3, #27
 8008f96:	d411      	bmi.n	8008fbc <__swsetup_r+0x50>
 8008f98:	2309      	movs	r3, #9
 8008f9a:	6033      	str	r3, [r6, #0]
 8008f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa6:	e03e      	b.n	8009026 <__swsetup_r+0xba>
 8008fa8:	4b25      	ldr	r3, [pc, #148]	; (8009040 <__swsetup_r+0xd4>)
 8008faa:	429c      	cmp	r4, r3
 8008fac:	d101      	bne.n	8008fb2 <__swsetup_r+0x46>
 8008fae:	68ac      	ldr	r4, [r5, #8]
 8008fb0:	e7eb      	b.n	8008f8a <__swsetup_r+0x1e>
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <__swsetup_r+0xd8>)
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	bf08      	it	eq
 8008fb8:	68ec      	ldreq	r4, [r5, #12]
 8008fba:	e7e6      	b.n	8008f8a <__swsetup_r+0x1e>
 8008fbc:	0758      	lsls	r0, r3, #29
 8008fbe:	d512      	bpl.n	8008fe6 <__swsetup_r+0x7a>
 8008fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc2:	b141      	cbz	r1, 8008fd6 <__swsetup_r+0x6a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__swsetup_r+0x66>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f001 fc7b 	bl	800a8c8 <_free_r>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0308 	orr.w	r3, r3, #8
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	b94b      	cbnz	r3, 8009006 <__swsetup_r+0x9a>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ffc:	d003      	beq.n	8009006 <__swsetup_r+0x9a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4630      	mov	r0, r6
 8009002:	f001 f87f 	bl	800a104 <__smakebuf_r>
 8009006:	89a0      	ldrh	r0, [r4, #12]
 8009008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800900c:	f010 0301 	ands.w	r3, r0, #1
 8009010:	d00a      	beq.n	8009028 <__swsetup_r+0xbc>
 8009012:	2300      	movs	r3, #0
 8009014:	60a3      	str	r3, [r4, #8]
 8009016:	6963      	ldr	r3, [r4, #20]
 8009018:	425b      	negs	r3, r3
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	b943      	cbnz	r3, 8009032 <__swsetup_r+0xc6>
 8009020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009024:	d1ba      	bne.n	8008f9c <__swsetup_r+0x30>
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	0781      	lsls	r1, r0, #30
 800902a:	bf58      	it	pl
 800902c:	6963      	ldrpl	r3, [r4, #20]
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	e7f4      	b.n	800901c <__swsetup_r+0xb0>
 8009032:	2000      	movs	r0, #0
 8009034:	e7f7      	b.n	8009026 <__swsetup_r+0xba>
 8009036:	bf00      	nop
 8009038:	20000014 	.word	0x20000014
 800903c:	0800b208 	.word	0x0800b208
 8009040:	0800b228 	.word	0x0800b228
 8009044:	0800b1e8 	.word	0x0800b1e8

08009048 <quorem>:
 8009048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	6903      	ldr	r3, [r0, #16]
 800904e:	690c      	ldr	r4, [r1, #16]
 8009050:	42a3      	cmp	r3, r4
 8009052:	4607      	mov	r7, r0
 8009054:	f2c0 8081 	blt.w	800915a <quorem+0x112>
 8009058:	3c01      	subs	r4, #1
 800905a:	f101 0814 	add.w	r8, r1, #20
 800905e:	f100 0514 	add.w	r5, r0, #20
 8009062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800906c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009070:	3301      	adds	r3, #1
 8009072:	429a      	cmp	r2, r3
 8009074:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800907c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009080:	d331      	bcc.n	80090e6 <quorem+0x9e>
 8009082:	f04f 0e00 	mov.w	lr, #0
 8009086:	4640      	mov	r0, r8
 8009088:	46ac      	mov	ip, r5
 800908a:	46f2      	mov	sl, lr
 800908c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009090:	b293      	uxth	r3, r2
 8009092:	fb06 e303 	mla	r3, r6, r3, lr
 8009096:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800909a:	b29b      	uxth	r3, r3
 800909c:	ebaa 0303 	sub.w	r3, sl, r3
 80090a0:	f8dc a000 	ldr.w	sl, [ip]
 80090a4:	0c12      	lsrs	r2, r2, #16
 80090a6:	fa13 f38a 	uxtah	r3, r3, sl
 80090aa:	fb06 e202 	mla	r2, r6, r2, lr
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	9b00      	ldr	r3, [sp, #0]
 80090b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80090b6:	b292      	uxth	r2, r2
 80090b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80090c4:	4581      	cmp	r9, r0
 80090c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ca:	f84c 3b04 	str.w	r3, [ip], #4
 80090ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090d2:	d2db      	bcs.n	800908c <quorem+0x44>
 80090d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80090d8:	b92b      	cbnz	r3, 80090e6 <quorem+0x9e>
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	3b04      	subs	r3, #4
 80090de:	429d      	cmp	r5, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	d32e      	bcc.n	8009142 <quorem+0xfa>
 80090e4:	613c      	str	r4, [r7, #16]
 80090e6:	4638      	mov	r0, r7
 80090e8:	f001 fad6 	bl	800a698 <__mcmp>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	db24      	blt.n	800913a <quorem+0xf2>
 80090f0:	3601      	adds	r6, #1
 80090f2:	4628      	mov	r0, r5
 80090f4:	f04f 0c00 	mov.w	ip, #0
 80090f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80090fc:	f8d0 e000 	ldr.w	lr, [r0]
 8009100:	b293      	uxth	r3, r2
 8009102:	ebac 0303 	sub.w	r3, ip, r3
 8009106:	0c12      	lsrs	r2, r2, #16
 8009108:	fa13 f38e 	uxtah	r3, r3, lr
 800910c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009114:	b29b      	uxth	r3, r3
 8009116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800911a:	45c1      	cmp	r9, r8
 800911c:	f840 3b04 	str.w	r3, [r0], #4
 8009120:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009124:	d2e8      	bcs.n	80090f8 <quorem+0xb0>
 8009126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800912a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800912e:	b922      	cbnz	r2, 800913a <quorem+0xf2>
 8009130:	3b04      	subs	r3, #4
 8009132:	429d      	cmp	r5, r3
 8009134:	461a      	mov	r2, r3
 8009136:	d30a      	bcc.n	800914e <quorem+0x106>
 8009138:	613c      	str	r4, [r7, #16]
 800913a:	4630      	mov	r0, r6
 800913c:	b003      	add	sp, #12
 800913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	3b04      	subs	r3, #4
 8009146:	2a00      	cmp	r2, #0
 8009148:	d1cc      	bne.n	80090e4 <quorem+0x9c>
 800914a:	3c01      	subs	r4, #1
 800914c:	e7c7      	b.n	80090de <quorem+0x96>
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	3b04      	subs	r3, #4
 8009152:	2a00      	cmp	r2, #0
 8009154:	d1f0      	bne.n	8009138 <quorem+0xf0>
 8009156:	3c01      	subs	r4, #1
 8009158:	e7eb      	b.n	8009132 <quorem+0xea>
 800915a:	2000      	movs	r0, #0
 800915c:	e7ee      	b.n	800913c <quorem+0xf4>
	...

08009160 <_dtoa_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ed2d 8b04 	vpush	{d8-d9}
 8009168:	ec57 6b10 	vmov	r6, r7, d0
 800916c:	b093      	sub	sp, #76	; 0x4c
 800916e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009170:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009174:	9106      	str	r1, [sp, #24]
 8009176:	ee10 aa10 	vmov	sl, s0
 800917a:	4604      	mov	r4, r0
 800917c:	9209      	str	r2, [sp, #36]	; 0x24
 800917e:	930c      	str	r3, [sp, #48]	; 0x30
 8009180:	46bb      	mov	fp, r7
 8009182:	b975      	cbnz	r5, 80091a2 <_dtoa_r+0x42>
 8009184:	2010      	movs	r0, #16
 8009186:	f000 fffd 	bl	800a184 <malloc>
 800918a:	4602      	mov	r2, r0
 800918c:	6260      	str	r0, [r4, #36]	; 0x24
 800918e:	b920      	cbnz	r0, 800919a <_dtoa_r+0x3a>
 8009190:	4ba7      	ldr	r3, [pc, #668]	; (8009430 <_dtoa_r+0x2d0>)
 8009192:	21ea      	movs	r1, #234	; 0xea
 8009194:	48a7      	ldr	r0, [pc, #668]	; (8009434 <_dtoa_r+0x2d4>)
 8009196:	f001 fe37 	bl	800ae08 <__assert_func>
 800919a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800919e:	6005      	str	r5, [r0, #0]
 80091a0:	60c5      	str	r5, [r0, #12]
 80091a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091a4:	6819      	ldr	r1, [r3, #0]
 80091a6:	b151      	cbz	r1, 80091be <_dtoa_r+0x5e>
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	604a      	str	r2, [r1, #4]
 80091ac:	2301      	movs	r3, #1
 80091ae:	4093      	lsls	r3, r2
 80091b0:	608b      	str	r3, [r1, #8]
 80091b2:	4620      	mov	r0, r4
 80091b4:	f001 f82e 	bl	800a214 <_Bfree>
 80091b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	1e3b      	subs	r3, r7, #0
 80091c0:	bfaa      	itet	ge
 80091c2:	2300      	movge	r3, #0
 80091c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80091c8:	f8c8 3000 	strge.w	r3, [r8]
 80091cc:	4b9a      	ldr	r3, [pc, #616]	; (8009438 <_dtoa_r+0x2d8>)
 80091ce:	bfbc      	itt	lt
 80091d0:	2201      	movlt	r2, #1
 80091d2:	f8c8 2000 	strlt.w	r2, [r8]
 80091d6:	ea33 030b 	bics.w	r3, r3, fp
 80091da:	d11b      	bne.n	8009214 <_dtoa_r+0xb4>
 80091dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091de:	f242 730f 	movw	r3, #9999	; 0x270f
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091e8:	4333      	orrs	r3, r6
 80091ea:	f000 8592 	beq.w	8009d12 <_dtoa_r+0xbb2>
 80091ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f0:	b963      	cbnz	r3, 800920c <_dtoa_r+0xac>
 80091f2:	4b92      	ldr	r3, [pc, #584]	; (800943c <_dtoa_r+0x2dc>)
 80091f4:	e022      	b.n	800923c <_dtoa_r+0xdc>
 80091f6:	4b92      	ldr	r3, [pc, #584]	; (8009440 <_dtoa_r+0x2e0>)
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	3308      	adds	r3, #8
 80091fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091fe:	6013      	str	r3, [r2, #0]
 8009200:	9801      	ldr	r0, [sp, #4]
 8009202:	b013      	add	sp, #76	; 0x4c
 8009204:	ecbd 8b04 	vpop	{d8-d9}
 8009208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920c:	4b8b      	ldr	r3, [pc, #556]	; (800943c <_dtoa_r+0x2dc>)
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	3303      	adds	r3, #3
 8009212:	e7f3      	b.n	80091fc <_dtoa_r+0x9c>
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	4650      	mov	r0, sl
 800921a:	4659      	mov	r1, fp
 800921c:	f7f7 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009220:	ec4b ab19 	vmov	d9, sl, fp
 8009224:	4680      	mov	r8, r0
 8009226:	b158      	cbz	r0, 8009240 <_dtoa_r+0xe0>
 8009228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800922a:	2301      	movs	r3, #1
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 856b 	beq.w	8009d0c <_dtoa_r+0xbac>
 8009236:	4883      	ldr	r0, [pc, #524]	; (8009444 <_dtoa_r+0x2e4>)
 8009238:	6018      	str	r0, [r3, #0]
 800923a:	1e43      	subs	r3, r0, #1
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	e7df      	b.n	8009200 <_dtoa_r+0xa0>
 8009240:	ec4b ab10 	vmov	d0, sl, fp
 8009244:	aa10      	add	r2, sp, #64	; 0x40
 8009246:	a911      	add	r1, sp, #68	; 0x44
 8009248:	4620      	mov	r0, r4
 800924a:	f001 facb 	bl	800a7e4 <__d2b>
 800924e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009252:	ee08 0a10 	vmov	s16, r0
 8009256:	2d00      	cmp	r5, #0
 8009258:	f000 8084 	beq.w	8009364 <_dtoa_r+0x204>
 800925c:	ee19 3a90 	vmov	r3, s19
 8009260:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009264:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009268:	4656      	mov	r6, sl
 800926a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800926e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009272:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009276:	4b74      	ldr	r3, [pc, #464]	; (8009448 <_dtoa_r+0x2e8>)
 8009278:	2200      	movs	r2, #0
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 f803 	bl	8000288 <__aeabi_dsub>
 8009282:	a365      	add	r3, pc, #404	; (adr r3, 8009418 <_dtoa_r+0x2b8>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f9b6 	bl	80005f8 <__aeabi_dmul>
 800928c:	a364      	add	r3, pc, #400	; (adr r3, 8009420 <_dtoa_r+0x2c0>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f6 fffb 	bl	800028c <__adddf3>
 8009296:	4606      	mov	r6, r0
 8009298:	4628      	mov	r0, r5
 800929a:	460f      	mov	r7, r1
 800929c:	f7f7 f942 	bl	8000524 <__aeabi_i2d>
 80092a0:	a361      	add	r3, pc, #388	; (adr r3, 8009428 <_dtoa_r+0x2c8>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f6 ffeb 	bl	800028c <__adddf3>
 80092b6:	4606      	mov	r6, r0
 80092b8:	460f      	mov	r7, r1
 80092ba:	f7f7 fc4d 	bl	8000b58 <__aeabi_d2iz>
 80092be:	2200      	movs	r2, #0
 80092c0:	9000      	str	r0, [sp, #0]
 80092c2:	2300      	movs	r3, #0
 80092c4:	4630      	mov	r0, r6
 80092c6:	4639      	mov	r1, r7
 80092c8:	f7f7 fc08 	bl	8000adc <__aeabi_dcmplt>
 80092cc:	b150      	cbz	r0, 80092e4 <_dtoa_r+0x184>
 80092ce:	9800      	ldr	r0, [sp, #0]
 80092d0:	f7f7 f928 	bl	8000524 <__aeabi_i2d>
 80092d4:	4632      	mov	r2, r6
 80092d6:	463b      	mov	r3, r7
 80092d8:	f7f7 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80092dc:	b910      	cbnz	r0, 80092e4 <_dtoa_r+0x184>
 80092de:	9b00      	ldr	r3, [sp, #0]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	9b00      	ldr	r3, [sp, #0]
 80092e6:	2b16      	cmp	r3, #22
 80092e8:	d85a      	bhi.n	80093a0 <_dtoa_r+0x240>
 80092ea:	9a00      	ldr	r2, [sp, #0]
 80092ec:	4b57      	ldr	r3, [pc, #348]	; (800944c <_dtoa_r+0x2ec>)
 80092ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	ec51 0b19 	vmov	r0, r1, d9
 80092fa:	f7f7 fbef 	bl	8000adc <__aeabi_dcmplt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d050      	beq.n	80093a4 <_dtoa_r+0x244>
 8009302:	9b00      	ldr	r3, [sp, #0]
 8009304:	3b01      	subs	r3, #1
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	2300      	movs	r3, #0
 800930a:	930b      	str	r3, [sp, #44]	; 0x2c
 800930c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800930e:	1b5d      	subs	r5, r3, r5
 8009310:	1e6b      	subs	r3, r5, #1
 8009312:	9305      	str	r3, [sp, #20]
 8009314:	bf45      	ittet	mi
 8009316:	f1c5 0301 	rsbmi	r3, r5, #1
 800931a:	9304      	strmi	r3, [sp, #16]
 800931c:	2300      	movpl	r3, #0
 800931e:	2300      	movmi	r3, #0
 8009320:	bf4c      	ite	mi
 8009322:	9305      	strmi	r3, [sp, #20]
 8009324:	9304      	strpl	r3, [sp, #16]
 8009326:	9b00      	ldr	r3, [sp, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	db3d      	blt.n	80093a8 <_dtoa_r+0x248>
 800932c:	9b05      	ldr	r3, [sp, #20]
 800932e:	9a00      	ldr	r2, [sp, #0]
 8009330:	920a      	str	r2, [sp, #40]	; 0x28
 8009332:	4413      	add	r3, r2
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	2300      	movs	r3, #0
 8009338:	9307      	str	r3, [sp, #28]
 800933a:	9b06      	ldr	r3, [sp, #24]
 800933c:	2b09      	cmp	r3, #9
 800933e:	f200 8089 	bhi.w	8009454 <_dtoa_r+0x2f4>
 8009342:	2b05      	cmp	r3, #5
 8009344:	bfc4      	itt	gt
 8009346:	3b04      	subgt	r3, #4
 8009348:	9306      	strgt	r3, [sp, #24]
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	f1a3 0302 	sub.w	r3, r3, #2
 8009350:	bfcc      	ite	gt
 8009352:	2500      	movgt	r5, #0
 8009354:	2501      	movle	r5, #1
 8009356:	2b03      	cmp	r3, #3
 8009358:	f200 8087 	bhi.w	800946a <_dtoa_r+0x30a>
 800935c:	e8df f003 	tbb	[pc, r3]
 8009360:	59383a2d 	.word	0x59383a2d
 8009364:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009368:	441d      	add	r5, r3
 800936a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800936e:	2b20      	cmp	r3, #32
 8009370:	bfc1      	itttt	gt
 8009372:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009376:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800937a:	fa0b f303 	lslgt.w	r3, fp, r3
 800937e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009382:	bfda      	itte	le
 8009384:	f1c3 0320 	rsble	r3, r3, #32
 8009388:	fa06 f003 	lslle.w	r0, r6, r3
 800938c:	4318      	orrgt	r0, r3
 800938e:	f7f7 f8b9 	bl	8000504 <__aeabi_ui2d>
 8009392:	2301      	movs	r3, #1
 8009394:	4606      	mov	r6, r0
 8009396:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800939a:	3d01      	subs	r5, #1
 800939c:	930e      	str	r3, [sp, #56]	; 0x38
 800939e:	e76a      	b.n	8009276 <_dtoa_r+0x116>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e7b2      	b.n	800930a <_dtoa_r+0x1aa>
 80093a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80093a6:	e7b1      	b.n	800930c <_dtoa_r+0x1ac>
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	9a00      	ldr	r2, [sp, #0]
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	4253      	negs	r3, r2
 80093b2:	9307      	str	r3, [sp, #28]
 80093b4:	2300      	movs	r3, #0
 80093b6:	930a      	str	r3, [sp, #40]	; 0x28
 80093b8:	e7bf      	b.n	800933a <_dtoa_r+0x1da>
 80093ba:	2300      	movs	r3, #0
 80093bc:	9308      	str	r3, [sp, #32]
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dc55      	bgt.n	8009470 <_dtoa_r+0x310>
 80093c4:	2301      	movs	r3, #1
 80093c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80093ca:	461a      	mov	r2, r3
 80093cc:	9209      	str	r2, [sp, #36]	; 0x24
 80093ce:	e00c      	b.n	80093ea <_dtoa_r+0x28a>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e7f3      	b.n	80093bc <_dtoa_r+0x25c>
 80093d4:	2300      	movs	r3, #0
 80093d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093d8:	9308      	str	r3, [sp, #32]
 80093da:	9b00      	ldr	r3, [sp, #0]
 80093dc:	4413      	add	r3, r2
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	3301      	adds	r3, #1
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	9303      	str	r3, [sp, #12]
 80093e6:	bfb8      	it	lt
 80093e8:	2301      	movlt	r3, #1
 80093ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093ec:	2200      	movs	r2, #0
 80093ee:	6042      	str	r2, [r0, #4]
 80093f0:	2204      	movs	r2, #4
 80093f2:	f102 0614 	add.w	r6, r2, #20
 80093f6:	429e      	cmp	r6, r3
 80093f8:	6841      	ldr	r1, [r0, #4]
 80093fa:	d93d      	bls.n	8009478 <_dtoa_r+0x318>
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fec9 	bl	800a194 <_Balloc>
 8009402:	9001      	str	r0, [sp, #4]
 8009404:	2800      	cmp	r0, #0
 8009406:	d13b      	bne.n	8009480 <_dtoa_r+0x320>
 8009408:	4b11      	ldr	r3, [pc, #68]	; (8009450 <_dtoa_r+0x2f0>)
 800940a:	4602      	mov	r2, r0
 800940c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009410:	e6c0      	b.n	8009194 <_dtoa_r+0x34>
 8009412:	2301      	movs	r3, #1
 8009414:	e7df      	b.n	80093d6 <_dtoa_r+0x276>
 8009416:	bf00      	nop
 8009418:	636f4361 	.word	0x636f4361
 800941c:	3fd287a7 	.word	0x3fd287a7
 8009420:	8b60c8b3 	.word	0x8b60c8b3
 8009424:	3fc68a28 	.word	0x3fc68a28
 8009428:	509f79fb 	.word	0x509f79fb
 800942c:	3fd34413 	.word	0x3fd34413
 8009430:	0800b165 	.word	0x0800b165
 8009434:	0800b17c 	.word	0x0800b17c
 8009438:	7ff00000 	.word	0x7ff00000
 800943c:	0800b161 	.word	0x0800b161
 8009440:	0800b158 	.word	0x0800b158
 8009444:	0800b135 	.word	0x0800b135
 8009448:	3ff80000 	.word	0x3ff80000
 800944c:	0800b2d0 	.word	0x0800b2d0
 8009450:	0800b1d7 	.word	0x0800b1d7
 8009454:	2501      	movs	r5, #1
 8009456:	2300      	movs	r3, #0
 8009458:	9306      	str	r3, [sp, #24]
 800945a:	9508      	str	r5, [sp, #32]
 800945c:	f04f 33ff 	mov.w	r3, #4294967295
 8009460:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009464:	2200      	movs	r2, #0
 8009466:	2312      	movs	r3, #18
 8009468:	e7b0      	b.n	80093cc <_dtoa_r+0x26c>
 800946a:	2301      	movs	r3, #1
 800946c:	9308      	str	r3, [sp, #32]
 800946e:	e7f5      	b.n	800945c <_dtoa_r+0x2fc>
 8009470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009472:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009476:	e7b8      	b.n	80093ea <_dtoa_r+0x28a>
 8009478:	3101      	adds	r1, #1
 800947a:	6041      	str	r1, [r0, #4]
 800947c:	0052      	lsls	r2, r2, #1
 800947e:	e7b8      	b.n	80093f2 <_dtoa_r+0x292>
 8009480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009482:	9a01      	ldr	r2, [sp, #4]
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	2b0e      	cmp	r3, #14
 800948a:	f200 809d 	bhi.w	80095c8 <_dtoa_r+0x468>
 800948e:	2d00      	cmp	r5, #0
 8009490:	f000 809a 	beq.w	80095c8 <_dtoa_r+0x468>
 8009494:	9b00      	ldr	r3, [sp, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	dd32      	ble.n	8009500 <_dtoa_r+0x3a0>
 800949a:	4ab7      	ldr	r2, [pc, #732]	; (8009778 <_dtoa_r+0x618>)
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094a8:	9b00      	ldr	r3, [sp, #0]
 80094aa:	05d8      	lsls	r0, r3, #23
 80094ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80094b0:	d516      	bpl.n	80094e0 <_dtoa_r+0x380>
 80094b2:	4bb2      	ldr	r3, [pc, #712]	; (800977c <_dtoa_r+0x61c>)
 80094b4:	ec51 0b19 	vmov	r0, r1, d9
 80094b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094bc:	f7f7 f9c6 	bl	800084c <__aeabi_ddiv>
 80094c0:	f007 070f 	and.w	r7, r7, #15
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	2503      	movs	r5, #3
 80094ca:	4eac      	ldr	r6, [pc, #688]	; (800977c <_dtoa_r+0x61c>)
 80094cc:	b957      	cbnz	r7, 80094e4 <_dtoa_r+0x384>
 80094ce:	4642      	mov	r2, r8
 80094d0:	464b      	mov	r3, r9
 80094d2:	4650      	mov	r0, sl
 80094d4:	4659      	mov	r1, fp
 80094d6:	f7f7 f9b9 	bl	800084c <__aeabi_ddiv>
 80094da:	4682      	mov	sl, r0
 80094dc:	468b      	mov	fp, r1
 80094de:	e028      	b.n	8009532 <_dtoa_r+0x3d2>
 80094e0:	2502      	movs	r5, #2
 80094e2:	e7f2      	b.n	80094ca <_dtoa_r+0x36a>
 80094e4:	07f9      	lsls	r1, r7, #31
 80094e6:	d508      	bpl.n	80094fa <_dtoa_r+0x39a>
 80094e8:	4640      	mov	r0, r8
 80094ea:	4649      	mov	r1, r9
 80094ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094f0:	f7f7 f882 	bl	80005f8 <__aeabi_dmul>
 80094f4:	3501      	adds	r5, #1
 80094f6:	4680      	mov	r8, r0
 80094f8:	4689      	mov	r9, r1
 80094fa:	107f      	asrs	r7, r7, #1
 80094fc:	3608      	adds	r6, #8
 80094fe:	e7e5      	b.n	80094cc <_dtoa_r+0x36c>
 8009500:	f000 809b 	beq.w	800963a <_dtoa_r+0x4da>
 8009504:	9b00      	ldr	r3, [sp, #0]
 8009506:	4f9d      	ldr	r7, [pc, #628]	; (800977c <_dtoa_r+0x61c>)
 8009508:	425e      	negs	r6, r3
 800950a:	4b9b      	ldr	r3, [pc, #620]	; (8009778 <_dtoa_r+0x618>)
 800950c:	f006 020f 	and.w	r2, r6, #15
 8009510:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	ec51 0b19 	vmov	r0, r1, d9
 800951c:	f7f7 f86c 	bl	80005f8 <__aeabi_dmul>
 8009520:	1136      	asrs	r6, r6, #4
 8009522:	4682      	mov	sl, r0
 8009524:	468b      	mov	fp, r1
 8009526:	2300      	movs	r3, #0
 8009528:	2502      	movs	r5, #2
 800952a:	2e00      	cmp	r6, #0
 800952c:	d17a      	bne.n	8009624 <_dtoa_r+0x4c4>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1d3      	bne.n	80094da <_dtoa_r+0x37a>
 8009532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8082 	beq.w	800963e <_dtoa_r+0x4de>
 800953a:	4b91      	ldr	r3, [pc, #580]	; (8009780 <_dtoa_r+0x620>)
 800953c:	2200      	movs	r2, #0
 800953e:	4650      	mov	r0, sl
 8009540:	4659      	mov	r1, fp
 8009542:	f7f7 facb 	bl	8000adc <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d079      	beq.n	800963e <_dtoa_r+0x4de>
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d076      	beq.n	800963e <_dtoa_r+0x4de>
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	dd36      	ble.n	80095c4 <_dtoa_r+0x464>
 8009556:	9b00      	ldr	r3, [sp, #0]
 8009558:	4650      	mov	r0, sl
 800955a:	4659      	mov	r1, fp
 800955c:	1e5f      	subs	r7, r3, #1
 800955e:	2200      	movs	r2, #0
 8009560:	4b88      	ldr	r3, [pc, #544]	; (8009784 <_dtoa_r+0x624>)
 8009562:	f7f7 f849 	bl	80005f8 <__aeabi_dmul>
 8009566:	9e02      	ldr	r6, [sp, #8]
 8009568:	4682      	mov	sl, r0
 800956a:	468b      	mov	fp, r1
 800956c:	3501      	adds	r5, #1
 800956e:	4628      	mov	r0, r5
 8009570:	f7f6 ffd8 	bl	8000524 <__aeabi_i2d>
 8009574:	4652      	mov	r2, sl
 8009576:	465b      	mov	r3, fp
 8009578:	f7f7 f83e 	bl	80005f8 <__aeabi_dmul>
 800957c:	4b82      	ldr	r3, [pc, #520]	; (8009788 <_dtoa_r+0x628>)
 800957e:	2200      	movs	r2, #0
 8009580:	f7f6 fe84 	bl	800028c <__adddf3>
 8009584:	46d0      	mov	r8, sl
 8009586:	46d9      	mov	r9, fp
 8009588:	4682      	mov	sl, r0
 800958a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800958e:	2e00      	cmp	r6, #0
 8009590:	d158      	bne.n	8009644 <_dtoa_r+0x4e4>
 8009592:	4b7e      	ldr	r3, [pc, #504]	; (800978c <_dtoa_r+0x62c>)
 8009594:	2200      	movs	r2, #0
 8009596:	4640      	mov	r0, r8
 8009598:	4649      	mov	r1, r9
 800959a:	f7f6 fe75 	bl	8000288 <__aeabi_dsub>
 800959e:	4652      	mov	r2, sl
 80095a0:	465b      	mov	r3, fp
 80095a2:	4680      	mov	r8, r0
 80095a4:	4689      	mov	r9, r1
 80095a6:	f7f7 fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	f040 8295 	bne.w	8009ada <_dtoa_r+0x97a>
 80095b0:	4652      	mov	r2, sl
 80095b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f7 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80095be:	2800      	cmp	r0, #0
 80095c0:	f040 8289 	bne.w	8009ad6 <_dtoa_r+0x976>
 80095c4:	ec5b ab19 	vmov	sl, fp, d9
 80095c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f2c0 8148 	blt.w	8009860 <_dtoa_r+0x700>
 80095d0:	9a00      	ldr	r2, [sp, #0]
 80095d2:	2a0e      	cmp	r2, #14
 80095d4:	f300 8144 	bgt.w	8009860 <_dtoa_r+0x700>
 80095d8:	4b67      	ldr	r3, [pc, #412]	; (8009778 <_dtoa_r+0x618>)
 80095da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f280 80d5 	bge.w	8009794 <_dtoa_r+0x634>
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f300 80d1 	bgt.w	8009794 <_dtoa_r+0x634>
 80095f2:	f040 826f 	bne.w	8009ad4 <_dtoa_r+0x974>
 80095f6:	4b65      	ldr	r3, [pc, #404]	; (800978c <_dtoa_r+0x62c>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	4640      	mov	r0, r8
 80095fc:	4649      	mov	r1, r9
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	4652      	mov	r2, sl
 8009604:	465b      	mov	r3, fp
 8009606:	f7f7 fa7d 	bl	8000b04 <__aeabi_dcmpge>
 800960a:	9e03      	ldr	r6, [sp, #12]
 800960c:	4637      	mov	r7, r6
 800960e:	2800      	cmp	r0, #0
 8009610:	f040 8245 	bne.w	8009a9e <_dtoa_r+0x93e>
 8009614:	9d01      	ldr	r5, [sp, #4]
 8009616:	2331      	movs	r3, #49	; 0x31
 8009618:	f805 3b01 	strb.w	r3, [r5], #1
 800961c:	9b00      	ldr	r3, [sp, #0]
 800961e:	3301      	adds	r3, #1
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	e240      	b.n	8009aa6 <_dtoa_r+0x946>
 8009624:	07f2      	lsls	r2, r6, #31
 8009626:	d505      	bpl.n	8009634 <_dtoa_r+0x4d4>
 8009628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962c:	f7f6 ffe4 	bl	80005f8 <__aeabi_dmul>
 8009630:	3501      	adds	r5, #1
 8009632:	2301      	movs	r3, #1
 8009634:	1076      	asrs	r6, r6, #1
 8009636:	3708      	adds	r7, #8
 8009638:	e777      	b.n	800952a <_dtoa_r+0x3ca>
 800963a:	2502      	movs	r5, #2
 800963c:	e779      	b.n	8009532 <_dtoa_r+0x3d2>
 800963e:	9f00      	ldr	r7, [sp, #0]
 8009640:	9e03      	ldr	r6, [sp, #12]
 8009642:	e794      	b.n	800956e <_dtoa_r+0x40e>
 8009644:	9901      	ldr	r1, [sp, #4]
 8009646:	4b4c      	ldr	r3, [pc, #304]	; (8009778 <_dtoa_r+0x618>)
 8009648:	4431      	add	r1, r6
 800964a:	910d      	str	r1, [sp, #52]	; 0x34
 800964c:	9908      	ldr	r1, [sp, #32]
 800964e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009656:	2900      	cmp	r1, #0
 8009658:	d043      	beq.n	80096e2 <_dtoa_r+0x582>
 800965a:	494d      	ldr	r1, [pc, #308]	; (8009790 <_dtoa_r+0x630>)
 800965c:	2000      	movs	r0, #0
 800965e:	f7f7 f8f5 	bl	800084c <__aeabi_ddiv>
 8009662:	4652      	mov	r2, sl
 8009664:	465b      	mov	r3, fp
 8009666:	f7f6 fe0f 	bl	8000288 <__aeabi_dsub>
 800966a:	9d01      	ldr	r5, [sp, #4]
 800966c:	4682      	mov	sl, r0
 800966e:	468b      	mov	fp, r1
 8009670:	4649      	mov	r1, r9
 8009672:	4640      	mov	r0, r8
 8009674:	f7f7 fa70 	bl	8000b58 <__aeabi_d2iz>
 8009678:	4606      	mov	r6, r0
 800967a:	f7f6 ff53 	bl	8000524 <__aeabi_i2d>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f6 fdff 	bl	8000288 <__aeabi_dsub>
 800968a:	3630      	adds	r6, #48	; 0x30
 800968c:	f805 6b01 	strb.w	r6, [r5], #1
 8009690:	4652      	mov	r2, sl
 8009692:	465b      	mov	r3, fp
 8009694:	4680      	mov	r8, r0
 8009696:	4689      	mov	r9, r1
 8009698:	f7f7 fa20 	bl	8000adc <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	d163      	bne.n	8009768 <_dtoa_r+0x608>
 80096a0:	4642      	mov	r2, r8
 80096a2:	464b      	mov	r3, r9
 80096a4:	4936      	ldr	r1, [pc, #216]	; (8009780 <_dtoa_r+0x620>)
 80096a6:	2000      	movs	r0, #0
 80096a8:	f7f6 fdee 	bl	8000288 <__aeabi_dsub>
 80096ac:	4652      	mov	r2, sl
 80096ae:	465b      	mov	r3, fp
 80096b0:	f7f7 fa14 	bl	8000adc <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f040 80b5 	bne.w	8009824 <_dtoa_r+0x6c4>
 80096ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096bc:	429d      	cmp	r5, r3
 80096be:	d081      	beq.n	80095c4 <_dtoa_r+0x464>
 80096c0:	4b30      	ldr	r3, [pc, #192]	; (8009784 <_dtoa_r+0x624>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	4650      	mov	r0, sl
 80096c6:	4659      	mov	r1, fp
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <_dtoa_r+0x624>)
 80096ce:	4682      	mov	sl, r0
 80096d0:	468b      	mov	fp, r1
 80096d2:	4640      	mov	r0, r8
 80096d4:	4649      	mov	r1, r9
 80096d6:	2200      	movs	r2, #0
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	4680      	mov	r8, r0
 80096de:	4689      	mov	r9, r1
 80096e0:	e7c6      	b.n	8009670 <_dtoa_r+0x510>
 80096e2:	4650      	mov	r0, sl
 80096e4:	4659      	mov	r1, fp
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ec:	9d01      	ldr	r5, [sp, #4]
 80096ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f0:	4682      	mov	sl, r0
 80096f2:	468b      	mov	fp, r1
 80096f4:	4649      	mov	r1, r9
 80096f6:	4640      	mov	r0, r8
 80096f8:	f7f7 fa2e 	bl	8000b58 <__aeabi_d2iz>
 80096fc:	4606      	mov	r6, r0
 80096fe:	f7f6 ff11 	bl	8000524 <__aeabi_i2d>
 8009702:	3630      	adds	r6, #48	; 0x30
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4640      	mov	r0, r8
 800970a:	4649      	mov	r1, r9
 800970c:	f7f6 fdbc 	bl	8000288 <__aeabi_dsub>
 8009710:	f805 6b01 	strb.w	r6, [r5], #1
 8009714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009716:	429d      	cmp	r5, r3
 8009718:	4680      	mov	r8, r0
 800971a:	4689      	mov	r9, r1
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	d124      	bne.n	800976c <_dtoa_r+0x60c>
 8009722:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <_dtoa_r+0x630>)
 8009724:	4650      	mov	r0, sl
 8009726:	4659      	mov	r1, fp
 8009728:	f7f6 fdb0 	bl	800028c <__adddf3>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f7 f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 8009738:	2800      	cmp	r0, #0
 800973a:	d173      	bne.n	8009824 <_dtoa_r+0x6c4>
 800973c:	4652      	mov	r2, sl
 800973e:	465b      	mov	r3, fp
 8009740:	4913      	ldr	r1, [pc, #76]	; (8009790 <_dtoa_r+0x630>)
 8009742:	2000      	movs	r0, #0
 8009744:	f7f6 fda0 	bl	8000288 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4640      	mov	r0, r8
 800974e:	4649      	mov	r1, r9
 8009750:	f7f7 f9c4 	bl	8000adc <__aeabi_dcmplt>
 8009754:	2800      	cmp	r0, #0
 8009756:	f43f af35 	beq.w	80095c4 <_dtoa_r+0x464>
 800975a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800975c:	1e6b      	subs	r3, r5, #1
 800975e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009760:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009764:	2b30      	cmp	r3, #48	; 0x30
 8009766:	d0f8      	beq.n	800975a <_dtoa_r+0x5fa>
 8009768:	9700      	str	r7, [sp, #0]
 800976a:	e049      	b.n	8009800 <_dtoa_r+0x6a0>
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <_dtoa_r+0x624>)
 800976e:	f7f6 ff43 	bl	80005f8 <__aeabi_dmul>
 8009772:	4680      	mov	r8, r0
 8009774:	4689      	mov	r9, r1
 8009776:	e7bd      	b.n	80096f4 <_dtoa_r+0x594>
 8009778:	0800b2d0 	.word	0x0800b2d0
 800977c:	0800b2a8 	.word	0x0800b2a8
 8009780:	3ff00000 	.word	0x3ff00000
 8009784:	40240000 	.word	0x40240000
 8009788:	401c0000 	.word	0x401c0000
 800978c:	40140000 	.word	0x40140000
 8009790:	3fe00000 	.word	0x3fe00000
 8009794:	9d01      	ldr	r5, [sp, #4]
 8009796:	4656      	mov	r6, sl
 8009798:	465f      	mov	r7, fp
 800979a:	4642      	mov	r2, r8
 800979c:	464b      	mov	r3, r9
 800979e:	4630      	mov	r0, r6
 80097a0:	4639      	mov	r1, r7
 80097a2:	f7f7 f853 	bl	800084c <__aeabi_ddiv>
 80097a6:	f7f7 f9d7 	bl	8000b58 <__aeabi_d2iz>
 80097aa:	4682      	mov	sl, r0
 80097ac:	f7f6 feba 	bl	8000524 <__aeabi_i2d>
 80097b0:	4642      	mov	r2, r8
 80097b2:	464b      	mov	r3, r9
 80097b4:	f7f6 ff20 	bl	80005f8 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80097c4:	f7f6 fd60 	bl	8000288 <__aeabi_dsub>
 80097c8:	f805 6b01 	strb.w	r6, [r5], #1
 80097cc:	9e01      	ldr	r6, [sp, #4]
 80097ce:	9f03      	ldr	r7, [sp, #12]
 80097d0:	1bae      	subs	r6, r5, r6
 80097d2:	42b7      	cmp	r7, r6
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	d135      	bne.n	8009846 <_dtoa_r+0x6e6>
 80097da:	f7f6 fd57 	bl	800028c <__adddf3>
 80097de:	4642      	mov	r2, r8
 80097e0:	464b      	mov	r3, r9
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	f7f7 f997 	bl	8000b18 <__aeabi_dcmpgt>
 80097ea:	b9d0      	cbnz	r0, 8009822 <_dtoa_r+0x6c2>
 80097ec:	4642      	mov	r2, r8
 80097ee:	464b      	mov	r3, r9
 80097f0:	4630      	mov	r0, r6
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7f7 f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80097f8:	b110      	cbz	r0, 8009800 <_dtoa_r+0x6a0>
 80097fa:	f01a 0f01 	tst.w	sl, #1
 80097fe:	d110      	bne.n	8009822 <_dtoa_r+0x6c2>
 8009800:	4620      	mov	r0, r4
 8009802:	ee18 1a10 	vmov	r1, s16
 8009806:	f000 fd05 	bl	800a214 <_Bfree>
 800980a:	2300      	movs	r3, #0
 800980c:	9800      	ldr	r0, [sp, #0]
 800980e:	702b      	strb	r3, [r5, #0]
 8009810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009812:	3001      	adds	r0, #1
 8009814:	6018      	str	r0, [r3, #0]
 8009816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009818:	2b00      	cmp	r3, #0
 800981a:	f43f acf1 	beq.w	8009200 <_dtoa_r+0xa0>
 800981e:	601d      	str	r5, [r3, #0]
 8009820:	e4ee      	b.n	8009200 <_dtoa_r+0xa0>
 8009822:	9f00      	ldr	r7, [sp, #0]
 8009824:	462b      	mov	r3, r5
 8009826:	461d      	mov	r5, r3
 8009828:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800982c:	2a39      	cmp	r2, #57	; 0x39
 800982e:	d106      	bne.n	800983e <_dtoa_r+0x6de>
 8009830:	9a01      	ldr	r2, [sp, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d1f7      	bne.n	8009826 <_dtoa_r+0x6c6>
 8009836:	9901      	ldr	r1, [sp, #4]
 8009838:	2230      	movs	r2, #48	; 0x30
 800983a:	3701      	adds	r7, #1
 800983c:	700a      	strb	r2, [r1, #0]
 800983e:	781a      	ldrb	r2, [r3, #0]
 8009840:	3201      	adds	r2, #1
 8009842:	701a      	strb	r2, [r3, #0]
 8009844:	e790      	b.n	8009768 <_dtoa_r+0x608>
 8009846:	4ba6      	ldr	r3, [pc, #664]	; (8009ae0 <_dtoa_r+0x980>)
 8009848:	2200      	movs	r2, #0
 800984a:	f7f6 fed5 	bl	80005f8 <__aeabi_dmul>
 800984e:	2200      	movs	r2, #0
 8009850:	2300      	movs	r3, #0
 8009852:	4606      	mov	r6, r0
 8009854:	460f      	mov	r7, r1
 8009856:	f7f7 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800985a:	2800      	cmp	r0, #0
 800985c:	d09d      	beq.n	800979a <_dtoa_r+0x63a>
 800985e:	e7cf      	b.n	8009800 <_dtoa_r+0x6a0>
 8009860:	9a08      	ldr	r2, [sp, #32]
 8009862:	2a00      	cmp	r2, #0
 8009864:	f000 80d7 	beq.w	8009a16 <_dtoa_r+0x8b6>
 8009868:	9a06      	ldr	r2, [sp, #24]
 800986a:	2a01      	cmp	r2, #1
 800986c:	f300 80ba 	bgt.w	80099e4 <_dtoa_r+0x884>
 8009870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009872:	2a00      	cmp	r2, #0
 8009874:	f000 80b2 	beq.w	80099dc <_dtoa_r+0x87c>
 8009878:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800987c:	9e07      	ldr	r6, [sp, #28]
 800987e:	9d04      	ldr	r5, [sp, #16]
 8009880:	9a04      	ldr	r2, [sp, #16]
 8009882:	441a      	add	r2, r3
 8009884:	9204      	str	r2, [sp, #16]
 8009886:	9a05      	ldr	r2, [sp, #20]
 8009888:	2101      	movs	r1, #1
 800988a:	441a      	add	r2, r3
 800988c:	4620      	mov	r0, r4
 800988e:	9205      	str	r2, [sp, #20]
 8009890:	f000 fd78 	bl	800a384 <__i2b>
 8009894:	4607      	mov	r7, r0
 8009896:	2d00      	cmp	r5, #0
 8009898:	dd0c      	ble.n	80098b4 <_dtoa_r+0x754>
 800989a:	9b05      	ldr	r3, [sp, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	dd09      	ble.n	80098b4 <_dtoa_r+0x754>
 80098a0:	42ab      	cmp	r3, r5
 80098a2:	9a04      	ldr	r2, [sp, #16]
 80098a4:	bfa8      	it	ge
 80098a6:	462b      	movge	r3, r5
 80098a8:	1ad2      	subs	r2, r2, r3
 80098aa:	9204      	str	r2, [sp, #16]
 80098ac:	9a05      	ldr	r2, [sp, #20]
 80098ae:	1aed      	subs	r5, r5, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	b31b      	cbz	r3, 8009900 <_dtoa_r+0x7a0>
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80af 	beq.w	8009a1e <_dtoa_r+0x8be>
 80098c0:	2e00      	cmp	r6, #0
 80098c2:	dd13      	ble.n	80098ec <_dtoa_r+0x78c>
 80098c4:	4639      	mov	r1, r7
 80098c6:	4632      	mov	r2, r6
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fe1b 	bl	800a504 <__pow5mult>
 80098ce:	ee18 2a10 	vmov	r2, s16
 80098d2:	4601      	mov	r1, r0
 80098d4:	4607      	mov	r7, r0
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 fd6a 	bl	800a3b0 <__multiply>
 80098dc:	ee18 1a10 	vmov	r1, s16
 80098e0:	4680      	mov	r8, r0
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 fc96 	bl	800a214 <_Bfree>
 80098e8:	ee08 8a10 	vmov	s16, r8
 80098ec:	9b07      	ldr	r3, [sp, #28]
 80098ee:	1b9a      	subs	r2, r3, r6
 80098f0:	d006      	beq.n	8009900 <_dtoa_r+0x7a0>
 80098f2:	ee18 1a10 	vmov	r1, s16
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fe04 	bl	800a504 <__pow5mult>
 80098fc:	ee08 0a10 	vmov	s16, r0
 8009900:	2101      	movs	r1, #1
 8009902:	4620      	mov	r0, r4
 8009904:	f000 fd3e 	bl	800a384 <__i2b>
 8009908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990a:	2b00      	cmp	r3, #0
 800990c:	4606      	mov	r6, r0
 800990e:	f340 8088 	ble.w	8009a22 <_dtoa_r+0x8c2>
 8009912:	461a      	mov	r2, r3
 8009914:	4601      	mov	r1, r0
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fdf4 	bl	800a504 <__pow5mult>
 800991c:	9b06      	ldr	r3, [sp, #24]
 800991e:	2b01      	cmp	r3, #1
 8009920:	4606      	mov	r6, r0
 8009922:	f340 8081 	ble.w	8009a28 <_dtoa_r+0x8c8>
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	6933      	ldr	r3, [r6, #16]
 800992c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009930:	6918      	ldr	r0, [r3, #16]
 8009932:	f000 fcd7 	bl	800a2e4 <__hi0bits>
 8009936:	f1c0 0020 	rsb	r0, r0, #32
 800993a:	9b05      	ldr	r3, [sp, #20]
 800993c:	4418      	add	r0, r3
 800993e:	f010 001f 	ands.w	r0, r0, #31
 8009942:	f000 8092 	beq.w	8009a6a <_dtoa_r+0x90a>
 8009946:	f1c0 0320 	rsb	r3, r0, #32
 800994a:	2b04      	cmp	r3, #4
 800994c:	f340 808a 	ble.w	8009a64 <_dtoa_r+0x904>
 8009950:	f1c0 001c 	rsb	r0, r0, #28
 8009954:	9b04      	ldr	r3, [sp, #16]
 8009956:	4403      	add	r3, r0
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	9b05      	ldr	r3, [sp, #20]
 800995c:	4403      	add	r3, r0
 800995e:	4405      	add	r5, r0
 8009960:	9305      	str	r3, [sp, #20]
 8009962:	9b04      	ldr	r3, [sp, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	dd07      	ble.n	8009978 <_dtoa_r+0x818>
 8009968:	ee18 1a10 	vmov	r1, s16
 800996c:	461a      	mov	r2, r3
 800996e:	4620      	mov	r0, r4
 8009970:	f000 fe22 	bl	800a5b8 <__lshift>
 8009974:	ee08 0a10 	vmov	s16, r0
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	dd05      	ble.n	800998a <_dtoa_r+0x82a>
 800997e:	4631      	mov	r1, r6
 8009980:	461a      	mov	r2, r3
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fe18 	bl	800a5b8 <__lshift>
 8009988:	4606      	mov	r6, r0
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	d06e      	beq.n	8009a6e <_dtoa_r+0x90e>
 8009990:	ee18 0a10 	vmov	r0, s16
 8009994:	4631      	mov	r1, r6
 8009996:	f000 fe7f 	bl	800a698 <__mcmp>
 800999a:	2800      	cmp	r0, #0
 800999c:	da67      	bge.n	8009a6e <_dtoa_r+0x90e>
 800999e:	9b00      	ldr	r3, [sp, #0]
 80099a0:	3b01      	subs	r3, #1
 80099a2:	ee18 1a10 	vmov	r1, s16
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	220a      	movs	r2, #10
 80099aa:	2300      	movs	r3, #0
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fc53 	bl	800a258 <__multadd>
 80099b2:	9b08      	ldr	r3, [sp, #32]
 80099b4:	ee08 0a10 	vmov	s16, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 81b1 	beq.w	8009d20 <_dtoa_r+0xbc0>
 80099be:	2300      	movs	r3, #0
 80099c0:	4639      	mov	r1, r7
 80099c2:	220a      	movs	r2, #10
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 fc47 	bl	800a258 <__multadd>
 80099ca:	9b02      	ldr	r3, [sp, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	4607      	mov	r7, r0
 80099d0:	f300 808e 	bgt.w	8009af0 <_dtoa_r+0x990>
 80099d4:	9b06      	ldr	r3, [sp, #24]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	dc51      	bgt.n	8009a7e <_dtoa_r+0x91e>
 80099da:	e089      	b.n	8009af0 <_dtoa_r+0x990>
 80099dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099e2:	e74b      	b.n	800987c <_dtoa_r+0x71c>
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	1e5e      	subs	r6, r3, #1
 80099e8:	9b07      	ldr	r3, [sp, #28]
 80099ea:	42b3      	cmp	r3, r6
 80099ec:	bfbf      	itttt	lt
 80099ee:	9b07      	ldrlt	r3, [sp, #28]
 80099f0:	9607      	strlt	r6, [sp, #28]
 80099f2:	1af2      	sublt	r2, r6, r3
 80099f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80099f6:	bfb6      	itet	lt
 80099f8:	189b      	addlt	r3, r3, r2
 80099fa:	1b9e      	subge	r6, r3, r6
 80099fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	bfb8      	it	lt
 8009a02:	2600      	movlt	r6, #0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfb7      	itett	lt
 8009a08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009a0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009a10:	1a9d      	sublt	r5, r3, r2
 8009a12:	2300      	movlt	r3, #0
 8009a14:	e734      	b.n	8009880 <_dtoa_r+0x720>
 8009a16:	9e07      	ldr	r6, [sp, #28]
 8009a18:	9d04      	ldr	r5, [sp, #16]
 8009a1a:	9f08      	ldr	r7, [sp, #32]
 8009a1c:	e73b      	b.n	8009896 <_dtoa_r+0x736>
 8009a1e:	9a07      	ldr	r2, [sp, #28]
 8009a20:	e767      	b.n	80098f2 <_dtoa_r+0x792>
 8009a22:	9b06      	ldr	r3, [sp, #24]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	dc18      	bgt.n	8009a5a <_dtoa_r+0x8fa>
 8009a28:	f1ba 0f00 	cmp.w	sl, #0
 8009a2c:	d115      	bne.n	8009a5a <_dtoa_r+0x8fa>
 8009a2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a32:	b993      	cbnz	r3, 8009a5a <_dtoa_r+0x8fa>
 8009a34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a38:	0d1b      	lsrs	r3, r3, #20
 8009a3a:	051b      	lsls	r3, r3, #20
 8009a3c:	b183      	cbz	r3, 8009a60 <_dtoa_r+0x900>
 8009a3e:	9b04      	ldr	r3, [sp, #16]
 8009a40:	3301      	adds	r3, #1
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	3301      	adds	r3, #1
 8009a48:	9305      	str	r3, [sp, #20]
 8009a4a:	f04f 0801 	mov.w	r8, #1
 8009a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f47f af6a 	bne.w	800992a <_dtoa_r+0x7ca>
 8009a56:	2001      	movs	r0, #1
 8009a58:	e76f      	b.n	800993a <_dtoa_r+0x7da>
 8009a5a:	f04f 0800 	mov.w	r8, #0
 8009a5e:	e7f6      	b.n	8009a4e <_dtoa_r+0x8ee>
 8009a60:	4698      	mov	r8, r3
 8009a62:	e7f4      	b.n	8009a4e <_dtoa_r+0x8ee>
 8009a64:	f43f af7d 	beq.w	8009962 <_dtoa_r+0x802>
 8009a68:	4618      	mov	r0, r3
 8009a6a:	301c      	adds	r0, #28
 8009a6c:	e772      	b.n	8009954 <_dtoa_r+0x7f4>
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dc37      	bgt.n	8009ae4 <_dtoa_r+0x984>
 8009a74:	9b06      	ldr	r3, [sp, #24]
 8009a76:	2b02      	cmp	r3, #2
 8009a78:	dd34      	ble.n	8009ae4 <_dtoa_r+0x984>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	9302      	str	r3, [sp, #8]
 8009a7e:	9b02      	ldr	r3, [sp, #8]
 8009a80:	b96b      	cbnz	r3, 8009a9e <_dtoa_r+0x93e>
 8009a82:	4631      	mov	r1, r6
 8009a84:	2205      	movs	r2, #5
 8009a86:	4620      	mov	r0, r4
 8009a88:	f000 fbe6 	bl	800a258 <__multadd>
 8009a8c:	4601      	mov	r1, r0
 8009a8e:	4606      	mov	r6, r0
 8009a90:	ee18 0a10 	vmov	r0, s16
 8009a94:	f000 fe00 	bl	800a698 <__mcmp>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f73f adbb 	bgt.w	8009614 <_dtoa_r+0x4b4>
 8009a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa0:	9d01      	ldr	r5, [sp, #4]
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fbb1 	bl	800a214 <_Bfree>
 8009ab2:	2f00      	cmp	r7, #0
 8009ab4:	f43f aea4 	beq.w	8009800 <_dtoa_r+0x6a0>
 8009ab8:	f1b8 0f00 	cmp.w	r8, #0
 8009abc:	d005      	beq.n	8009aca <_dtoa_r+0x96a>
 8009abe:	45b8      	cmp	r8, r7
 8009ac0:	d003      	beq.n	8009aca <_dtoa_r+0x96a>
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fba5 	bl	800a214 <_Bfree>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fba1 	bl	800a214 <_Bfree>
 8009ad2:	e695      	b.n	8009800 <_dtoa_r+0x6a0>
 8009ad4:	2600      	movs	r6, #0
 8009ad6:	4637      	mov	r7, r6
 8009ad8:	e7e1      	b.n	8009a9e <_dtoa_r+0x93e>
 8009ada:	9700      	str	r7, [sp, #0]
 8009adc:	4637      	mov	r7, r6
 8009ade:	e599      	b.n	8009614 <_dtoa_r+0x4b4>
 8009ae0:	40240000 	.word	0x40240000
 8009ae4:	9b08      	ldr	r3, [sp, #32]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80ca 	beq.w	8009c80 <_dtoa_r+0xb20>
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	9302      	str	r3, [sp, #8]
 8009af0:	2d00      	cmp	r5, #0
 8009af2:	dd05      	ble.n	8009b00 <_dtoa_r+0x9a0>
 8009af4:	4639      	mov	r1, r7
 8009af6:	462a      	mov	r2, r5
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fd5d 	bl	800a5b8 <__lshift>
 8009afe:	4607      	mov	r7, r0
 8009b00:	f1b8 0f00 	cmp.w	r8, #0
 8009b04:	d05b      	beq.n	8009bbe <_dtoa_r+0xa5e>
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fb43 	bl	800a194 <_Balloc>
 8009b0e:	4605      	mov	r5, r0
 8009b10:	b928      	cbnz	r0, 8009b1e <_dtoa_r+0x9be>
 8009b12:	4b87      	ldr	r3, [pc, #540]	; (8009d30 <_dtoa_r+0xbd0>)
 8009b14:	4602      	mov	r2, r0
 8009b16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b1a:	f7ff bb3b 	b.w	8009194 <_dtoa_r+0x34>
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	3202      	adds	r2, #2
 8009b22:	0092      	lsls	r2, r2, #2
 8009b24:	f107 010c 	add.w	r1, r7, #12
 8009b28:	300c      	adds	r0, #12
 8009b2a:	f7fe fcd7 	bl	80084dc <memcpy>
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4629      	mov	r1, r5
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 fd40 	bl	800a5b8 <__lshift>
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	f103 0901 	add.w	r9, r3, #1
 8009b3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009b42:	4413      	add	r3, r2
 8009b44:	9305      	str	r3, [sp, #20]
 8009b46:	f00a 0301 	and.w	r3, sl, #1
 8009b4a:	46b8      	mov	r8, r7
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	4607      	mov	r7, r0
 8009b50:	4631      	mov	r1, r6
 8009b52:	ee18 0a10 	vmov	r0, s16
 8009b56:	f7ff fa77 	bl	8009048 <quorem>
 8009b5a:	4641      	mov	r1, r8
 8009b5c:	9002      	str	r0, [sp, #8]
 8009b5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b62:	ee18 0a10 	vmov	r0, s16
 8009b66:	f000 fd97 	bl	800a698 <__mcmp>
 8009b6a:	463a      	mov	r2, r7
 8009b6c:	9003      	str	r0, [sp, #12]
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4620      	mov	r0, r4
 8009b72:	f000 fdad 	bl	800a6d0 <__mdiff>
 8009b76:	68c2      	ldr	r2, [r0, #12]
 8009b78:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	bb02      	cbnz	r2, 8009bc2 <_dtoa_r+0xa62>
 8009b80:	4601      	mov	r1, r0
 8009b82:	ee18 0a10 	vmov	r0, s16
 8009b86:	f000 fd87 	bl	800a698 <__mcmp>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4620      	mov	r0, r4
 8009b90:	9207      	str	r2, [sp, #28]
 8009b92:	f000 fb3f 	bl	800a214 <_Bfree>
 8009b96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b9a:	ea43 0102 	orr.w	r1, r3, r2
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	464d      	mov	r5, r9
 8009ba4:	d10f      	bne.n	8009bc6 <_dtoa_r+0xa66>
 8009ba6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009baa:	d02a      	beq.n	8009c02 <_dtoa_r+0xaa2>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dd02      	ble.n	8009bb8 <_dtoa_r+0xa58>
 8009bb2:	9b02      	ldr	r3, [sp, #8]
 8009bb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009bb8:	f88b a000 	strb.w	sl, [fp]
 8009bbc:	e775      	b.n	8009aaa <_dtoa_r+0x94a>
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	e7ba      	b.n	8009b38 <_dtoa_r+0x9d8>
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	e7e2      	b.n	8009b8c <_dtoa_r+0xa2c>
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	db04      	blt.n	8009bd6 <_dtoa_r+0xa76>
 8009bcc:	9906      	ldr	r1, [sp, #24]
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	9904      	ldr	r1, [sp, #16]
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	d122      	bne.n	8009c1c <_dtoa_r+0xabc>
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	ddee      	ble.n	8009bb8 <_dtoa_r+0xa58>
 8009bda:	ee18 1a10 	vmov	r1, s16
 8009bde:	2201      	movs	r2, #1
 8009be0:	4620      	mov	r0, r4
 8009be2:	f000 fce9 	bl	800a5b8 <__lshift>
 8009be6:	4631      	mov	r1, r6
 8009be8:	ee08 0a10 	vmov	s16, r0
 8009bec:	f000 fd54 	bl	800a698 <__mcmp>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	dc03      	bgt.n	8009bfc <_dtoa_r+0xa9c>
 8009bf4:	d1e0      	bne.n	8009bb8 <_dtoa_r+0xa58>
 8009bf6:	f01a 0f01 	tst.w	sl, #1
 8009bfa:	d0dd      	beq.n	8009bb8 <_dtoa_r+0xa58>
 8009bfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c00:	d1d7      	bne.n	8009bb2 <_dtoa_r+0xa52>
 8009c02:	2339      	movs	r3, #57	; 0x39
 8009c04:	f88b 3000 	strb.w	r3, [fp]
 8009c08:	462b      	mov	r3, r5
 8009c0a:	461d      	mov	r5, r3
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c12:	2a39      	cmp	r2, #57	; 0x39
 8009c14:	d071      	beq.n	8009cfa <_dtoa_r+0xb9a>
 8009c16:	3201      	adds	r2, #1
 8009c18:	701a      	strb	r2, [r3, #0]
 8009c1a:	e746      	b.n	8009aaa <_dtoa_r+0x94a>
 8009c1c:	2a00      	cmp	r2, #0
 8009c1e:	dd07      	ble.n	8009c30 <_dtoa_r+0xad0>
 8009c20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009c24:	d0ed      	beq.n	8009c02 <_dtoa_r+0xaa2>
 8009c26:	f10a 0301 	add.w	r3, sl, #1
 8009c2a:	f88b 3000 	strb.w	r3, [fp]
 8009c2e:	e73c      	b.n	8009aaa <_dtoa_r+0x94a>
 8009c30:	9b05      	ldr	r3, [sp, #20]
 8009c32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009c36:	4599      	cmp	r9, r3
 8009c38:	d047      	beq.n	8009cca <_dtoa_r+0xb6a>
 8009c3a:	ee18 1a10 	vmov	r1, s16
 8009c3e:	2300      	movs	r3, #0
 8009c40:	220a      	movs	r2, #10
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fb08 	bl	800a258 <__multadd>
 8009c48:	45b8      	cmp	r8, r7
 8009c4a:	ee08 0a10 	vmov	s16, r0
 8009c4e:	f04f 0300 	mov.w	r3, #0
 8009c52:	f04f 020a 	mov.w	r2, #10
 8009c56:	4641      	mov	r1, r8
 8009c58:	4620      	mov	r0, r4
 8009c5a:	d106      	bne.n	8009c6a <_dtoa_r+0xb0a>
 8009c5c:	f000 fafc 	bl	800a258 <__multadd>
 8009c60:	4680      	mov	r8, r0
 8009c62:	4607      	mov	r7, r0
 8009c64:	f109 0901 	add.w	r9, r9, #1
 8009c68:	e772      	b.n	8009b50 <_dtoa_r+0x9f0>
 8009c6a:	f000 faf5 	bl	800a258 <__multadd>
 8009c6e:	4639      	mov	r1, r7
 8009c70:	4680      	mov	r8, r0
 8009c72:	2300      	movs	r3, #0
 8009c74:	220a      	movs	r2, #10
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 faee 	bl	800a258 <__multadd>
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	e7f1      	b.n	8009c64 <_dtoa_r+0xb04>
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	9302      	str	r3, [sp, #8]
 8009c84:	9d01      	ldr	r5, [sp, #4]
 8009c86:	ee18 0a10 	vmov	r0, s16
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	f7ff f9dc 	bl	8009048 <quorem>
 8009c90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c94:	9b01      	ldr	r3, [sp, #4]
 8009c96:	f805 ab01 	strb.w	sl, [r5], #1
 8009c9a:	1aea      	subs	r2, r5, r3
 8009c9c:	9b02      	ldr	r3, [sp, #8]
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	dd09      	ble.n	8009cb6 <_dtoa_r+0xb56>
 8009ca2:	ee18 1a10 	vmov	r1, s16
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	220a      	movs	r2, #10
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fad4 	bl	800a258 <__multadd>
 8009cb0:	ee08 0a10 	vmov	s16, r0
 8009cb4:	e7e7      	b.n	8009c86 <_dtoa_r+0xb26>
 8009cb6:	9b02      	ldr	r3, [sp, #8]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	bfc8      	it	gt
 8009cbc:	461d      	movgt	r5, r3
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	bfd8      	it	le
 8009cc2:	2501      	movle	r5, #1
 8009cc4:	441d      	add	r5, r3
 8009cc6:	f04f 0800 	mov.w	r8, #0
 8009cca:	ee18 1a10 	vmov	r1, s16
 8009cce:	2201      	movs	r2, #1
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 fc71 	bl	800a5b8 <__lshift>
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	ee08 0a10 	vmov	s16, r0
 8009cdc:	f000 fcdc 	bl	800a698 <__mcmp>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	dc91      	bgt.n	8009c08 <_dtoa_r+0xaa8>
 8009ce4:	d102      	bne.n	8009cec <_dtoa_r+0xb8c>
 8009ce6:	f01a 0f01 	tst.w	sl, #1
 8009cea:	d18d      	bne.n	8009c08 <_dtoa_r+0xaa8>
 8009cec:	462b      	mov	r3, r5
 8009cee:	461d      	mov	r5, r3
 8009cf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cf4:	2a30      	cmp	r2, #48	; 0x30
 8009cf6:	d0fa      	beq.n	8009cee <_dtoa_r+0xb8e>
 8009cf8:	e6d7      	b.n	8009aaa <_dtoa_r+0x94a>
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d184      	bne.n	8009c0a <_dtoa_r+0xaaa>
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	2331      	movs	r3, #49	; 0x31
 8009d08:	7013      	strb	r3, [r2, #0]
 8009d0a:	e6ce      	b.n	8009aaa <_dtoa_r+0x94a>
 8009d0c:	4b09      	ldr	r3, [pc, #36]	; (8009d34 <_dtoa_r+0xbd4>)
 8009d0e:	f7ff ba95 	b.w	800923c <_dtoa_r+0xdc>
 8009d12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	f47f aa6e 	bne.w	80091f6 <_dtoa_r+0x96>
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <_dtoa_r+0xbd8>)
 8009d1c:	f7ff ba8e 	b.w	800923c <_dtoa_r+0xdc>
 8009d20:	9b02      	ldr	r3, [sp, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	dcae      	bgt.n	8009c84 <_dtoa_r+0xb24>
 8009d26:	9b06      	ldr	r3, [sp, #24]
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	f73f aea8 	bgt.w	8009a7e <_dtoa_r+0x91e>
 8009d2e:	e7a9      	b.n	8009c84 <_dtoa_r+0xb24>
 8009d30:	0800b1d7 	.word	0x0800b1d7
 8009d34:	0800b134 	.word	0x0800b134
 8009d38:	0800b158 	.word	0x0800b158

08009d3c <__sflush_r>:
 8009d3c:	898a      	ldrh	r2, [r1, #12]
 8009d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d42:	4605      	mov	r5, r0
 8009d44:	0710      	lsls	r0, r2, #28
 8009d46:	460c      	mov	r4, r1
 8009d48:	d458      	bmi.n	8009dfc <__sflush_r+0xc0>
 8009d4a:	684b      	ldr	r3, [r1, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc05      	bgt.n	8009d5c <__sflush_r+0x20>
 8009d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dc02      	bgt.n	8009d5c <__sflush_r+0x20>
 8009d56:	2000      	movs	r0, #0
 8009d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	d0f9      	beq.n	8009d56 <__sflush_r+0x1a>
 8009d62:	2300      	movs	r3, #0
 8009d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d68:	682f      	ldr	r7, [r5, #0]
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	d032      	beq.n	8009dd4 <__sflush_r+0x98>
 8009d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	075a      	lsls	r2, r3, #29
 8009d74:	d505      	bpl.n	8009d82 <__sflush_r+0x46>
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	1ac0      	subs	r0, r0, r3
 8009d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d7c:	b10b      	cbz	r3, 8009d82 <__sflush_r+0x46>
 8009d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d80:	1ac0      	subs	r0, r0, r3
 8009d82:	2300      	movs	r3, #0
 8009d84:	4602      	mov	r2, r0
 8009d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d88:	6a21      	ldr	r1, [r4, #32]
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b0      	blx	r6
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	d106      	bne.n	8009da2 <__sflush_r+0x66>
 8009d94:	6829      	ldr	r1, [r5, #0]
 8009d96:	291d      	cmp	r1, #29
 8009d98:	d82c      	bhi.n	8009df4 <__sflush_r+0xb8>
 8009d9a:	4a2a      	ldr	r2, [pc, #168]	; (8009e44 <__sflush_r+0x108>)
 8009d9c:	40ca      	lsrs	r2, r1
 8009d9e:	07d6      	lsls	r6, r2, #31
 8009da0:	d528      	bpl.n	8009df4 <__sflush_r+0xb8>
 8009da2:	2200      	movs	r2, #0
 8009da4:	6062      	str	r2, [r4, #4]
 8009da6:	04d9      	lsls	r1, r3, #19
 8009da8:	6922      	ldr	r2, [r4, #16]
 8009daa:	6022      	str	r2, [r4, #0]
 8009dac:	d504      	bpl.n	8009db8 <__sflush_r+0x7c>
 8009dae:	1c42      	adds	r2, r0, #1
 8009db0:	d101      	bne.n	8009db6 <__sflush_r+0x7a>
 8009db2:	682b      	ldr	r3, [r5, #0]
 8009db4:	b903      	cbnz	r3, 8009db8 <__sflush_r+0x7c>
 8009db6:	6560      	str	r0, [r4, #84]	; 0x54
 8009db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dba:	602f      	str	r7, [r5, #0]
 8009dbc:	2900      	cmp	r1, #0
 8009dbe:	d0ca      	beq.n	8009d56 <__sflush_r+0x1a>
 8009dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	d002      	beq.n	8009dce <__sflush_r+0x92>
 8009dc8:	4628      	mov	r0, r5
 8009dca:	f000 fd7d 	bl	800a8c8 <_free_r>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8009dd2:	e7c1      	b.n	8009d58 <__sflush_r+0x1c>
 8009dd4:	6a21      	ldr	r1, [r4, #32]
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b0      	blx	r6
 8009ddc:	1c41      	adds	r1, r0, #1
 8009dde:	d1c7      	bne.n	8009d70 <__sflush_r+0x34>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0c4      	beq.n	8009d70 <__sflush_r+0x34>
 8009de6:	2b1d      	cmp	r3, #29
 8009de8:	d001      	beq.n	8009dee <__sflush_r+0xb2>
 8009dea:	2b16      	cmp	r3, #22
 8009dec:	d101      	bne.n	8009df2 <__sflush_r+0xb6>
 8009dee:	602f      	str	r7, [r5, #0]
 8009df0:	e7b1      	b.n	8009d56 <__sflush_r+0x1a>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	e7ad      	b.n	8009d58 <__sflush_r+0x1c>
 8009dfc:	690f      	ldr	r7, [r1, #16]
 8009dfe:	2f00      	cmp	r7, #0
 8009e00:	d0a9      	beq.n	8009d56 <__sflush_r+0x1a>
 8009e02:	0793      	lsls	r3, r2, #30
 8009e04:	680e      	ldr	r6, [r1, #0]
 8009e06:	bf08      	it	eq
 8009e08:	694b      	ldreq	r3, [r1, #20]
 8009e0a:	600f      	str	r7, [r1, #0]
 8009e0c:	bf18      	it	ne
 8009e0e:	2300      	movne	r3, #0
 8009e10:	eba6 0807 	sub.w	r8, r6, r7
 8009e14:	608b      	str	r3, [r1, #8]
 8009e16:	f1b8 0f00 	cmp.w	r8, #0
 8009e1a:	dd9c      	ble.n	8009d56 <__sflush_r+0x1a>
 8009e1c:	6a21      	ldr	r1, [r4, #32]
 8009e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e20:	4643      	mov	r3, r8
 8009e22:	463a      	mov	r2, r7
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b0      	blx	r6
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dc06      	bgt.n	8009e3a <__sflush_r+0xfe>
 8009e2c:	89a3      	ldrh	r3, [r4, #12]
 8009e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e78e      	b.n	8009d58 <__sflush_r+0x1c>
 8009e3a:	4407      	add	r7, r0
 8009e3c:	eba8 0800 	sub.w	r8, r8, r0
 8009e40:	e7e9      	b.n	8009e16 <__sflush_r+0xda>
 8009e42:	bf00      	nop
 8009e44:	20400001 	.word	0x20400001

08009e48 <_fflush_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	690b      	ldr	r3, [r1, #16]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	b913      	cbnz	r3, 8009e58 <_fflush_r+0x10>
 8009e52:	2500      	movs	r5, #0
 8009e54:	4628      	mov	r0, r5
 8009e56:	bd38      	pop	{r3, r4, r5, pc}
 8009e58:	b118      	cbz	r0, 8009e62 <_fflush_r+0x1a>
 8009e5a:	6983      	ldr	r3, [r0, #24]
 8009e5c:	b90b      	cbnz	r3, 8009e62 <_fflush_r+0x1a>
 8009e5e:	f000 f887 	bl	8009f70 <__sinit>
 8009e62:	4b14      	ldr	r3, [pc, #80]	; (8009eb4 <_fflush_r+0x6c>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	d11b      	bne.n	8009ea0 <_fflush_r+0x58>
 8009e68:	686c      	ldr	r4, [r5, #4]
 8009e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d0ef      	beq.n	8009e52 <_fflush_r+0xa>
 8009e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e74:	07d0      	lsls	r0, r2, #31
 8009e76:	d404      	bmi.n	8009e82 <_fflush_r+0x3a>
 8009e78:	0599      	lsls	r1, r3, #22
 8009e7a:	d402      	bmi.n	8009e82 <_fflush_r+0x3a>
 8009e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e7e:	f000 f91a 	bl	800a0b6 <__retarget_lock_acquire_recursive>
 8009e82:	4628      	mov	r0, r5
 8009e84:	4621      	mov	r1, r4
 8009e86:	f7ff ff59 	bl	8009d3c <__sflush_r>
 8009e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e8c:	07da      	lsls	r2, r3, #31
 8009e8e:	4605      	mov	r5, r0
 8009e90:	d4e0      	bmi.n	8009e54 <_fflush_r+0xc>
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	059b      	lsls	r3, r3, #22
 8009e96:	d4dd      	bmi.n	8009e54 <_fflush_r+0xc>
 8009e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e9a:	f000 f90d 	bl	800a0b8 <__retarget_lock_release_recursive>
 8009e9e:	e7d9      	b.n	8009e54 <_fflush_r+0xc>
 8009ea0:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <_fflush_r+0x70>)
 8009ea2:	429c      	cmp	r4, r3
 8009ea4:	d101      	bne.n	8009eaa <_fflush_r+0x62>
 8009ea6:	68ac      	ldr	r4, [r5, #8]
 8009ea8:	e7df      	b.n	8009e6a <_fflush_r+0x22>
 8009eaa:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <_fflush_r+0x74>)
 8009eac:	429c      	cmp	r4, r3
 8009eae:	bf08      	it	eq
 8009eb0:	68ec      	ldreq	r4, [r5, #12]
 8009eb2:	e7da      	b.n	8009e6a <_fflush_r+0x22>
 8009eb4:	0800b208 	.word	0x0800b208
 8009eb8:	0800b228 	.word	0x0800b228
 8009ebc:	0800b1e8 	.word	0x0800b1e8

08009ec0 <std>:
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	b510      	push	{r4, lr}
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	e9c0 3300 	strd	r3, r3, [r0]
 8009eca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ece:	6083      	str	r3, [r0, #8]
 8009ed0:	8181      	strh	r1, [r0, #12]
 8009ed2:	6643      	str	r3, [r0, #100]	; 0x64
 8009ed4:	81c2      	strh	r2, [r0, #14]
 8009ed6:	6183      	str	r3, [r0, #24]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	2208      	movs	r2, #8
 8009edc:	305c      	adds	r0, #92	; 0x5c
 8009ede:	f7fe fb0b 	bl	80084f8 <memset>
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <std+0x38>)
 8009ee4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <std+0x3c>)
 8009ee8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <std+0x40>)
 8009eec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009eee:	4b05      	ldr	r3, [pc, #20]	; (8009f04 <std+0x44>)
 8009ef0:	6224      	str	r4, [r4, #32]
 8009ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0800ad5d 	.word	0x0800ad5d
 8009efc:	0800ad7f 	.word	0x0800ad7f
 8009f00:	0800adb7 	.word	0x0800adb7
 8009f04:	0800addb 	.word	0x0800addb

08009f08 <_cleanup_r>:
 8009f08:	4901      	ldr	r1, [pc, #4]	; (8009f10 <_cleanup_r+0x8>)
 8009f0a:	f000 b8af 	b.w	800a06c <_fwalk_reent>
 8009f0e:	bf00      	nop
 8009f10:	08009e49 	.word	0x08009e49

08009f14 <__sfmoreglue>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	2268      	movs	r2, #104	; 0x68
 8009f18:	1e4d      	subs	r5, r1, #1
 8009f1a:	4355      	muls	r5, r2
 8009f1c:	460e      	mov	r6, r1
 8009f1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f22:	f000 fd3d 	bl	800a9a0 <_malloc_r>
 8009f26:	4604      	mov	r4, r0
 8009f28:	b140      	cbz	r0, 8009f3c <__sfmoreglue+0x28>
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	e9c0 1600 	strd	r1, r6, [r0]
 8009f30:	300c      	adds	r0, #12
 8009f32:	60a0      	str	r0, [r4, #8]
 8009f34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f38:	f7fe fade 	bl	80084f8 <memset>
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}

08009f40 <__sfp_lock_acquire>:
 8009f40:	4801      	ldr	r0, [pc, #4]	; (8009f48 <__sfp_lock_acquire+0x8>)
 8009f42:	f000 b8b8 	b.w	800a0b6 <__retarget_lock_acquire_recursive>
 8009f46:	bf00      	nop
 8009f48:	20014265 	.word	0x20014265

08009f4c <__sfp_lock_release>:
 8009f4c:	4801      	ldr	r0, [pc, #4]	; (8009f54 <__sfp_lock_release+0x8>)
 8009f4e:	f000 b8b3 	b.w	800a0b8 <__retarget_lock_release_recursive>
 8009f52:	bf00      	nop
 8009f54:	20014265 	.word	0x20014265

08009f58 <__sinit_lock_acquire>:
 8009f58:	4801      	ldr	r0, [pc, #4]	; (8009f60 <__sinit_lock_acquire+0x8>)
 8009f5a:	f000 b8ac 	b.w	800a0b6 <__retarget_lock_acquire_recursive>
 8009f5e:	bf00      	nop
 8009f60:	20014266 	.word	0x20014266

08009f64 <__sinit_lock_release>:
 8009f64:	4801      	ldr	r0, [pc, #4]	; (8009f6c <__sinit_lock_release+0x8>)
 8009f66:	f000 b8a7 	b.w	800a0b8 <__retarget_lock_release_recursive>
 8009f6a:	bf00      	nop
 8009f6c:	20014266 	.word	0x20014266

08009f70 <__sinit>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	4604      	mov	r4, r0
 8009f74:	f7ff fff0 	bl	8009f58 <__sinit_lock_acquire>
 8009f78:	69a3      	ldr	r3, [r4, #24]
 8009f7a:	b11b      	cbz	r3, 8009f84 <__sinit+0x14>
 8009f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f80:	f7ff bff0 	b.w	8009f64 <__sinit_lock_release>
 8009f84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f88:	6523      	str	r3, [r4, #80]	; 0x50
 8009f8a:	4b13      	ldr	r3, [pc, #76]	; (8009fd8 <__sinit+0x68>)
 8009f8c:	4a13      	ldr	r2, [pc, #76]	; (8009fdc <__sinit+0x6c>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f92:	42a3      	cmp	r3, r4
 8009f94:	bf04      	itt	eq
 8009f96:	2301      	moveq	r3, #1
 8009f98:	61a3      	streq	r3, [r4, #24]
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 f820 	bl	8009fe0 <__sfp>
 8009fa0:	6060      	str	r0, [r4, #4]
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 f81c 	bl	8009fe0 <__sfp>
 8009fa8:	60a0      	str	r0, [r4, #8]
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f818 	bl	8009fe0 <__sfp>
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	60e0      	str	r0, [r4, #12]
 8009fb4:	2104      	movs	r1, #4
 8009fb6:	6860      	ldr	r0, [r4, #4]
 8009fb8:	f7ff ff82 	bl	8009ec0 <std>
 8009fbc:	68a0      	ldr	r0, [r4, #8]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	2109      	movs	r1, #9
 8009fc2:	f7ff ff7d 	bl	8009ec0 <std>
 8009fc6:	68e0      	ldr	r0, [r4, #12]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	2112      	movs	r1, #18
 8009fcc:	f7ff ff78 	bl	8009ec0 <std>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	61a3      	str	r3, [r4, #24]
 8009fd4:	e7d2      	b.n	8009f7c <__sinit+0xc>
 8009fd6:	bf00      	nop
 8009fd8:	0800b120 	.word	0x0800b120
 8009fdc:	08009f09 	.word	0x08009f09

08009fe0 <__sfp>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	f7ff ffac 	bl	8009f40 <__sfp_lock_acquire>
 8009fe8:	4b1e      	ldr	r3, [pc, #120]	; (800a064 <__sfp+0x84>)
 8009fea:	681e      	ldr	r6, [r3, #0]
 8009fec:	69b3      	ldr	r3, [r6, #24]
 8009fee:	b913      	cbnz	r3, 8009ff6 <__sfp+0x16>
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7ff ffbd 	bl	8009f70 <__sinit>
 8009ff6:	3648      	adds	r6, #72	; 0x48
 8009ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	d503      	bpl.n	800a008 <__sfp+0x28>
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	b30b      	cbz	r3, 800a048 <__sfp+0x68>
 800a004:	6836      	ldr	r6, [r6, #0]
 800a006:	e7f7      	b.n	8009ff8 <__sfp+0x18>
 800a008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a00c:	b9d5      	cbnz	r5, 800a044 <__sfp+0x64>
 800a00e:	4b16      	ldr	r3, [pc, #88]	; (800a068 <__sfp+0x88>)
 800a010:	60e3      	str	r3, [r4, #12]
 800a012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a016:	6665      	str	r5, [r4, #100]	; 0x64
 800a018:	f000 f84c 	bl	800a0b4 <__retarget_lock_init_recursive>
 800a01c:	f7ff ff96 	bl	8009f4c <__sfp_lock_release>
 800a020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a028:	6025      	str	r5, [r4, #0]
 800a02a:	61a5      	str	r5, [r4, #24]
 800a02c:	2208      	movs	r2, #8
 800a02e:	4629      	mov	r1, r5
 800a030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a034:	f7fe fa60 	bl	80084f8 <memset>
 800a038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a03c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a040:	4620      	mov	r0, r4
 800a042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a044:	3468      	adds	r4, #104	; 0x68
 800a046:	e7d9      	b.n	8009ffc <__sfp+0x1c>
 800a048:	2104      	movs	r1, #4
 800a04a:	4638      	mov	r0, r7
 800a04c:	f7ff ff62 	bl	8009f14 <__sfmoreglue>
 800a050:	4604      	mov	r4, r0
 800a052:	6030      	str	r0, [r6, #0]
 800a054:	2800      	cmp	r0, #0
 800a056:	d1d5      	bne.n	800a004 <__sfp+0x24>
 800a058:	f7ff ff78 	bl	8009f4c <__sfp_lock_release>
 800a05c:	230c      	movs	r3, #12
 800a05e:	603b      	str	r3, [r7, #0]
 800a060:	e7ee      	b.n	800a040 <__sfp+0x60>
 800a062:	bf00      	nop
 800a064:	0800b120 	.word	0x0800b120
 800a068:	ffff0001 	.word	0xffff0001

0800a06c <_fwalk_reent>:
 800a06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a070:	4606      	mov	r6, r0
 800a072:	4688      	mov	r8, r1
 800a074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a078:	2700      	movs	r7, #0
 800a07a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a07e:	f1b9 0901 	subs.w	r9, r9, #1
 800a082:	d505      	bpl.n	800a090 <_fwalk_reent+0x24>
 800a084:	6824      	ldr	r4, [r4, #0]
 800a086:	2c00      	cmp	r4, #0
 800a088:	d1f7      	bne.n	800a07a <_fwalk_reent+0xe>
 800a08a:	4638      	mov	r0, r7
 800a08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a090:	89ab      	ldrh	r3, [r5, #12]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d907      	bls.n	800a0a6 <_fwalk_reent+0x3a>
 800a096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a09a:	3301      	adds	r3, #1
 800a09c:	d003      	beq.n	800a0a6 <_fwalk_reent+0x3a>
 800a09e:	4629      	mov	r1, r5
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	47c0      	blx	r8
 800a0a4:	4307      	orrs	r7, r0
 800a0a6:	3568      	adds	r5, #104	; 0x68
 800a0a8:	e7e9      	b.n	800a07e <_fwalk_reent+0x12>
	...

0800a0ac <_localeconv_r>:
 800a0ac:	4800      	ldr	r0, [pc, #0]	; (800a0b0 <_localeconv_r+0x4>)
 800a0ae:	4770      	bx	lr
 800a0b0:	20000168 	.word	0x20000168

0800a0b4 <__retarget_lock_init_recursive>:
 800a0b4:	4770      	bx	lr

0800a0b6 <__retarget_lock_acquire_recursive>:
 800a0b6:	4770      	bx	lr

0800a0b8 <__retarget_lock_release_recursive>:
 800a0b8:	4770      	bx	lr

0800a0ba <__swhatbuf_r>:
 800a0ba:	b570      	push	{r4, r5, r6, lr}
 800a0bc:	460e      	mov	r6, r1
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	2900      	cmp	r1, #0
 800a0c4:	b096      	sub	sp, #88	; 0x58
 800a0c6:	4614      	mov	r4, r2
 800a0c8:	461d      	mov	r5, r3
 800a0ca:	da08      	bge.n	800a0de <__swhatbuf_r+0x24>
 800a0cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	602a      	str	r2, [r5, #0]
 800a0d4:	061a      	lsls	r2, r3, #24
 800a0d6:	d410      	bmi.n	800a0fa <__swhatbuf_r+0x40>
 800a0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0dc:	e00e      	b.n	800a0fc <__swhatbuf_r+0x42>
 800a0de:	466a      	mov	r2, sp
 800a0e0:	f000 fed2 	bl	800ae88 <_fstat_r>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	dbf1      	blt.n	800a0cc <__swhatbuf_r+0x12>
 800a0e8:	9a01      	ldr	r2, [sp, #4]
 800a0ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0f2:	425a      	negs	r2, r3
 800a0f4:	415a      	adcs	r2, r3
 800a0f6:	602a      	str	r2, [r5, #0]
 800a0f8:	e7ee      	b.n	800a0d8 <__swhatbuf_r+0x1e>
 800a0fa:	2340      	movs	r3, #64	; 0x40
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	b016      	add	sp, #88	; 0x58
 800a102:	bd70      	pop	{r4, r5, r6, pc}

0800a104 <__smakebuf_r>:
 800a104:	898b      	ldrh	r3, [r1, #12]
 800a106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a108:	079d      	lsls	r5, r3, #30
 800a10a:	4606      	mov	r6, r0
 800a10c:	460c      	mov	r4, r1
 800a10e:	d507      	bpl.n	800a120 <__smakebuf_r+0x1c>
 800a110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	6123      	str	r3, [r4, #16]
 800a118:	2301      	movs	r3, #1
 800a11a:	6163      	str	r3, [r4, #20]
 800a11c:	b002      	add	sp, #8
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	ab01      	add	r3, sp, #4
 800a122:	466a      	mov	r2, sp
 800a124:	f7ff ffc9 	bl	800a0ba <__swhatbuf_r>
 800a128:	9900      	ldr	r1, [sp, #0]
 800a12a:	4605      	mov	r5, r0
 800a12c:	4630      	mov	r0, r6
 800a12e:	f000 fc37 	bl	800a9a0 <_malloc_r>
 800a132:	b948      	cbnz	r0, 800a148 <__smakebuf_r+0x44>
 800a134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a138:	059a      	lsls	r2, r3, #22
 800a13a:	d4ef      	bmi.n	800a11c <__smakebuf_r+0x18>
 800a13c:	f023 0303 	bic.w	r3, r3, #3
 800a140:	f043 0302 	orr.w	r3, r3, #2
 800a144:	81a3      	strh	r3, [r4, #12]
 800a146:	e7e3      	b.n	800a110 <__smakebuf_r+0xc>
 800a148:	4b0d      	ldr	r3, [pc, #52]	; (800a180 <__smakebuf_r+0x7c>)
 800a14a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	6020      	str	r0, [r4, #0]
 800a150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a154:	81a3      	strh	r3, [r4, #12]
 800a156:	9b00      	ldr	r3, [sp, #0]
 800a158:	6163      	str	r3, [r4, #20]
 800a15a:	9b01      	ldr	r3, [sp, #4]
 800a15c:	6120      	str	r0, [r4, #16]
 800a15e:	b15b      	cbz	r3, 800a178 <__smakebuf_r+0x74>
 800a160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a164:	4630      	mov	r0, r6
 800a166:	f000 fea1 	bl	800aeac <_isatty_r>
 800a16a:	b128      	cbz	r0, 800a178 <__smakebuf_r+0x74>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	f023 0303 	bic.w	r3, r3, #3
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	89a0      	ldrh	r0, [r4, #12]
 800a17a:	4305      	orrs	r5, r0
 800a17c:	81a5      	strh	r5, [r4, #12]
 800a17e:	e7cd      	b.n	800a11c <__smakebuf_r+0x18>
 800a180:	08009f09 	.word	0x08009f09

0800a184 <malloc>:
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <malloc+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f000 bc09 	b.w	800a9a0 <_malloc_r>
 800a18e:	bf00      	nop
 800a190:	20000014 	.word	0x20000014

0800a194 <_Balloc>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a198:	4604      	mov	r4, r0
 800a19a:	460d      	mov	r5, r1
 800a19c:	b976      	cbnz	r6, 800a1bc <_Balloc+0x28>
 800a19e:	2010      	movs	r0, #16
 800a1a0:	f7ff fff0 	bl	800a184 <malloc>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	6260      	str	r0, [r4, #36]	; 0x24
 800a1a8:	b920      	cbnz	r0, 800a1b4 <_Balloc+0x20>
 800a1aa:	4b18      	ldr	r3, [pc, #96]	; (800a20c <_Balloc+0x78>)
 800a1ac:	4818      	ldr	r0, [pc, #96]	; (800a210 <_Balloc+0x7c>)
 800a1ae:	2166      	movs	r1, #102	; 0x66
 800a1b0:	f000 fe2a 	bl	800ae08 <__assert_func>
 800a1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1b8:	6006      	str	r6, [r0, #0]
 800a1ba:	60c6      	str	r6, [r0, #12]
 800a1bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a1be:	68f3      	ldr	r3, [r6, #12]
 800a1c0:	b183      	cbz	r3, 800a1e4 <_Balloc+0x50>
 800a1c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1ca:	b9b8      	cbnz	r0, 800a1fc <_Balloc+0x68>
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	fa01 f605 	lsl.w	r6, r1, r5
 800a1d2:	1d72      	adds	r2, r6, #5
 800a1d4:	0092      	lsls	r2, r2, #2
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f000 fb60 	bl	800a89c <_calloc_r>
 800a1dc:	b160      	cbz	r0, 800a1f8 <_Balloc+0x64>
 800a1de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1e2:	e00e      	b.n	800a202 <_Balloc+0x6e>
 800a1e4:	2221      	movs	r2, #33	; 0x21
 800a1e6:	2104      	movs	r1, #4
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 fb57 	bl	800a89c <_calloc_r>
 800a1ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1f0:	60f0      	str	r0, [r6, #12]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1e4      	bne.n	800a1c2 <_Balloc+0x2e>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	bd70      	pop	{r4, r5, r6, pc}
 800a1fc:	6802      	ldr	r2, [r0, #0]
 800a1fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a202:	2300      	movs	r3, #0
 800a204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a208:	e7f7      	b.n	800a1fa <_Balloc+0x66>
 800a20a:	bf00      	nop
 800a20c:	0800b165 	.word	0x0800b165
 800a210:	0800b248 	.word	0x0800b248

0800a214 <_Bfree>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a218:	4605      	mov	r5, r0
 800a21a:	460c      	mov	r4, r1
 800a21c:	b976      	cbnz	r6, 800a23c <_Bfree+0x28>
 800a21e:	2010      	movs	r0, #16
 800a220:	f7ff ffb0 	bl	800a184 <malloc>
 800a224:	4602      	mov	r2, r0
 800a226:	6268      	str	r0, [r5, #36]	; 0x24
 800a228:	b920      	cbnz	r0, 800a234 <_Bfree+0x20>
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <_Bfree+0x3c>)
 800a22c:	4809      	ldr	r0, [pc, #36]	; (800a254 <_Bfree+0x40>)
 800a22e:	218a      	movs	r1, #138	; 0x8a
 800a230:	f000 fdea 	bl	800ae08 <__assert_func>
 800a234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a238:	6006      	str	r6, [r0, #0]
 800a23a:	60c6      	str	r6, [r0, #12]
 800a23c:	b13c      	cbz	r4, 800a24e <_Bfree+0x3a>
 800a23e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a240:	6862      	ldr	r2, [r4, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a248:	6021      	str	r1, [r4, #0]
 800a24a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	0800b165 	.word	0x0800b165
 800a254:	0800b248 	.word	0x0800b248

0800a258 <__multadd>:
 800a258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25c:	690d      	ldr	r5, [r1, #16]
 800a25e:	4607      	mov	r7, r0
 800a260:	460c      	mov	r4, r1
 800a262:	461e      	mov	r6, r3
 800a264:	f101 0c14 	add.w	ip, r1, #20
 800a268:	2000      	movs	r0, #0
 800a26a:	f8dc 3000 	ldr.w	r3, [ip]
 800a26e:	b299      	uxth	r1, r3
 800a270:	fb02 6101 	mla	r1, r2, r1, r6
 800a274:	0c1e      	lsrs	r6, r3, #16
 800a276:	0c0b      	lsrs	r3, r1, #16
 800a278:	fb02 3306 	mla	r3, r2, r6, r3
 800a27c:	b289      	uxth	r1, r1
 800a27e:	3001      	adds	r0, #1
 800a280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a284:	4285      	cmp	r5, r0
 800a286:	f84c 1b04 	str.w	r1, [ip], #4
 800a28a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a28e:	dcec      	bgt.n	800a26a <__multadd+0x12>
 800a290:	b30e      	cbz	r6, 800a2d6 <__multadd+0x7e>
 800a292:	68a3      	ldr	r3, [r4, #8]
 800a294:	42ab      	cmp	r3, r5
 800a296:	dc19      	bgt.n	800a2cc <__multadd+0x74>
 800a298:	6861      	ldr	r1, [r4, #4]
 800a29a:	4638      	mov	r0, r7
 800a29c:	3101      	adds	r1, #1
 800a29e:	f7ff ff79 	bl	800a194 <_Balloc>
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <__multadd+0x5a>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	; (800a2dc <__multadd+0x84>)
 800a2aa:	480d      	ldr	r0, [pc, #52]	; (800a2e0 <__multadd+0x88>)
 800a2ac:	21b5      	movs	r1, #181	; 0xb5
 800a2ae:	f000 fdab 	bl	800ae08 <__assert_func>
 800a2b2:	6922      	ldr	r2, [r4, #16]
 800a2b4:	3202      	adds	r2, #2
 800a2b6:	f104 010c 	add.w	r1, r4, #12
 800a2ba:	0092      	lsls	r2, r2, #2
 800a2bc:	300c      	adds	r0, #12
 800a2be:	f7fe f90d 	bl	80084dc <memcpy>
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	f7ff ffa5 	bl	800a214 <_Bfree>
 800a2ca:	4644      	mov	r4, r8
 800a2cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	615e      	str	r6, [r3, #20]
 800a2d4:	6125      	str	r5, [r4, #16]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2dc:	0800b1d7 	.word	0x0800b1d7
 800a2e0:	0800b248 	.word	0x0800b248

0800a2e4 <__hi0bits>:
 800a2e4:	0c03      	lsrs	r3, r0, #16
 800a2e6:	041b      	lsls	r3, r3, #16
 800a2e8:	b9d3      	cbnz	r3, 800a320 <__hi0bits+0x3c>
 800a2ea:	0400      	lsls	r0, r0, #16
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2f2:	bf04      	itt	eq
 800a2f4:	0200      	lsleq	r0, r0, #8
 800a2f6:	3308      	addeq	r3, #8
 800a2f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2fc:	bf04      	itt	eq
 800a2fe:	0100      	lsleq	r0, r0, #4
 800a300:	3304      	addeq	r3, #4
 800a302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a306:	bf04      	itt	eq
 800a308:	0080      	lsleq	r0, r0, #2
 800a30a:	3302      	addeq	r3, #2
 800a30c:	2800      	cmp	r0, #0
 800a30e:	db05      	blt.n	800a31c <__hi0bits+0x38>
 800a310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a314:	f103 0301 	add.w	r3, r3, #1
 800a318:	bf08      	it	eq
 800a31a:	2320      	moveq	r3, #32
 800a31c:	4618      	mov	r0, r3
 800a31e:	4770      	bx	lr
 800a320:	2300      	movs	r3, #0
 800a322:	e7e4      	b.n	800a2ee <__hi0bits+0xa>

0800a324 <__lo0bits>:
 800a324:	6803      	ldr	r3, [r0, #0]
 800a326:	f013 0207 	ands.w	r2, r3, #7
 800a32a:	4601      	mov	r1, r0
 800a32c:	d00b      	beq.n	800a346 <__lo0bits+0x22>
 800a32e:	07da      	lsls	r2, r3, #31
 800a330:	d423      	bmi.n	800a37a <__lo0bits+0x56>
 800a332:	0798      	lsls	r0, r3, #30
 800a334:	bf49      	itett	mi
 800a336:	085b      	lsrmi	r3, r3, #1
 800a338:	089b      	lsrpl	r3, r3, #2
 800a33a:	2001      	movmi	r0, #1
 800a33c:	600b      	strmi	r3, [r1, #0]
 800a33e:	bf5c      	itt	pl
 800a340:	600b      	strpl	r3, [r1, #0]
 800a342:	2002      	movpl	r0, #2
 800a344:	4770      	bx	lr
 800a346:	b298      	uxth	r0, r3
 800a348:	b9a8      	cbnz	r0, 800a376 <__lo0bits+0x52>
 800a34a:	0c1b      	lsrs	r3, r3, #16
 800a34c:	2010      	movs	r0, #16
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	b90a      	cbnz	r2, 800a356 <__lo0bits+0x32>
 800a352:	3008      	adds	r0, #8
 800a354:	0a1b      	lsrs	r3, r3, #8
 800a356:	071a      	lsls	r2, r3, #28
 800a358:	bf04      	itt	eq
 800a35a:	091b      	lsreq	r3, r3, #4
 800a35c:	3004      	addeq	r0, #4
 800a35e:	079a      	lsls	r2, r3, #30
 800a360:	bf04      	itt	eq
 800a362:	089b      	lsreq	r3, r3, #2
 800a364:	3002      	addeq	r0, #2
 800a366:	07da      	lsls	r2, r3, #31
 800a368:	d403      	bmi.n	800a372 <__lo0bits+0x4e>
 800a36a:	085b      	lsrs	r3, r3, #1
 800a36c:	f100 0001 	add.w	r0, r0, #1
 800a370:	d005      	beq.n	800a37e <__lo0bits+0x5a>
 800a372:	600b      	str	r3, [r1, #0]
 800a374:	4770      	bx	lr
 800a376:	4610      	mov	r0, r2
 800a378:	e7e9      	b.n	800a34e <__lo0bits+0x2a>
 800a37a:	2000      	movs	r0, #0
 800a37c:	4770      	bx	lr
 800a37e:	2020      	movs	r0, #32
 800a380:	4770      	bx	lr
	...

0800a384 <__i2b>:
 800a384:	b510      	push	{r4, lr}
 800a386:	460c      	mov	r4, r1
 800a388:	2101      	movs	r1, #1
 800a38a:	f7ff ff03 	bl	800a194 <_Balloc>
 800a38e:	4602      	mov	r2, r0
 800a390:	b928      	cbnz	r0, 800a39e <__i2b+0x1a>
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <__i2b+0x24>)
 800a394:	4805      	ldr	r0, [pc, #20]	; (800a3ac <__i2b+0x28>)
 800a396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a39a:	f000 fd35 	bl	800ae08 <__assert_func>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	6144      	str	r4, [r0, #20]
 800a3a2:	6103      	str	r3, [r0, #16]
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800b1d7 	.word	0x0800b1d7
 800a3ac:	0800b248 	.word	0x0800b248

0800a3b0 <__multiply>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	4691      	mov	r9, r2
 800a3b6:	690a      	ldr	r2, [r1, #16]
 800a3b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	bfb8      	it	lt
 800a3c0:	460b      	movlt	r3, r1
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	bfbc      	itt	lt
 800a3c6:	464c      	movlt	r4, r9
 800a3c8:	4699      	movlt	r9, r3
 800a3ca:	6927      	ldr	r7, [r4, #16]
 800a3cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3d0:	68a3      	ldr	r3, [r4, #8]
 800a3d2:	6861      	ldr	r1, [r4, #4]
 800a3d4:	eb07 060a 	add.w	r6, r7, sl
 800a3d8:	42b3      	cmp	r3, r6
 800a3da:	b085      	sub	sp, #20
 800a3dc:	bfb8      	it	lt
 800a3de:	3101      	addlt	r1, #1
 800a3e0:	f7ff fed8 	bl	800a194 <_Balloc>
 800a3e4:	b930      	cbnz	r0, 800a3f4 <__multiply+0x44>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	4b44      	ldr	r3, [pc, #272]	; (800a4fc <__multiply+0x14c>)
 800a3ea:	4845      	ldr	r0, [pc, #276]	; (800a500 <__multiply+0x150>)
 800a3ec:	f240 115d 	movw	r1, #349	; 0x15d
 800a3f0:	f000 fd0a 	bl	800ae08 <__assert_func>
 800a3f4:	f100 0514 	add.w	r5, r0, #20
 800a3f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	2200      	movs	r2, #0
 800a400:	4543      	cmp	r3, r8
 800a402:	d321      	bcc.n	800a448 <__multiply+0x98>
 800a404:	f104 0314 	add.w	r3, r4, #20
 800a408:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a40c:	f109 0314 	add.w	r3, r9, #20
 800a410:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a414:	9202      	str	r2, [sp, #8]
 800a416:	1b3a      	subs	r2, r7, r4
 800a418:	3a15      	subs	r2, #21
 800a41a:	f022 0203 	bic.w	r2, r2, #3
 800a41e:	3204      	adds	r2, #4
 800a420:	f104 0115 	add.w	r1, r4, #21
 800a424:	428f      	cmp	r7, r1
 800a426:	bf38      	it	cc
 800a428:	2204      	movcc	r2, #4
 800a42a:	9201      	str	r2, [sp, #4]
 800a42c:	9a02      	ldr	r2, [sp, #8]
 800a42e:	9303      	str	r3, [sp, #12]
 800a430:	429a      	cmp	r2, r3
 800a432:	d80c      	bhi.n	800a44e <__multiply+0x9e>
 800a434:	2e00      	cmp	r6, #0
 800a436:	dd03      	ble.n	800a440 <__multiply+0x90>
 800a438:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d05a      	beq.n	800a4f6 <__multiply+0x146>
 800a440:	6106      	str	r6, [r0, #16]
 800a442:	b005      	add	sp, #20
 800a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a448:	f843 2b04 	str.w	r2, [r3], #4
 800a44c:	e7d8      	b.n	800a400 <__multiply+0x50>
 800a44e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a452:	f1ba 0f00 	cmp.w	sl, #0
 800a456:	d024      	beq.n	800a4a2 <__multiply+0xf2>
 800a458:	f104 0e14 	add.w	lr, r4, #20
 800a45c:	46a9      	mov	r9, r5
 800a45e:	f04f 0c00 	mov.w	ip, #0
 800a462:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a466:	f8d9 1000 	ldr.w	r1, [r9]
 800a46a:	fa1f fb82 	uxth.w	fp, r2
 800a46e:	b289      	uxth	r1, r1
 800a470:	fb0a 110b 	mla	r1, sl, fp, r1
 800a474:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a478:	f8d9 2000 	ldr.w	r2, [r9]
 800a47c:	4461      	add	r1, ip
 800a47e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a482:	fb0a c20b 	mla	r2, sl, fp, ip
 800a486:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a48a:	b289      	uxth	r1, r1
 800a48c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a490:	4577      	cmp	r7, lr
 800a492:	f849 1b04 	str.w	r1, [r9], #4
 800a496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a49a:	d8e2      	bhi.n	800a462 <__multiply+0xb2>
 800a49c:	9a01      	ldr	r2, [sp, #4]
 800a49e:	f845 c002 	str.w	ip, [r5, r2]
 800a4a2:	9a03      	ldr	r2, [sp, #12]
 800a4a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	f1b9 0f00 	cmp.w	r9, #0
 800a4ae:	d020      	beq.n	800a4f2 <__multiply+0x142>
 800a4b0:	6829      	ldr	r1, [r5, #0]
 800a4b2:	f104 0c14 	add.w	ip, r4, #20
 800a4b6:	46ae      	mov	lr, r5
 800a4b8:	f04f 0a00 	mov.w	sl, #0
 800a4bc:	f8bc b000 	ldrh.w	fp, [ip]
 800a4c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4c4:	fb09 220b 	mla	r2, r9, fp, r2
 800a4c8:	4492      	add	sl, r2
 800a4ca:	b289      	uxth	r1, r1
 800a4cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4d0:	f84e 1b04 	str.w	r1, [lr], #4
 800a4d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4d8:	f8be 1000 	ldrh.w	r1, [lr]
 800a4dc:	0c12      	lsrs	r2, r2, #16
 800a4de:	fb09 1102 	mla	r1, r9, r2, r1
 800a4e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4e6:	4567      	cmp	r7, ip
 800a4e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4ec:	d8e6      	bhi.n	800a4bc <__multiply+0x10c>
 800a4ee:	9a01      	ldr	r2, [sp, #4]
 800a4f0:	50a9      	str	r1, [r5, r2]
 800a4f2:	3504      	adds	r5, #4
 800a4f4:	e79a      	b.n	800a42c <__multiply+0x7c>
 800a4f6:	3e01      	subs	r6, #1
 800a4f8:	e79c      	b.n	800a434 <__multiply+0x84>
 800a4fa:	bf00      	nop
 800a4fc:	0800b1d7 	.word	0x0800b1d7
 800a500:	0800b248 	.word	0x0800b248

0800a504 <__pow5mult>:
 800a504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a508:	4615      	mov	r5, r2
 800a50a:	f012 0203 	ands.w	r2, r2, #3
 800a50e:	4606      	mov	r6, r0
 800a510:	460f      	mov	r7, r1
 800a512:	d007      	beq.n	800a524 <__pow5mult+0x20>
 800a514:	4c25      	ldr	r4, [pc, #148]	; (800a5ac <__pow5mult+0xa8>)
 800a516:	3a01      	subs	r2, #1
 800a518:	2300      	movs	r3, #0
 800a51a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a51e:	f7ff fe9b 	bl	800a258 <__multadd>
 800a522:	4607      	mov	r7, r0
 800a524:	10ad      	asrs	r5, r5, #2
 800a526:	d03d      	beq.n	800a5a4 <__pow5mult+0xa0>
 800a528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a52a:	b97c      	cbnz	r4, 800a54c <__pow5mult+0x48>
 800a52c:	2010      	movs	r0, #16
 800a52e:	f7ff fe29 	bl	800a184 <malloc>
 800a532:	4602      	mov	r2, r0
 800a534:	6270      	str	r0, [r6, #36]	; 0x24
 800a536:	b928      	cbnz	r0, 800a544 <__pow5mult+0x40>
 800a538:	4b1d      	ldr	r3, [pc, #116]	; (800a5b0 <__pow5mult+0xac>)
 800a53a:	481e      	ldr	r0, [pc, #120]	; (800a5b4 <__pow5mult+0xb0>)
 800a53c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a540:	f000 fc62 	bl	800ae08 <__assert_func>
 800a544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a548:	6004      	str	r4, [r0, #0]
 800a54a:	60c4      	str	r4, [r0, #12]
 800a54c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a554:	b94c      	cbnz	r4, 800a56a <__pow5mult+0x66>
 800a556:	f240 2171 	movw	r1, #625	; 0x271
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7ff ff12 	bl	800a384 <__i2b>
 800a560:	2300      	movs	r3, #0
 800a562:	f8c8 0008 	str.w	r0, [r8, #8]
 800a566:	4604      	mov	r4, r0
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	f04f 0900 	mov.w	r9, #0
 800a56e:	07eb      	lsls	r3, r5, #31
 800a570:	d50a      	bpl.n	800a588 <__pow5mult+0x84>
 800a572:	4639      	mov	r1, r7
 800a574:	4622      	mov	r2, r4
 800a576:	4630      	mov	r0, r6
 800a578:	f7ff ff1a 	bl	800a3b0 <__multiply>
 800a57c:	4639      	mov	r1, r7
 800a57e:	4680      	mov	r8, r0
 800a580:	4630      	mov	r0, r6
 800a582:	f7ff fe47 	bl	800a214 <_Bfree>
 800a586:	4647      	mov	r7, r8
 800a588:	106d      	asrs	r5, r5, #1
 800a58a:	d00b      	beq.n	800a5a4 <__pow5mult+0xa0>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	b938      	cbnz	r0, 800a5a0 <__pow5mult+0x9c>
 800a590:	4622      	mov	r2, r4
 800a592:	4621      	mov	r1, r4
 800a594:	4630      	mov	r0, r6
 800a596:	f7ff ff0b 	bl	800a3b0 <__multiply>
 800a59a:	6020      	str	r0, [r4, #0]
 800a59c:	f8c0 9000 	str.w	r9, [r0]
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	e7e4      	b.n	800a56e <__pow5mult+0x6a>
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5aa:	bf00      	nop
 800a5ac:	0800b398 	.word	0x0800b398
 800a5b0:	0800b165 	.word	0x0800b165
 800a5b4:	0800b248 	.word	0x0800b248

0800a5b8 <__lshift>:
 800a5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5bc:	460c      	mov	r4, r1
 800a5be:	6849      	ldr	r1, [r1, #4]
 800a5c0:	6923      	ldr	r3, [r4, #16]
 800a5c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5c6:	68a3      	ldr	r3, [r4, #8]
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	4691      	mov	r9, r2
 800a5cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5d0:	f108 0601 	add.w	r6, r8, #1
 800a5d4:	42b3      	cmp	r3, r6
 800a5d6:	db0b      	blt.n	800a5f0 <__lshift+0x38>
 800a5d8:	4638      	mov	r0, r7
 800a5da:	f7ff fddb 	bl	800a194 <_Balloc>
 800a5de:	4605      	mov	r5, r0
 800a5e0:	b948      	cbnz	r0, 800a5f6 <__lshift+0x3e>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	4b2a      	ldr	r3, [pc, #168]	; (800a690 <__lshift+0xd8>)
 800a5e6:	482b      	ldr	r0, [pc, #172]	; (800a694 <__lshift+0xdc>)
 800a5e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5ec:	f000 fc0c 	bl	800ae08 <__assert_func>
 800a5f0:	3101      	adds	r1, #1
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	e7ee      	b.n	800a5d4 <__lshift+0x1c>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f100 0114 	add.w	r1, r0, #20
 800a5fc:	f100 0210 	add.w	r2, r0, #16
 800a600:	4618      	mov	r0, r3
 800a602:	4553      	cmp	r3, sl
 800a604:	db37      	blt.n	800a676 <__lshift+0xbe>
 800a606:	6920      	ldr	r0, [r4, #16]
 800a608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a60c:	f104 0314 	add.w	r3, r4, #20
 800a610:	f019 091f 	ands.w	r9, r9, #31
 800a614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a618:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a61c:	d02f      	beq.n	800a67e <__lshift+0xc6>
 800a61e:	f1c9 0e20 	rsb	lr, r9, #32
 800a622:	468a      	mov	sl, r1
 800a624:	f04f 0c00 	mov.w	ip, #0
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	fa02 f209 	lsl.w	r2, r2, r9
 800a62e:	ea42 020c 	orr.w	r2, r2, ip
 800a632:	f84a 2b04 	str.w	r2, [sl], #4
 800a636:	f853 2b04 	ldr.w	r2, [r3], #4
 800a63a:	4298      	cmp	r0, r3
 800a63c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a640:	d8f2      	bhi.n	800a628 <__lshift+0x70>
 800a642:	1b03      	subs	r3, r0, r4
 800a644:	3b15      	subs	r3, #21
 800a646:	f023 0303 	bic.w	r3, r3, #3
 800a64a:	3304      	adds	r3, #4
 800a64c:	f104 0215 	add.w	r2, r4, #21
 800a650:	4290      	cmp	r0, r2
 800a652:	bf38      	it	cc
 800a654:	2304      	movcc	r3, #4
 800a656:	f841 c003 	str.w	ip, [r1, r3]
 800a65a:	f1bc 0f00 	cmp.w	ip, #0
 800a65e:	d001      	beq.n	800a664 <__lshift+0xac>
 800a660:	f108 0602 	add.w	r6, r8, #2
 800a664:	3e01      	subs	r6, #1
 800a666:	4638      	mov	r0, r7
 800a668:	612e      	str	r6, [r5, #16]
 800a66a:	4621      	mov	r1, r4
 800a66c:	f7ff fdd2 	bl	800a214 <_Bfree>
 800a670:	4628      	mov	r0, r5
 800a672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a676:	f842 0f04 	str.w	r0, [r2, #4]!
 800a67a:	3301      	adds	r3, #1
 800a67c:	e7c1      	b.n	800a602 <__lshift+0x4a>
 800a67e:	3904      	subs	r1, #4
 800a680:	f853 2b04 	ldr.w	r2, [r3], #4
 800a684:	f841 2f04 	str.w	r2, [r1, #4]!
 800a688:	4298      	cmp	r0, r3
 800a68a:	d8f9      	bhi.n	800a680 <__lshift+0xc8>
 800a68c:	e7ea      	b.n	800a664 <__lshift+0xac>
 800a68e:	bf00      	nop
 800a690:	0800b1d7 	.word	0x0800b1d7
 800a694:	0800b248 	.word	0x0800b248

0800a698 <__mcmp>:
 800a698:	b530      	push	{r4, r5, lr}
 800a69a:	6902      	ldr	r2, [r0, #16]
 800a69c:	690c      	ldr	r4, [r1, #16]
 800a69e:	1b12      	subs	r2, r2, r4
 800a6a0:	d10e      	bne.n	800a6c0 <__mcmp+0x28>
 800a6a2:	f100 0314 	add.w	r3, r0, #20
 800a6a6:	3114      	adds	r1, #20
 800a6a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6b8:	42a5      	cmp	r5, r4
 800a6ba:	d003      	beq.n	800a6c4 <__mcmp+0x2c>
 800a6bc:	d305      	bcc.n	800a6ca <__mcmp+0x32>
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	bd30      	pop	{r4, r5, pc}
 800a6c4:	4283      	cmp	r3, r0
 800a6c6:	d3f3      	bcc.n	800a6b0 <__mcmp+0x18>
 800a6c8:	e7fa      	b.n	800a6c0 <__mcmp+0x28>
 800a6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ce:	e7f7      	b.n	800a6c0 <__mcmp+0x28>

0800a6d0 <__mdiff>:
 800a6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4620      	mov	r0, r4
 800a6dc:	4690      	mov	r8, r2
 800a6de:	f7ff ffdb 	bl	800a698 <__mcmp>
 800a6e2:	1e05      	subs	r5, r0, #0
 800a6e4:	d110      	bne.n	800a708 <__mdiff+0x38>
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7ff fd53 	bl	800a194 <_Balloc>
 800a6ee:	b930      	cbnz	r0, 800a6fe <__mdiff+0x2e>
 800a6f0:	4b3a      	ldr	r3, [pc, #232]	; (800a7dc <__mdiff+0x10c>)
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	f240 2132 	movw	r1, #562	; 0x232
 800a6f8:	4839      	ldr	r0, [pc, #228]	; (800a7e0 <__mdiff+0x110>)
 800a6fa:	f000 fb85 	bl	800ae08 <__assert_func>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	bfa4      	itt	ge
 800a70a:	4643      	movge	r3, r8
 800a70c:	46a0      	movge	r8, r4
 800a70e:	4630      	mov	r0, r6
 800a710:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a714:	bfa6      	itte	ge
 800a716:	461c      	movge	r4, r3
 800a718:	2500      	movge	r5, #0
 800a71a:	2501      	movlt	r5, #1
 800a71c:	f7ff fd3a 	bl	800a194 <_Balloc>
 800a720:	b920      	cbnz	r0, 800a72c <__mdiff+0x5c>
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <__mdiff+0x10c>)
 800a724:	4602      	mov	r2, r0
 800a726:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a72a:	e7e5      	b.n	800a6f8 <__mdiff+0x28>
 800a72c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a730:	6926      	ldr	r6, [r4, #16]
 800a732:	60c5      	str	r5, [r0, #12]
 800a734:	f104 0914 	add.w	r9, r4, #20
 800a738:	f108 0514 	add.w	r5, r8, #20
 800a73c:	f100 0e14 	add.w	lr, r0, #20
 800a740:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a744:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a748:	f108 0210 	add.w	r2, r8, #16
 800a74c:	46f2      	mov	sl, lr
 800a74e:	2100      	movs	r1, #0
 800a750:	f859 3b04 	ldr.w	r3, [r9], #4
 800a754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a758:	fa1f f883 	uxth.w	r8, r3
 800a75c:	fa11 f18b 	uxtah	r1, r1, fp
 800a760:	0c1b      	lsrs	r3, r3, #16
 800a762:	eba1 0808 	sub.w	r8, r1, r8
 800a766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a76a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a76e:	fa1f f888 	uxth.w	r8, r8
 800a772:	1419      	asrs	r1, r3, #16
 800a774:	454e      	cmp	r6, r9
 800a776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a77a:	f84a 3b04 	str.w	r3, [sl], #4
 800a77e:	d8e7      	bhi.n	800a750 <__mdiff+0x80>
 800a780:	1b33      	subs	r3, r6, r4
 800a782:	3b15      	subs	r3, #21
 800a784:	f023 0303 	bic.w	r3, r3, #3
 800a788:	3304      	adds	r3, #4
 800a78a:	3415      	adds	r4, #21
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	bf38      	it	cc
 800a790:	2304      	movcc	r3, #4
 800a792:	441d      	add	r5, r3
 800a794:	4473      	add	r3, lr
 800a796:	469e      	mov	lr, r3
 800a798:	462e      	mov	r6, r5
 800a79a:	4566      	cmp	r6, ip
 800a79c:	d30e      	bcc.n	800a7bc <__mdiff+0xec>
 800a79e:	f10c 0203 	add.w	r2, ip, #3
 800a7a2:	1b52      	subs	r2, r2, r5
 800a7a4:	f022 0203 	bic.w	r2, r2, #3
 800a7a8:	3d03      	subs	r5, #3
 800a7aa:	45ac      	cmp	ip, r5
 800a7ac:	bf38      	it	cc
 800a7ae:	2200      	movcc	r2, #0
 800a7b0:	441a      	add	r2, r3
 800a7b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7b6:	b17b      	cbz	r3, 800a7d8 <__mdiff+0x108>
 800a7b8:	6107      	str	r7, [r0, #16]
 800a7ba:	e7a3      	b.n	800a704 <__mdiff+0x34>
 800a7bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7c0:	fa11 f288 	uxtah	r2, r1, r8
 800a7c4:	1414      	asrs	r4, r2, #16
 800a7c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7ca:	b292      	uxth	r2, r2
 800a7cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7d0:	f84e 2b04 	str.w	r2, [lr], #4
 800a7d4:	1421      	asrs	r1, r4, #16
 800a7d6:	e7e0      	b.n	800a79a <__mdiff+0xca>
 800a7d8:	3f01      	subs	r7, #1
 800a7da:	e7ea      	b.n	800a7b2 <__mdiff+0xe2>
 800a7dc:	0800b1d7 	.word	0x0800b1d7
 800a7e0:	0800b248 	.word	0x0800b248

0800a7e4 <__d2b>:
 800a7e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7e8:	4689      	mov	r9, r1
 800a7ea:	2101      	movs	r1, #1
 800a7ec:	ec57 6b10 	vmov	r6, r7, d0
 800a7f0:	4690      	mov	r8, r2
 800a7f2:	f7ff fccf 	bl	800a194 <_Balloc>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	b930      	cbnz	r0, 800a808 <__d2b+0x24>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	4b25      	ldr	r3, [pc, #148]	; (800a894 <__d2b+0xb0>)
 800a7fe:	4826      	ldr	r0, [pc, #152]	; (800a898 <__d2b+0xb4>)
 800a800:	f240 310a 	movw	r1, #778	; 0x30a
 800a804:	f000 fb00 	bl	800ae08 <__assert_func>
 800a808:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a80c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a810:	bb35      	cbnz	r5, 800a860 <__d2b+0x7c>
 800a812:	2e00      	cmp	r6, #0
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	d028      	beq.n	800a86a <__d2b+0x86>
 800a818:	4668      	mov	r0, sp
 800a81a:	9600      	str	r6, [sp, #0]
 800a81c:	f7ff fd82 	bl	800a324 <__lo0bits>
 800a820:	9900      	ldr	r1, [sp, #0]
 800a822:	b300      	cbz	r0, 800a866 <__d2b+0x82>
 800a824:	9a01      	ldr	r2, [sp, #4]
 800a826:	f1c0 0320 	rsb	r3, r0, #32
 800a82a:	fa02 f303 	lsl.w	r3, r2, r3
 800a82e:	430b      	orrs	r3, r1
 800a830:	40c2      	lsrs	r2, r0
 800a832:	6163      	str	r3, [r4, #20]
 800a834:	9201      	str	r2, [sp, #4]
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	61a3      	str	r3, [r4, #24]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bf14      	ite	ne
 800a83e:	2202      	movne	r2, #2
 800a840:	2201      	moveq	r2, #1
 800a842:	6122      	str	r2, [r4, #16]
 800a844:	b1d5      	cbz	r5, 800a87c <__d2b+0x98>
 800a846:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a84a:	4405      	add	r5, r0
 800a84c:	f8c9 5000 	str.w	r5, [r9]
 800a850:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a854:	f8c8 0000 	str.w	r0, [r8]
 800a858:	4620      	mov	r0, r4
 800a85a:	b003      	add	sp, #12
 800a85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a864:	e7d5      	b.n	800a812 <__d2b+0x2e>
 800a866:	6161      	str	r1, [r4, #20]
 800a868:	e7e5      	b.n	800a836 <__d2b+0x52>
 800a86a:	a801      	add	r0, sp, #4
 800a86c:	f7ff fd5a 	bl	800a324 <__lo0bits>
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	6163      	str	r3, [r4, #20]
 800a874:	2201      	movs	r2, #1
 800a876:	6122      	str	r2, [r4, #16]
 800a878:	3020      	adds	r0, #32
 800a87a:	e7e3      	b.n	800a844 <__d2b+0x60>
 800a87c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a880:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a884:	f8c9 0000 	str.w	r0, [r9]
 800a888:	6918      	ldr	r0, [r3, #16]
 800a88a:	f7ff fd2b 	bl	800a2e4 <__hi0bits>
 800a88e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a892:	e7df      	b.n	800a854 <__d2b+0x70>
 800a894:	0800b1d7 	.word	0x0800b1d7
 800a898:	0800b248 	.word	0x0800b248

0800a89c <_calloc_r>:
 800a89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a89e:	fba1 2402 	umull	r2, r4, r1, r2
 800a8a2:	b94c      	cbnz	r4, 800a8b8 <_calloc_r+0x1c>
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	9201      	str	r2, [sp, #4]
 800a8a8:	f000 f87a 	bl	800a9a0 <_malloc_r>
 800a8ac:	9a01      	ldr	r2, [sp, #4]
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	b930      	cbnz	r0, 800a8c0 <_calloc_r+0x24>
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	b003      	add	sp, #12
 800a8b6:	bd30      	pop	{r4, r5, pc}
 800a8b8:	220c      	movs	r2, #12
 800a8ba:	6002      	str	r2, [r0, #0]
 800a8bc:	2500      	movs	r5, #0
 800a8be:	e7f8      	b.n	800a8b2 <_calloc_r+0x16>
 800a8c0:	4621      	mov	r1, r4
 800a8c2:	f7fd fe19 	bl	80084f8 <memset>
 800a8c6:	e7f4      	b.n	800a8b2 <_calloc_r+0x16>

0800a8c8 <_free_r>:
 800a8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8ca:	2900      	cmp	r1, #0
 800a8cc:	d044      	beq.n	800a958 <_free_r+0x90>
 800a8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d2:	9001      	str	r0, [sp, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a8da:	bfb8      	it	lt
 800a8dc:	18e4      	addlt	r4, r4, r3
 800a8de:	f000 fb19 	bl	800af14 <__malloc_lock>
 800a8e2:	4a1e      	ldr	r2, [pc, #120]	; (800a95c <_free_r+0x94>)
 800a8e4:	9801      	ldr	r0, [sp, #4]
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	b933      	cbnz	r3, 800a8f8 <_free_r+0x30>
 800a8ea:	6063      	str	r3, [r4, #4]
 800a8ec:	6014      	str	r4, [r2, #0]
 800a8ee:	b003      	add	sp, #12
 800a8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8f4:	f000 bb14 	b.w	800af20 <__malloc_unlock>
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d908      	bls.n	800a90e <_free_r+0x46>
 800a8fc:	6825      	ldr	r5, [r4, #0]
 800a8fe:	1961      	adds	r1, r4, r5
 800a900:	428b      	cmp	r3, r1
 800a902:	bf01      	itttt	eq
 800a904:	6819      	ldreq	r1, [r3, #0]
 800a906:	685b      	ldreq	r3, [r3, #4]
 800a908:	1949      	addeq	r1, r1, r5
 800a90a:	6021      	streq	r1, [r4, #0]
 800a90c:	e7ed      	b.n	800a8ea <_free_r+0x22>
 800a90e:	461a      	mov	r2, r3
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	b10b      	cbz	r3, 800a918 <_free_r+0x50>
 800a914:	42a3      	cmp	r3, r4
 800a916:	d9fa      	bls.n	800a90e <_free_r+0x46>
 800a918:	6811      	ldr	r1, [r2, #0]
 800a91a:	1855      	adds	r5, r2, r1
 800a91c:	42a5      	cmp	r5, r4
 800a91e:	d10b      	bne.n	800a938 <_free_r+0x70>
 800a920:	6824      	ldr	r4, [r4, #0]
 800a922:	4421      	add	r1, r4
 800a924:	1854      	adds	r4, r2, r1
 800a926:	42a3      	cmp	r3, r4
 800a928:	6011      	str	r1, [r2, #0]
 800a92a:	d1e0      	bne.n	800a8ee <_free_r+0x26>
 800a92c:	681c      	ldr	r4, [r3, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	6053      	str	r3, [r2, #4]
 800a932:	4421      	add	r1, r4
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	e7da      	b.n	800a8ee <_free_r+0x26>
 800a938:	d902      	bls.n	800a940 <_free_r+0x78>
 800a93a:	230c      	movs	r3, #12
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	e7d6      	b.n	800a8ee <_free_r+0x26>
 800a940:	6825      	ldr	r5, [r4, #0]
 800a942:	1961      	adds	r1, r4, r5
 800a944:	428b      	cmp	r3, r1
 800a946:	bf04      	itt	eq
 800a948:	6819      	ldreq	r1, [r3, #0]
 800a94a:	685b      	ldreq	r3, [r3, #4]
 800a94c:	6063      	str	r3, [r4, #4]
 800a94e:	bf04      	itt	eq
 800a950:	1949      	addeq	r1, r1, r5
 800a952:	6021      	streq	r1, [r4, #0]
 800a954:	6054      	str	r4, [r2, #4]
 800a956:	e7ca      	b.n	800a8ee <_free_r+0x26>
 800a958:	b003      	add	sp, #12
 800a95a:	bd30      	pop	{r4, r5, pc}
 800a95c:	20014268 	.word	0x20014268

0800a960 <sbrk_aligned>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	4e0e      	ldr	r6, [pc, #56]	; (800a99c <sbrk_aligned+0x3c>)
 800a964:	460c      	mov	r4, r1
 800a966:	6831      	ldr	r1, [r6, #0]
 800a968:	4605      	mov	r5, r0
 800a96a:	b911      	cbnz	r1, 800a972 <sbrk_aligned+0x12>
 800a96c:	f000 f9e6 	bl	800ad3c <_sbrk_r>
 800a970:	6030      	str	r0, [r6, #0]
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f000 f9e1 	bl	800ad3c <_sbrk_r>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	d00a      	beq.n	800a994 <sbrk_aligned+0x34>
 800a97e:	1cc4      	adds	r4, r0, #3
 800a980:	f024 0403 	bic.w	r4, r4, #3
 800a984:	42a0      	cmp	r0, r4
 800a986:	d007      	beq.n	800a998 <sbrk_aligned+0x38>
 800a988:	1a21      	subs	r1, r4, r0
 800a98a:	4628      	mov	r0, r5
 800a98c:	f000 f9d6 	bl	800ad3c <_sbrk_r>
 800a990:	3001      	adds	r0, #1
 800a992:	d101      	bne.n	800a998 <sbrk_aligned+0x38>
 800a994:	f04f 34ff 	mov.w	r4, #4294967295
 800a998:	4620      	mov	r0, r4
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
 800a99c:	2001426c 	.word	0x2001426c

0800a9a0 <_malloc_r>:
 800a9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a4:	1ccd      	adds	r5, r1, #3
 800a9a6:	f025 0503 	bic.w	r5, r5, #3
 800a9aa:	3508      	adds	r5, #8
 800a9ac:	2d0c      	cmp	r5, #12
 800a9ae:	bf38      	it	cc
 800a9b0:	250c      	movcc	r5, #12
 800a9b2:	2d00      	cmp	r5, #0
 800a9b4:	4607      	mov	r7, r0
 800a9b6:	db01      	blt.n	800a9bc <_malloc_r+0x1c>
 800a9b8:	42a9      	cmp	r1, r5
 800a9ba:	d905      	bls.n	800a9c8 <_malloc_r+0x28>
 800a9bc:	230c      	movs	r3, #12
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	2600      	movs	r6, #0
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c8:	4e2e      	ldr	r6, [pc, #184]	; (800aa84 <_malloc_r+0xe4>)
 800a9ca:	f000 faa3 	bl	800af14 <__malloc_lock>
 800a9ce:	6833      	ldr	r3, [r6, #0]
 800a9d0:	461c      	mov	r4, r3
 800a9d2:	bb34      	cbnz	r4, 800aa22 <_malloc_r+0x82>
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	f7ff ffc2 	bl	800a960 <sbrk_aligned>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	4604      	mov	r4, r0
 800a9e0:	d14d      	bne.n	800aa7e <_malloc_r+0xde>
 800a9e2:	6834      	ldr	r4, [r6, #0]
 800a9e4:	4626      	mov	r6, r4
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	d140      	bne.n	800aa6c <_malloc_r+0xcc>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	eb04 0803 	add.w	r8, r4, r3
 800a9f4:	f000 f9a2 	bl	800ad3c <_sbrk_r>
 800a9f8:	4580      	cmp	r8, r0
 800a9fa:	d13a      	bne.n	800aa72 <_malloc_r+0xd2>
 800a9fc:	6821      	ldr	r1, [r4, #0]
 800a9fe:	3503      	adds	r5, #3
 800aa00:	1a6d      	subs	r5, r5, r1
 800aa02:	f025 0503 	bic.w	r5, r5, #3
 800aa06:	3508      	adds	r5, #8
 800aa08:	2d0c      	cmp	r5, #12
 800aa0a:	bf38      	it	cc
 800aa0c:	250c      	movcc	r5, #12
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4638      	mov	r0, r7
 800aa12:	f7ff ffa5 	bl	800a960 <sbrk_aligned>
 800aa16:	3001      	adds	r0, #1
 800aa18:	d02b      	beq.n	800aa72 <_malloc_r+0xd2>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	442b      	add	r3, r5
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	e00e      	b.n	800aa40 <_malloc_r+0xa0>
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	1b52      	subs	r2, r2, r5
 800aa26:	d41e      	bmi.n	800aa66 <_malloc_r+0xc6>
 800aa28:	2a0b      	cmp	r2, #11
 800aa2a:	d916      	bls.n	800aa5a <_malloc_r+0xba>
 800aa2c:	1961      	adds	r1, r4, r5
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	6025      	str	r5, [r4, #0]
 800aa32:	bf18      	it	ne
 800aa34:	6059      	strne	r1, [r3, #4]
 800aa36:	6863      	ldr	r3, [r4, #4]
 800aa38:	bf08      	it	eq
 800aa3a:	6031      	streq	r1, [r6, #0]
 800aa3c:	5162      	str	r2, [r4, r5]
 800aa3e:	604b      	str	r3, [r1, #4]
 800aa40:	4638      	mov	r0, r7
 800aa42:	f104 060b 	add.w	r6, r4, #11
 800aa46:	f000 fa6b 	bl	800af20 <__malloc_unlock>
 800aa4a:	f026 0607 	bic.w	r6, r6, #7
 800aa4e:	1d23      	adds	r3, r4, #4
 800aa50:	1af2      	subs	r2, r6, r3
 800aa52:	d0b6      	beq.n	800a9c2 <_malloc_r+0x22>
 800aa54:	1b9b      	subs	r3, r3, r6
 800aa56:	50a3      	str	r3, [r4, r2]
 800aa58:	e7b3      	b.n	800a9c2 <_malloc_r+0x22>
 800aa5a:	6862      	ldr	r2, [r4, #4]
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	bf0c      	ite	eq
 800aa60:	6032      	streq	r2, [r6, #0]
 800aa62:	605a      	strne	r2, [r3, #4]
 800aa64:	e7ec      	b.n	800aa40 <_malloc_r+0xa0>
 800aa66:	4623      	mov	r3, r4
 800aa68:	6864      	ldr	r4, [r4, #4]
 800aa6a:	e7b2      	b.n	800a9d2 <_malloc_r+0x32>
 800aa6c:	4634      	mov	r4, r6
 800aa6e:	6876      	ldr	r6, [r6, #4]
 800aa70:	e7b9      	b.n	800a9e6 <_malloc_r+0x46>
 800aa72:	230c      	movs	r3, #12
 800aa74:	603b      	str	r3, [r7, #0]
 800aa76:	4638      	mov	r0, r7
 800aa78:	f000 fa52 	bl	800af20 <__malloc_unlock>
 800aa7c:	e7a1      	b.n	800a9c2 <_malloc_r+0x22>
 800aa7e:	6025      	str	r5, [r4, #0]
 800aa80:	e7de      	b.n	800aa40 <_malloc_r+0xa0>
 800aa82:	bf00      	nop
 800aa84:	20014268 	.word	0x20014268

0800aa88 <__sfputc_r>:
 800aa88:	6893      	ldr	r3, [r2, #8]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	b410      	push	{r4}
 800aa90:	6093      	str	r3, [r2, #8]
 800aa92:	da08      	bge.n	800aaa6 <__sfputc_r+0x1e>
 800aa94:	6994      	ldr	r4, [r2, #24]
 800aa96:	42a3      	cmp	r3, r4
 800aa98:	db01      	blt.n	800aa9e <__sfputc_r+0x16>
 800aa9a:	290a      	cmp	r1, #10
 800aa9c:	d103      	bne.n	800aaa6 <__sfputc_r+0x1e>
 800aa9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaa2:	f7fe ba11 	b.w	8008ec8 <__swbuf_r>
 800aaa6:	6813      	ldr	r3, [r2, #0]
 800aaa8:	1c58      	adds	r0, r3, #1
 800aaaa:	6010      	str	r0, [r2, #0]
 800aaac:	7019      	strb	r1, [r3, #0]
 800aaae:	4608      	mov	r0, r1
 800aab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <__sfputs_r>:
 800aab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab8:	4606      	mov	r6, r0
 800aaba:	460f      	mov	r7, r1
 800aabc:	4614      	mov	r4, r2
 800aabe:	18d5      	adds	r5, r2, r3
 800aac0:	42ac      	cmp	r4, r5
 800aac2:	d101      	bne.n	800aac8 <__sfputs_r+0x12>
 800aac4:	2000      	movs	r0, #0
 800aac6:	e007      	b.n	800aad8 <__sfputs_r+0x22>
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	463a      	mov	r2, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	f7ff ffda 	bl	800aa88 <__sfputc_r>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d1f3      	bne.n	800aac0 <__sfputs_r+0xa>
 800aad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aadc <_vfiprintf_r>:
 800aadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae0:	460d      	mov	r5, r1
 800aae2:	b09d      	sub	sp, #116	; 0x74
 800aae4:	4614      	mov	r4, r2
 800aae6:	4698      	mov	r8, r3
 800aae8:	4606      	mov	r6, r0
 800aaea:	b118      	cbz	r0, 800aaf4 <_vfiprintf_r+0x18>
 800aaec:	6983      	ldr	r3, [r0, #24]
 800aaee:	b90b      	cbnz	r3, 800aaf4 <_vfiprintf_r+0x18>
 800aaf0:	f7ff fa3e 	bl	8009f70 <__sinit>
 800aaf4:	4b89      	ldr	r3, [pc, #548]	; (800ad1c <_vfiprintf_r+0x240>)
 800aaf6:	429d      	cmp	r5, r3
 800aaf8:	d11b      	bne.n	800ab32 <_vfiprintf_r+0x56>
 800aafa:	6875      	ldr	r5, [r6, #4]
 800aafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aafe:	07d9      	lsls	r1, r3, #31
 800ab00:	d405      	bmi.n	800ab0e <_vfiprintf_r+0x32>
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	059a      	lsls	r2, r3, #22
 800ab06:	d402      	bmi.n	800ab0e <_vfiprintf_r+0x32>
 800ab08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab0a:	f7ff fad4 	bl	800a0b6 <__retarget_lock_acquire_recursive>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	071b      	lsls	r3, r3, #28
 800ab12:	d501      	bpl.n	800ab18 <_vfiprintf_r+0x3c>
 800ab14:	692b      	ldr	r3, [r5, #16]
 800ab16:	b9eb      	cbnz	r3, 800ab54 <_vfiprintf_r+0x78>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f7fe fa26 	bl	8008f6c <__swsetup_r>
 800ab20:	b1c0      	cbz	r0, 800ab54 <_vfiprintf_r+0x78>
 800ab22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab24:	07dc      	lsls	r4, r3, #31
 800ab26:	d50e      	bpl.n	800ab46 <_vfiprintf_r+0x6a>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	b01d      	add	sp, #116	; 0x74
 800ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab32:	4b7b      	ldr	r3, [pc, #492]	; (800ad20 <_vfiprintf_r+0x244>)
 800ab34:	429d      	cmp	r5, r3
 800ab36:	d101      	bne.n	800ab3c <_vfiprintf_r+0x60>
 800ab38:	68b5      	ldr	r5, [r6, #8]
 800ab3a:	e7df      	b.n	800aafc <_vfiprintf_r+0x20>
 800ab3c:	4b79      	ldr	r3, [pc, #484]	; (800ad24 <_vfiprintf_r+0x248>)
 800ab3e:	429d      	cmp	r5, r3
 800ab40:	bf08      	it	eq
 800ab42:	68f5      	ldreq	r5, [r6, #12]
 800ab44:	e7da      	b.n	800aafc <_vfiprintf_r+0x20>
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	0598      	lsls	r0, r3, #22
 800ab4a:	d4ed      	bmi.n	800ab28 <_vfiprintf_r+0x4c>
 800ab4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab4e:	f7ff fab3 	bl	800a0b8 <__retarget_lock_release_recursive>
 800ab52:	e7e9      	b.n	800ab28 <_vfiprintf_r+0x4c>
 800ab54:	2300      	movs	r3, #0
 800ab56:	9309      	str	r3, [sp, #36]	; 0x24
 800ab58:	2320      	movs	r3, #32
 800ab5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab62:	2330      	movs	r3, #48	; 0x30
 800ab64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad28 <_vfiprintf_r+0x24c>
 800ab68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab6c:	f04f 0901 	mov.w	r9, #1
 800ab70:	4623      	mov	r3, r4
 800ab72:	469a      	mov	sl, r3
 800ab74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab78:	b10a      	cbz	r2, 800ab7e <_vfiprintf_r+0xa2>
 800ab7a:	2a25      	cmp	r2, #37	; 0x25
 800ab7c:	d1f9      	bne.n	800ab72 <_vfiprintf_r+0x96>
 800ab7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab82:	d00b      	beq.n	800ab9c <_vfiprintf_r+0xc0>
 800ab84:	465b      	mov	r3, fp
 800ab86:	4622      	mov	r2, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ff93 	bl	800aab6 <__sfputs_r>
 800ab90:	3001      	adds	r0, #1
 800ab92:	f000 80aa 	beq.w	800acea <_vfiprintf_r+0x20e>
 800ab96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab98:	445a      	add	r2, fp
 800ab9a:	9209      	str	r2, [sp, #36]	; 0x24
 800ab9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 80a2 	beq.w	800acea <_vfiprintf_r+0x20e>
 800aba6:	2300      	movs	r3, #0
 800aba8:	f04f 32ff 	mov.w	r2, #4294967295
 800abac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb0:	f10a 0a01 	add.w	sl, sl, #1
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	9307      	str	r3, [sp, #28]
 800abb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abbc:	931a      	str	r3, [sp, #104]	; 0x68
 800abbe:	4654      	mov	r4, sl
 800abc0:	2205      	movs	r2, #5
 800abc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc6:	4858      	ldr	r0, [pc, #352]	; (800ad28 <_vfiprintf_r+0x24c>)
 800abc8:	f7f5 fb0a 	bl	80001e0 <memchr>
 800abcc:	9a04      	ldr	r2, [sp, #16]
 800abce:	b9d8      	cbnz	r0, 800ac08 <_vfiprintf_r+0x12c>
 800abd0:	06d1      	lsls	r1, r2, #27
 800abd2:	bf44      	itt	mi
 800abd4:	2320      	movmi	r3, #32
 800abd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abda:	0713      	lsls	r3, r2, #28
 800abdc:	bf44      	itt	mi
 800abde:	232b      	movmi	r3, #43	; 0x2b
 800abe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe4:	f89a 3000 	ldrb.w	r3, [sl]
 800abe8:	2b2a      	cmp	r3, #42	; 0x2a
 800abea:	d015      	beq.n	800ac18 <_vfiprintf_r+0x13c>
 800abec:	9a07      	ldr	r2, [sp, #28]
 800abee:	4654      	mov	r4, sl
 800abf0:	2000      	movs	r0, #0
 800abf2:	f04f 0c0a 	mov.w	ip, #10
 800abf6:	4621      	mov	r1, r4
 800abf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abfc:	3b30      	subs	r3, #48	; 0x30
 800abfe:	2b09      	cmp	r3, #9
 800ac00:	d94e      	bls.n	800aca0 <_vfiprintf_r+0x1c4>
 800ac02:	b1b0      	cbz	r0, 800ac32 <_vfiprintf_r+0x156>
 800ac04:	9207      	str	r2, [sp, #28]
 800ac06:	e014      	b.n	800ac32 <_vfiprintf_r+0x156>
 800ac08:	eba0 0308 	sub.w	r3, r0, r8
 800ac0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac10:	4313      	orrs	r3, r2
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	46a2      	mov	sl, r4
 800ac16:	e7d2      	b.n	800abbe <_vfiprintf_r+0xe2>
 800ac18:	9b03      	ldr	r3, [sp, #12]
 800ac1a:	1d19      	adds	r1, r3, #4
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	9103      	str	r1, [sp, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	bfbb      	ittet	lt
 800ac24:	425b      	neglt	r3, r3
 800ac26:	f042 0202 	orrlt.w	r2, r2, #2
 800ac2a:	9307      	strge	r3, [sp, #28]
 800ac2c:	9307      	strlt	r3, [sp, #28]
 800ac2e:	bfb8      	it	lt
 800ac30:	9204      	strlt	r2, [sp, #16]
 800ac32:	7823      	ldrb	r3, [r4, #0]
 800ac34:	2b2e      	cmp	r3, #46	; 0x2e
 800ac36:	d10c      	bne.n	800ac52 <_vfiprintf_r+0x176>
 800ac38:	7863      	ldrb	r3, [r4, #1]
 800ac3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ac3c:	d135      	bne.n	800acaa <_vfiprintf_r+0x1ce>
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	1d1a      	adds	r2, r3, #4
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	9203      	str	r2, [sp, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	bfb8      	it	lt
 800ac4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac4e:	3402      	adds	r4, #2
 800ac50:	9305      	str	r3, [sp, #20]
 800ac52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad38 <_vfiprintf_r+0x25c>
 800ac56:	7821      	ldrb	r1, [r4, #0]
 800ac58:	2203      	movs	r2, #3
 800ac5a:	4650      	mov	r0, sl
 800ac5c:	f7f5 fac0 	bl	80001e0 <memchr>
 800ac60:	b140      	cbz	r0, 800ac74 <_vfiprintf_r+0x198>
 800ac62:	2340      	movs	r3, #64	; 0x40
 800ac64:	eba0 000a 	sub.w	r0, r0, sl
 800ac68:	fa03 f000 	lsl.w	r0, r3, r0
 800ac6c:	9b04      	ldr	r3, [sp, #16]
 800ac6e:	4303      	orrs	r3, r0
 800ac70:	3401      	adds	r4, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac78:	482c      	ldr	r0, [pc, #176]	; (800ad2c <_vfiprintf_r+0x250>)
 800ac7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac7e:	2206      	movs	r2, #6
 800ac80:	f7f5 faae 	bl	80001e0 <memchr>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d03f      	beq.n	800ad08 <_vfiprintf_r+0x22c>
 800ac88:	4b29      	ldr	r3, [pc, #164]	; (800ad30 <_vfiprintf_r+0x254>)
 800ac8a:	bb1b      	cbnz	r3, 800acd4 <_vfiprintf_r+0x1f8>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	3307      	adds	r3, #7
 800ac90:	f023 0307 	bic.w	r3, r3, #7
 800ac94:	3308      	adds	r3, #8
 800ac96:	9303      	str	r3, [sp, #12]
 800ac98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac9a:	443b      	add	r3, r7
 800ac9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9e:	e767      	b.n	800ab70 <_vfiprintf_r+0x94>
 800aca0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca4:	460c      	mov	r4, r1
 800aca6:	2001      	movs	r0, #1
 800aca8:	e7a5      	b.n	800abf6 <_vfiprintf_r+0x11a>
 800acaa:	2300      	movs	r3, #0
 800acac:	3401      	adds	r4, #1
 800acae:	9305      	str	r3, [sp, #20]
 800acb0:	4619      	mov	r1, r3
 800acb2:	f04f 0c0a 	mov.w	ip, #10
 800acb6:	4620      	mov	r0, r4
 800acb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acbc:	3a30      	subs	r2, #48	; 0x30
 800acbe:	2a09      	cmp	r2, #9
 800acc0:	d903      	bls.n	800acca <_vfiprintf_r+0x1ee>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d0c5      	beq.n	800ac52 <_vfiprintf_r+0x176>
 800acc6:	9105      	str	r1, [sp, #20]
 800acc8:	e7c3      	b.n	800ac52 <_vfiprintf_r+0x176>
 800acca:	fb0c 2101 	mla	r1, ip, r1, r2
 800acce:	4604      	mov	r4, r0
 800acd0:	2301      	movs	r3, #1
 800acd2:	e7f0      	b.n	800acb6 <_vfiprintf_r+0x1da>
 800acd4:	ab03      	add	r3, sp, #12
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	462a      	mov	r2, r5
 800acda:	4b16      	ldr	r3, [pc, #88]	; (800ad34 <_vfiprintf_r+0x258>)
 800acdc:	a904      	add	r1, sp, #16
 800acde:	4630      	mov	r0, r6
 800ace0:	f7fd fcb2 	bl	8008648 <_printf_float>
 800ace4:	4607      	mov	r7, r0
 800ace6:	1c78      	adds	r0, r7, #1
 800ace8:	d1d6      	bne.n	800ac98 <_vfiprintf_r+0x1bc>
 800acea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acec:	07d9      	lsls	r1, r3, #31
 800acee:	d405      	bmi.n	800acfc <_vfiprintf_r+0x220>
 800acf0:	89ab      	ldrh	r3, [r5, #12]
 800acf2:	059a      	lsls	r2, r3, #22
 800acf4:	d402      	bmi.n	800acfc <_vfiprintf_r+0x220>
 800acf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acf8:	f7ff f9de 	bl	800a0b8 <__retarget_lock_release_recursive>
 800acfc:	89ab      	ldrh	r3, [r5, #12]
 800acfe:	065b      	lsls	r3, r3, #25
 800ad00:	f53f af12 	bmi.w	800ab28 <_vfiprintf_r+0x4c>
 800ad04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad06:	e711      	b.n	800ab2c <_vfiprintf_r+0x50>
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <_vfiprintf_r+0x258>)
 800ad10:	a904      	add	r1, sp, #16
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7fd ff3c 	bl	8008b90 <_printf_i>
 800ad18:	e7e4      	b.n	800ace4 <_vfiprintf_r+0x208>
 800ad1a:	bf00      	nop
 800ad1c:	0800b208 	.word	0x0800b208
 800ad20:	0800b228 	.word	0x0800b228
 800ad24:	0800b1e8 	.word	0x0800b1e8
 800ad28:	0800b3a4 	.word	0x0800b3a4
 800ad2c:	0800b3ae 	.word	0x0800b3ae
 800ad30:	08008649 	.word	0x08008649
 800ad34:	0800aab7 	.word	0x0800aab7
 800ad38:	0800b3aa 	.word	0x0800b3aa

0800ad3c <_sbrk_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	; (800ad58 <_sbrk_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f7f6 febc 	bl	8001ac4 <_sbrk>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_sbrk_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_sbrk_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20014270 	.word	0x20014270

0800ad5c <__sread>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad64:	f000 f8e2 	bl	800af2c <_read_r>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	bfab      	itete	ge
 800ad6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad70:	181b      	addge	r3, r3, r0
 800ad72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad76:	bfac      	ite	ge
 800ad78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad7a:	81a3      	strhlt	r3, [r4, #12]
 800ad7c:	bd10      	pop	{r4, pc}

0800ad7e <__swrite>:
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	461f      	mov	r7, r3
 800ad84:	898b      	ldrh	r3, [r1, #12]
 800ad86:	05db      	lsls	r3, r3, #23
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	d505      	bpl.n	800ad9c <__swrite+0x1e>
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	2302      	movs	r3, #2
 800ad96:	2200      	movs	r2, #0
 800ad98:	f000 f898 	bl	800aecc <_lseek_r>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	4628      	mov	r0, r5
 800adae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	f000 b817 	b.w	800ade4 <_write_r>

0800adb6 <__sseek>:
 800adb6:	b510      	push	{r4, lr}
 800adb8:	460c      	mov	r4, r1
 800adba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbe:	f000 f885 	bl	800aecc <_lseek_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	bf15      	itete	ne
 800adc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800add2:	81a3      	strheq	r3, [r4, #12]
 800add4:	bf18      	it	ne
 800add6:	81a3      	strhne	r3, [r4, #12]
 800add8:	bd10      	pop	{r4, pc}

0800adda <__sclose>:
 800adda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adde:	f000 b831 	b.w	800ae44 <_close_r>
	...

0800ade4 <_write_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	; (800ae04 <_write_r+0x20>)
 800ade8:	4604      	mov	r4, r0
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f7f6 fe15 	bl	8001a22 <_write>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_write_r+0x1e>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_write_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20014270 	.word	0x20014270

0800ae08 <__assert_func>:
 800ae08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae0a:	4614      	mov	r4, r2
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <__assert_func+0x2c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4605      	mov	r5, r0
 800ae14:	68d8      	ldr	r0, [r3, #12]
 800ae16:	b14c      	cbz	r4, 800ae2c <__assert_func+0x24>
 800ae18:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <__assert_func+0x30>)
 800ae1a:	9100      	str	r1, [sp, #0]
 800ae1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae20:	4906      	ldr	r1, [pc, #24]	; (800ae3c <__assert_func+0x34>)
 800ae22:	462b      	mov	r3, r5
 800ae24:	f000 f81e 	bl	800ae64 <fiprintf>
 800ae28:	f000 f89f 	bl	800af6a <abort>
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <__assert_func+0x38>)
 800ae2e:	461c      	mov	r4, r3
 800ae30:	e7f3      	b.n	800ae1a <__assert_func+0x12>
 800ae32:	bf00      	nop
 800ae34:	20000014 	.word	0x20000014
 800ae38:	0800b3b5 	.word	0x0800b3b5
 800ae3c:	0800b3c2 	.word	0x0800b3c2
 800ae40:	0800b3f0 	.word	0x0800b3f0

0800ae44 <_close_r>:
 800ae44:	b538      	push	{r3, r4, r5, lr}
 800ae46:	4d06      	ldr	r5, [pc, #24]	; (800ae60 <_close_r+0x1c>)
 800ae48:	2300      	movs	r3, #0
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	4608      	mov	r0, r1
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	f7f6 fe03 	bl	8001a5a <_close>
 800ae54:	1c43      	adds	r3, r0, #1
 800ae56:	d102      	bne.n	800ae5e <_close_r+0x1a>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	b103      	cbz	r3, 800ae5e <_close_r+0x1a>
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	bd38      	pop	{r3, r4, r5, pc}
 800ae60:	20014270 	.word	0x20014270

0800ae64 <fiprintf>:
 800ae64:	b40e      	push	{r1, r2, r3}
 800ae66:	b503      	push	{r0, r1, lr}
 800ae68:	4601      	mov	r1, r0
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	4805      	ldr	r0, [pc, #20]	; (800ae84 <fiprintf+0x20>)
 800ae6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	f7ff fe31 	bl	800aadc <_vfiprintf_r>
 800ae7a:	b002      	add	sp, #8
 800ae7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae80:	b003      	add	sp, #12
 800ae82:	4770      	bx	lr
 800ae84:	20000014 	.word	0x20000014

0800ae88 <_fstat_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4d07      	ldr	r5, [pc, #28]	; (800aea8 <_fstat_r+0x20>)
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f7f6 fdec 	bl	8001a72 <_fstat>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d102      	bne.n	800aea4 <_fstat_r+0x1c>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	b103      	cbz	r3, 800aea4 <_fstat_r+0x1c>
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	bf00      	nop
 800aea8:	20014270 	.word	0x20014270

0800aeac <_isatty_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d06      	ldr	r5, [pc, #24]	; (800aec8 <_isatty_r+0x1c>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	602b      	str	r3, [r5, #0]
 800aeb8:	f7f6 fdeb 	bl	8001a92 <_isatty>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d102      	bne.n	800aec6 <_isatty_r+0x1a>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	b103      	cbz	r3, 800aec6 <_isatty_r+0x1a>
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	20014270 	.word	0x20014270

0800aecc <_lseek_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	; (800aeec <_lseek_r+0x20>)
 800aed0:	4604      	mov	r4, r0
 800aed2:	4608      	mov	r0, r1
 800aed4:	4611      	mov	r1, r2
 800aed6:	2200      	movs	r2, #0
 800aed8:	602a      	str	r2, [r5, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	f7f6 fde4 	bl	8001aa8 <_lseek>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_lseek_r+0x1e>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_lseek_r+0x1e>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	20014270 	.word	0x20014270

0800aef0 <__ascii_mbtowc>:
 800aef0:	b082      	sub	sp, #8
 800aef2:	b901      	cbnz	r1, 800aef6 <__ascii_mbtowc+0x6>
 800aef4:	a901      	add	r1, sp, #4
 800aef6:	b142      	cbz	r2, 800af0a <__ascii_mbtowc+0x1a>
 800aef8:	b14b      	cbz	r3, 800af0e <__ascii_mbtowc+0x1e>
 800aefa:	7813      	ldrb	r3, [r2, #0]
 800aefc:	600b      	str	r3, [r1, #0]
 800aefe:	7812      	ldrb	r2, [r2, #0]
 800af00:	1e10      	subs	r0, r2, #0
 800af02:	bf18      	it	ne
 800af04:	2001      	movne	r0, #1
 800af06:	b002      	add	sp, #8
 800af08:	4770      	bx	lr
 800af0a:	4610      	mov	r0, r2
 800af0c:	e7fb      	b.n	800af06 <__ascii_mbtowc+0x16>
 800af0e:	f06f 0001 	mvn.w	r0, #1
 800af12:	e7f8      	b.n	800af06 <__ascii_mbtowc+0x16>

0800af14 <__malloc_lock>:
 800af14:	4801      	ldr	r0, [pc, #4]	; (800af1c <__malloc_lock+0x8>)
 800af16:	f7ff b8ce 	b.w	800a0b6 <__retarget_lock_acquire_recursive>
 800af1a:	bf00      	nop
 800af1c:	20014264 	.word	0x20014264

0800af20 <__malloc_unlock>:
 800af20:	4801      	ldr	r0, [pc, #4]	; (800af28 <__malloc_unlock+0x8>)
 800af22:	f7ff b8c9 	b.w	800a0b8 <__retarget_lock_release_recursive>
 800af26:	bf00      	nop
 800af28:	20014264 	.word	0x20014264

0800af2c <_read_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_read_r+0x20>)
 800af30:	4604      	mov	r4, r0
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f7f6 fd54 	bl	80019e8 <_read>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_read_r+0x1e>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_read_r+0x1e>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	20014270 	.word	0x20014270

0800af50 <__ascii_wctomb>:
 800af50:	b149      	cbz	r1, 800af66 <__ascii_wctomb+0x16>
 800af52:	2aff      	cmp	r2, #255	; 0xff
 800af54:	bf85      	ittet	hi
 800af56:	238a      	movhi	r3, #138	; 0x8a
 800af58:	6003      	strhi	r3, [r0, #0]
 800af5a:	700a      	strbls	r2, [r1, #0]
 800af5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800af60:	bf98      	it	ls
 800af62:	2001      	movls	r0, #1
 800af64:	4770      	bx	lr
 800af66:	4608      	mov	r0, r1
 800af68:	4770      	bx	lr

0800af6a <abort>:
 800af6a:	b508      	push	{r3, lr}
 800af6c:	2006      	movs	r0, #6
 800af6e:	f000 f82b 	bl	800afc8 <raise>
 800af72:	2001      	movs	r0, #1
 800af74:	f7f6 fd2e 	bl	80019d4 <_exit>

0800af78 <_raise_r>:
 800af78:	291f      	cmp	r1, #31
 800af7a:	b538      	push	{r3, r4, r5, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	460d      	mov	r5, r1
 800af80:	d904      	bls.n	800af8c <_raise_r+0x14>
 800af82:	2316      	movs	r3, #22
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af8e:	b112      	cbz	r2, 800af96 <_raise_r+0x1e>
 800af90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af94:	b94b      	cbnz	r3, 800afaa <_raise_r+0x32>
 800af96:	4620      	mov	r0, r4
 800af98:	f000 f830 	bl	800affc <_getpid_r>
 800af9c:	462a      	mov	r2, r5
 800af9e:	4601      	mov	r1, r0
 800afa0:	4620      	mov	r0, r4
 800afa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afa6:	f000 b817 	b.w	800afd8 <_kill_r>
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d00a      	beq.n	800afc4 <_raise_r+0x4c>
 800afae:	1c59      	adds	r1, r3, #1
 800afb0:	d103      	bne.n	800afba <_raise_r+0x42>
 800afb2:	2316      	movs	r3, #22
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	2001      	movs	r0, #1
 800afb8:	e7e7      	b.n	800af8a <_raise_r+0x12>
 800afba:	2400      	movs	r4, #0
 800afbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afc0:	4628      	mov	r0, r5
 800afc2:	4798      	blx	r3
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7e0      	b.n	800af8a <_raise_r+0x12>

0800afc8 <raise>:
 800afc8:	4b02      	ldr	r3, [pc, #8]	; (800afd4 <raise+0xc>)
 800afca:	4601      	mov	r1, r0
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	f7ff bfd3 	b.w	800af78 <_raise_r>
 800afd2:	bf00      	nop
 800afd4:	20000014 	.word	0x20000014

0800afd8 <_kill_r>:
 800afd8:	b538      	push	{r3, r4, r5, lr}
 800afda:	4d07      	ldr	r5, [pc, #28]	; (800aff8 <_kill_r+0x20>)
 800afdc:	2300      	movs	r3, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	4608      	mov	r0, r1
 800afe2:	4611      	mov	r1, r2
 800afe4:	602b      	str	r3, [r5, #0]
 800afe6:	f7f6 fce5 	bl	80019b4 <_kill>
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d102      	bne.n	800aff4 <_kill_r+0x1c>
 800afee:	682b      	ldr	r3, [r5, #0]
 800aff0:	b103      	cbz	r3, 800aff4 <_kill_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	bf00      	nop
 800aff8:	20014270 	.word	0x20014270

0800affc <_getpid_r>:
 800affc:	f7f6 bcd2 	b.w	80019a4 <_getpid>

0800b000 <_init>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr

0800b00c <_fini>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	bf00      	nop
 800b010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b012:	bc08      	pop	{r3}
 800b014:	469e      	mov	lr, r3
 800b016:	4770      	bx	lr
